{"ast":null,"code":"const api_url = 'http://localhost/5000/api';\nexport const sendProject = async data => {\n  try {\n    const response = await fetch(`${api_url}/createProject`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'http://localhost/5000/createProjects'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('There was an error sending the data', error);\n  }\n};\nexport const getProjects = async () => {\n  try {\n    const response = await fetch(`${api_url}/getProjects`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'http://localhost/5000'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('There was an error getting the data', error);\n  }\n};\nexport const updateProject = async projectId => {\n  try {\n    const response = await fetch(`${api_url}/updateProject`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'http://localhost/5000'\n      },\n      body: JSON.stringify(data)\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error('There was an error updating the data', error);\n  }\n};","map":{"version":3,"names":["api_url","sendProject","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","getProjects","updateProject","projectId"],"sources":["/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/src/Api/Api.ts"],"sourcesContent":["import { Project } from '../Interfaces/Interfaces';\n\nconst api_url = 'http://localhost/5000/api';\n\nexport const sendProject = async (data: Project) => {\n    try {\n        const response = await fetch(`${api_url}/createProject`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': 'http://localhost/5000/createProjects',\n            },\n            body: JSON.stringify(data),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        return response.json();\n    } catch (error) {\n        console.error('There was an error sending the data', error);\n    }   \n};\n\nexport const getProjects = async () => {\n    try {\n        const response = await fetch(`${api_url}/getProjects`, {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': 'http://localhost/5000',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        return response.json() as Promise<Project[]>;\n    } catch (error) {\n        console.error('There was an error getting the data', error);\n    }\n};\n\nexport const updateProject = async (\n    projectId: string) => {\n    try {\n        const response = await fetch(`${api_url}/updateProject`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': 'http://localhost/5000',\n            },\n            body: JSON.stringify(data),\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        return response.json();\n    } catch (error) {\n        console.error('There was an error updating the data', error);\n    }\n}"],"mappings":"AAEA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,WAAW,GAAG,MAAOC,IAAa,IAAK;EAChD,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,gBAAe,EAAE;MACrDK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE;MACnC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC7D;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC/D;AACJ,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,cAAa,EAAE;MACnDK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE;MACnC;IACJ,CAAC,CAAC;IAEF,IAAI,CAACH,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC7D;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;EAC/D;AACJ,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,MACzBC,SAAiB,IAAK;EACtB,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,OAAQ,gBAAe,EAAE;MACrDK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAE;MACnC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC7B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;IAC7D;IAEA,OAAOT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;EAChE;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}