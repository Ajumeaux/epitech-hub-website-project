{"ast":null,"code":"function isAnyArrayBuffer(value) {\n  return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(Object.prototype.toString.call(value));\n}\nfunction isUint8Array(value) {\n  return Object.prototype.toString.call(value) === '[object Uint8Array]';\n}\nfunction isRegExp(d) {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n}\nfunction isMap(d) {\n  return Object.prototype.toString.call(d) === '[object Map]';\n}\nfunction isDate(d) {\n  return Object.prototype.toString.call(d) === '[object Date]';\n}\nconst BSON_MAJOR_VERSION = 5;\nconst BSON_INT32_MAX = 0x7fffffff;\nconst BSON_INT32_MIN = -0x80000000;\nconst BSON_INT64_MAX = Math.pow(2, 63) - 1;\nconst BSON_INT64_MIN = -Math.pow(2, 63);\nconst JS_INT_MAX = Math.pow(2, 53);\nconst JS_INT_MIN = -Math.pow(2, 53);\nconst BSON_DATA_NUMBER = 1;\nconst BSON_DATA_STRING = 2;\nconst BSON_DATA_OBJECT = 3;\nconst BSON_DATA_ARRAY = 4;\nconst BSON_DATA_BINARY = 5;\nconst BSON_DATA_UNDEFINED = 6;\nconst BSON_DATA_OID = 7;\nconst BSON_DATA_BOOLEAN = 8;\nconst BSON_DATA_DATE = 9;\nconst BSON_DATA_NULL = 10;\nconst BSON_DATA_REGEXP = 11;\nconst BSON_DATA_DBPOINTER = 12;\nconst BSON_DATA_CODE = 13;\nconst BSON_DATA_SYMBOL = 14;\nconst BSON_DATA_CODE_W_SCOPE = 15;\nconst BSON_DATA_INT = 16;\nconst BSON_DATA_TIMESTAMP = 17;\nconst BSON_DATA_LONG = 18;\nconst BSON_DATA_DECIMAL128 = 19;\nconst BSON_DATA_MIN_KEY = 0xff;\nconst BSON_DATA_MAX_KEY = 0x7f;\nconst BSON_BINARY_SUBTYPE_DEFAULT = 0;\nconst BSON_BINARY_SUBTYPE_UUID_NEW = 4;\nconst BSONType = Object.freeze({\n  double: 1,\n  string: 2,\n  object: 3,\n  array: 4,\n  binData: 5,\n  undefined: 6,\n  objectId: 7,\n  bool: 8,\n  date: 9,\n  null: 10,\n  regex: 11,\n  dbPointer: 12,\n  javascript: 13,\n  symbol: 14,\n  javascriptWithScope: 15,\n  int: 16,\n  timestamp: 17,\n  long: 18,\n  decimal: 19,\n  minKey: -1,\n  maxKey: 127\n});\nclass BSONError extends Error {\n  get bsonError() {\n    return true;\n  }\n  get name() {\n    return 'BSONError';\n  }\n  constructor(message) {\n    super(message);\n  }\n  static isBSONError(value) {\n    return value != null && typeof value === 'object' && 'bsonError' in value && value.bsonError === true && 'name' in value && 'message' in value && 'stack' in value;\n  }\n}\nclass BSONVersionError extends BSONError {\n  get name() {\n    return 'BSONVersionError';\n  }\n  constructor() {\n    super(`Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.0 or later`);\n  }\n}\nclass BSONRuntimeError extends BSONError {\n  get name() {\n    return 'BSONRuntimeError';\n  }\n  constructor(message) {\n    super(message);\n  }\n}\nfunction nodejsMathRandomBytes(byteLength) {\n  return nodeJsByteUtils.fromNumberArray(Array.from({\n    length: byteLength\n  }, () => Math.floor(Math.random() * 256)));\n}\nconst nodejsRandomBytes = await (async () => {\n  try {\n    return (await import('crypto')).randomBytes;\n  } catch {\n    return nodejsMathRandomBytes;\n  }\n})();\nconst nodeJsByteUtils = {\n  toLocalBufferType(potentialBuffer) {\n    if (Buffer.isBuffer(potentialBuffer)) {\n      return potentialBuffer;\n    }\n    if (ArrayBuffer.isView(potentialBuffer)) {\n      return Buffer.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);\n    }\n    const stringTag = potentialBuffer?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialBuffer);\n    if (stringTag === 'ArrayBuffer' || stringTag === 'SharedArrayBuffer' || stringTag === '[object ArrayBuffer]' || stringTag === '[object SharedArrayBuffer]') {\n      return Buffer.from(potentialBuffer);\n    }\n    throw new BSONError(`Cannot create Buffer from ${String(potentialBuffer)}`);\n  },\n  allocate(size) {\n    return Buffer.alloc(size);\n  },\n  equals(a, b) {\n    return nodeJsByteUtils.toLocalBufferType(a).equals(b);\n  },\n  fromNumberArray(array) {\n    return Buffer.from(array);\n  },\n  fromBase64(base64) {\n    return Buffer.from(base64, 'base64');\n  },\n  toBase64(buffer) {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('base64');\n  },\n  fromISO88591(codePoints) {\n    return Buffer.from(codePoints, 'binary');\n  },\n  toISO88591(buffer) {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('binary');\n  },\n  fromHex(hex) {\n    return Buffer.from(hex, 'hex');\n  },\n  toHex(buffer) {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('hex');\n  },\n  fromUTF8(text) {\n    return Buffer.from(text, 'utf8');\n  },\n  toUTF8(buffer, start, end) {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('utf8', start, end);\n  },\n  utf8ByteLength(input) {\n    return Buffer.byteLength(input, 'utf8');\n  },\n  encodeUTF8Into(buffer, source, byteOffset) {\n    return nodeJsByteUtils.toLocalBufferType(buffer).write(source, byteOffset, undefined, 'utf8');\n  },\n  randomBytes: nodejsRandomBytes\n};\nfunction isReactNative() {\n  const {\n    navigator\n  } = globalThis;\n  return typeof navigator === 'object' && navigator.product === 'ReactNative';\n}\nfunction webMathRandomBytes(byteLength) {\n  if (byteLength < 0) {\n    throw new RangeError(`The argument 'byteLength' is invalid. Received ${byteLength}`);\n  }\n  return webByteUtils.fromNumberArray(Array.from({\n    length: byteLength\n  }, () => Math.floor(Math.random() * 256)));\n}\nconst webRandomBytes = (() => {\n  const {\n    crypto\n  } = globalThis;\n  if (crypto != null && typeof crypto.getRandomValues === 'function') {\n    return byteLength => {\n      return crypto.getRandomValues(webByteUtils.allocate(byteLength));\n    };\n  } else {\n    if (isReactNative()) {\n      const {\n        console\n      } = globalThis;\n      console?.warn?.('BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.');\n    }\n    return webMathRandomBytes;\n  }\n})();\nconst HEX_DIGIT = /(\\d|[a-f])/i;\nconst webByteUtils = {\n  toLocalBufferType(potentialUint8array) {\n    const stringTag = potentialUint8array?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialUint8array);\n    if (stringTag === 'Uint8Array') {\n      return potentialUint8array;\n    }\n    if (ArrayBuffer.isView(potentialUint8array)) {\n      return new Uint8Array(potentialUint8array.buffer.slice(potentialUint8array.byteOffset, potentialUint8array.byteOffset + potentialUint8array.byteLength));\n    }\n    if (stringTag === 'ArrayBuffer' || stringTag === 'SharedArrayBuffer' || stringTag === '[object ArrayBuffer]' || stringTag === '[object SharedArrayBuffer]') {\n      return new Uint8Array(potentialUint8array);\n    }\n    throw new BSONError(`Cannot make a Uint8Array from ${String(potentialUint8array)}`);\n  },\n  allocate(size) {\n    if (typeof size !== 'number') {\n      throw new TypeError(`The \"size\" argument must be of type number. Received ${String(size)}`);\n    }\n    return new Uint8Array(size);\n  },\n  equals(a, b) {\n    if (a.byteLength !== b.byteLength) {\n      return false;\n    }\n    for (let i = 0; i < a.byteLength; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  },\n  fromNumberArray(array) {\n    return Uint8Array.from(array);\n  },\n  fromBase64(base64) {\n    return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n  },\n  toBase64(uint8array) {\n    return btoa(webByteUtils.toISO88591(uint8array));\n  },\n  fromISO88591(codePoints) {\n    return Uint8Array.from(codePoints, c => c.charCodeAt(0) & 0xff);\n  },\n  toISO88591(uint8array) {\n    return Array.from(Uint16Array.from(uint8array), b => String.fromCharCode(b)).join('');\n  },\n  fromHex(hex) {\n    const evenLengthHex = hex.length % 2 === 0 ? hex : hex.slice(0, hex.length - 1);\n    const buffer = [];\n    for (let i = 0; i < evenLengthHex.length; i += 2) {\n      const firstDigit = evenLengthHex[i];\n      const secondDigit = evenLengthHex[i + 1];\n      if (!HEX_DIGIT.test(firstDigit)) {\n        break;\n      }\n      if (!HEX_DIGIT.test(secondDigit)) {\n        break;\n      }\n      const hexDigit = Number.parseInt(`${firstDigit}${secondDigit}`, 16);\n      buffer.push(hexDigit);\n    }\n    return Uint8Array.from(buffer);\n  },\n  toHex(uint8array) {\n    return Array.from(uint8array, byte => byte.toString(16).padStart(2, '0')).join('');\n  },\n  fromUTF8(text) {\n    return new TextEncoder().encode(text);\n  },\n  toUTF8(uint8array, start, end) {\n    return new TextDecoder('utf8', {\n      fatal: false\n    }).decode(uint8array.slice(start, end));\n  },\n  utf8ByteLength(input) {\n    return webByteUtils.fromUTF8(input).byteLength;\n  },\n  encodeUTF8Into(buffer, source, byteOffset) {\n    const bytes = webByteUtils.fromUTF8(source);\n    buffer.set(bytes, byteOffset);\n    return bytes.byteLength;\n  },\n  randomBytes: webRandomBytes\n};\nconst hasGlobalBuffer = typeof Buffer === 'function' && Buffer.prototype?._isBuffer !== true;\nconst ByteUtils = hasGlobalBuffer ? nodeJsByteUtils : webByteUtils;\nclass BSONDataView extends DataView {\n  static fromUint8Array(input) {\n    return new DataView(input.buffer, input.byteOffset, input.byteLength);\n  }\n}\nclass BSONValue {\n  get [Symbol.for('@@mdb.bson.version')]() {\n    return BSON_MAJOR_VERSION;\n  }\n}\nclass Binary extends BSONValue {\n  get _bsontype() {\n    return 'Binary';\n  }\n  constructor(buffer, subType) {\n    super();\n    if (!(buffer == null) && !(typeof buffer === 'string') && !ArrayBuffer.isView(buffer) && !(buffer instanceof ArrayBuffer) && !Array.isArray(buffer)) {\n      throw new BSONError('Binary can only be constructed from string, Buffer, TypedArray, or Array<number>');\n    }\n    this.sub_type = subType ?? Binary.BSON_BINARY_SUBTYPE_DEFAULT;\n    if (buffer == null) {\n      this.buffer = ByteUtils.allocate(Binary.BUFFER_SIZE);\n      this.position = 0;\n    } else {\n      if (typeof buffer === 'string') {\n        this.buffer = ByteUtils.fromISO88591(buffer);\n      } else if (Array.isArray(buffer)) {\n        this.buffer = ByteUtils.fromNumberArray(buffer);\n      } else {\n        this.buffer = ByteUtils.toLocalBufferType(buffer);\n      }\n      this.position = this.buffer.byteLength;\n    }\n  }\n  put(byteValue) {\n    if (typeof byteValue === 'string' && byteValue.length !== 1) {\n      throw new BSONError('only accepts single character String');\n    } else if (typeof byteValue !== 'number' && byteValue.length !== 1) throw new BSONError('only accepts single character Uint8Array or Array');\n    let decodedByte;\n    if (typeof byteValue === 'string') {\n      decodedByte = byteValue.charCodeAt(0);\n    } else if (typeof byteValue === 'number') {\n      decodedByte = byteValue;\n    } else {\n      decodedByte = byteValue[0];\n    }\n    if (decodedByte < 0 || decodedByte > 255) {\n      throw new BSONError('only accepts number in a valid unsigned byte range 0-255');\n    }\n    if (this.buffer.byteLength > this.position) {\n      this.buffer[this.position++] = decodedByte;\n    } else {\n      const newSpace = ByteUtils.allocate(Binary.BUFFER_SIZE + this.buffer.length);\n      newSpace.set(this.buffer, 0);\n      this.buffer = newSpace;\n      this.buffer[this.position++] = decodedByte;\n    }\n  }\n  write(sequence, offset) {\n    offset = typeof offset === 'number' ? offset : this.position;\n    if (this.buffer.byteLength < offset + sequence.length) {\n      const newSpace = ByteUtils.allocate(this.buffer.byteLength + sequence.length);\n      newSpace.set(this.buffer, 0);\n      this.buffer = newSpace;\n    }\n    if (ArrayBuffer.isView(sequence)) {\n      this.buffer.set(ByteUtils.toLocalBufferType(sequence), offset);\n      this.position = offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;\n    } else if (typeof sequence === 'string') {\n      const bytes = ByteUtils.fromISO88591(sequence);\n      this.buffer.set(bytes, offset);\n      this.position = offset + sequence.length > this.position ? offset + sequence.length : this.position;\n    }\n  }\n  read(position, length) {\n    length = length && length > 0 ? length : this.position;\n    return this.buffer.slice(position, position + length);\n  }\n  value(asRaw) {\n    asRaw = !!asRaw;\n    if (asRaw && this.buffer.length === this.position) {\n      return this.buffer;\n    }\n    if (asRaw) {\n      return this.buffer.slice(0, this.position);\n    }\n    return ByteUtils.toISO88591(this.buffer.subarray(0, this.position));\n  }\n  length() {\n    return this.position;\n  }\n  toJSON() {\n    return ByteUtils.toBase64(this.buffer);\n  }\n  toString(encoding) {\n    if (encoding === 'hex') return ByteUtils.toHex(this.buffer);\n    if (encoding === 'base64') return ByteUtils.toBase64(this.buffer);\n    if (encoding === 'utf8' || encoding === 'utf-8') return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n    return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n  }\n  toExtendedJSON(options) {\n    options = options || {};\n    const base64String = ByteUtils.toBase64(this.buffer);\n    const subType = Number(this.sub_type).toString(16);\n    if (options.legacy) {\n      return {\n        $binary: base64String,\n        $type: subType.length === 1 ? '0' + subType : subType\n      };\n    }\n    return {\n      $binary: {\n        base64: base64String,\n        subType: subType.length === 1 ? '0' + subType : subType\n      }\n    };\n  }\n  toUUID() {\n    if (this.sub_type === Binary.SUBTYPE_UUID) {\n      return new UUID(this.buffer.slice(0, this.position));\n    }\n    throw new BSONError(`Binary sub_type \"${this.sub_type}\" is not supported for converting to UUID. Only \"${Binary.SUBTYPE_UUID}\" is currently supported.`);\n  }\n  static createFromHexString(hex, subType) {\n    return new Binary(ByteUtils.fromHex(hex), subType);\n  }\n  static createFromBase64(base64, subType) {\n    return new Binary(ByteUtils.fromBase64(base64), subType);\n  }\n  static fromExtendedJSON(doc, options) {\n    options = options || {};\n    let data;\n    let type;\n    if ('$binary' in doc) {\n      if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {\n        type = doc.$type ? parseInt(doc.$type, 16) : 0;\n        data = ByteUtils.fromBase64(doc.$binary);\n      } else {\n        if (typeof doc.$binary !== 'string') {\n          type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n          data = ByteUtils.fromBase64(doc.$binary.base64);\n        }\n      }\n    } else if ('$uuid' in doc) {\n      type = 4;\n      data = UUID.bytesFromString(doc.$uuid);\n    }\n    if (!data) {\n      throw new BSONError(`Unexpected Binary Extended JSON format ${JSON.stringify(doc)}`);\n    }\n    return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    const base64 = ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n    return `Binary.createFromBase64(\"${base64}\", ${this.sub_type})`;\n  }\n}\nBinary.BSON_BINARY_SUBTYPE_DEFAULT = 0;\nBinary.BUFFER_SIZE = 256;\nBinary.SUBTYPE_DEFAULT = 0;\nBinary.SUBTYPE_FUNCTION = 1;\nBinary.SUBTYPE_BYTE_ARRAY = 2;\nBinary.SUBTYPE_UUID_OLD = 3;\nBinary.SUBTYPE_UUID = 4;\nBinary.SUBTYPE_MD5 = 5;\nBinary.SUBTYPE_ENCRYPTED = 6;\nBinary.SUBTYPE_COLUMN = 7;\nBinary.SUBTYPE_USER_DEFINED = 128;\nconst UUID_BYTE_LENGTH = 16;\nconst UUID_WITHOUT_DASHES = /^[0-9A-F]{32}$/i;\nconst UUID_WITH_DASHES = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\nclass UUID extends Binary {\n  constructor(input) {\n    let bytes;\n    if (input == null) {\n      bytes = UUID.generate();\n    } else if (input instanceof UUID) {\n      bytes = ByteUtils.toLocalBufferType(new Uint8Array(input.buffer));\n    } else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {\n      bytes = ByteUtils.toLocalBufferType(input);\n    } else if (typeof input === 'string') {\n      bytes = UUID.bytesFromString(input);\n    } else {\n      throw new BSONError('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');\n    }\n    super(bytes, BSON_BINARY_SUBTYPE_UUID_NEW);\n  }\n  get id() {\n    return this.buffer;\n  }\n  set id(value) {\n    this.buffer = value;\n  }\n  toHexString() {\n    let includeDashes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (includeDashes) {\n      return [ByteUtils.toHex(this.buffer.subarray(0, 4)), ByteUtils.toHex(this.buffer.subarray(4, 6)), ByteUtils.toHex(this.buffer.subarray(6, 8)), ByteUtils.toHex(this.buffer.subarray(8, 10)), ByteUtils.toHex(this.buffer.subarray(10, 16))].join('-');\n    }\n    return ByteUtils.toHex(this.buffer);\n  }\n  toString(encoding) {\n    if (encoding === 'hex') return ByteUtils.toHex(this.id);\n    if (encoding === 'base64') return ByteUtils.toBase64(this.id);\n    return this.toHexString();\n  }\n  toJSON() {\n    return this.toHexString();\n  }\n  equals(otherId) {\n    if (!otherId) {\n      return false;\n    }\n    if (otherId instanceof UUID) {\n      return ByteUtils.equals(otherId.id, this.id);\n    }\n    try {\n      return ByteUtils.equals(new UUID(otherId).id, this.id);\n    } catch {\n      return false;\n    }\n  }\n  toBinary() {\n    return new Binary(this.id, Binary.SUBTYPE_UUID);\n  }\n  static generate() {\n    const bytes = ByteUtils.randomBytes(UUID_BYTE_LENGTH);\n    bytes[6] = bytes[6] & 0x0f | 0x40;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n    return bytes;\n  }\n  static isValid(input) {\n    if (!input) {\n      return false;\n    }\n    if (typeof input === 'string') {\n      return UUID.isValidUUIDString(input);\n    }\n    if (isUint8Array(input)) {\n      return input.byteLength === UUID_BYTE_LENGTH;\n    }\n    return input._bsontype === 'Binary' && input.sub_type === this.SUBTYPE_UUID && input.buffer.byteLength === 16;\n  }\n  static createFromHexString(hexString) {\n    const buffer = UUID.bytesFromString(hexString);\n    return new UUID(buffer);\n  }\n  static createFromBase64(base64) {\n    return new UUID(ByteUtils.fromBase64(base64));\n  }\n  static bytesFromString(representation) {\n    if (!UUID.isValidUUIDString(representation)) {\n      throw new BSONError('UUID string representation must be 32 hex digits or canonical hyphenated representation');\n    }\n    return ByteUtils.fromHex(representation.replace(/-/g, ''));\n  }\n  static isValidUUIDString(representation) {\n    return UUID_WITHOUT_DASHES.test(representation) || UUID_WITH_DASHES.test(representation);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new UUID(\"${this.toHexString()}\")`;\n  }\n}\nUUID.cacheHexString = false;\nclass Code extends BSONValue {\n  get _bsontype() {\n    return 'Code';\n  }\n  constructor(code, scope) {\n    super();\n    this.code = code.toString();\n    this.scope = scope ?? null;\n  }\n  toJSON() {\n    if (this.scope != null) {\n      return {\n        code: this.code,\n        scope: this.scope\n      };\n    }\n    return {\n      code: this.code\n    };\n  }\n  toExtendedJSON() {\n    if (this.scope) {\n      return {\n        $code: this.code,\n        $scope: this.scope\n      };\n    }\n    return {\n      $code: this.code\n    };\n  }\n  static fromExtendedJSON(doc) {\n    return new Code(doc.$code, doc.$scope);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    const codeJson = this.toJSON();\n    return `new Code(\"${String(codeJson.code)}\"${codeJson.scope != null ? `, ${JSON.stringify(codeJson.scope)}` : ''})`;\n  }\n}\nfunction isDBRefLike(value) {\n  return value != null && typeof value === 'object' && '$id' in value && value.$id != null && '$ref' in value && typeof value.$ref === 'string' && (!('$db' in value) || '$db' in value && typeof value.$db === 'string');\n}\nclass DBRef extends BSONValue {\n  get _bsontype() {\n    return 'DBRef';\n  }\n  constructor(collection, oid, db, fields) {\n    super();\n    const parts = collection.split('.');\n    if (parts.length === 2) {\n      db = parts.shift();\n      collection = parts.shift();\n    }\n    this.collection = collection;\n    this.oid = oid;\n    this.db = db;\n    this.fields = fields || {};\n  }\n  get namespace() {\n    return this.collection;\n  }\n  set namespace(value) {\n    this.collection = value;\n  }\n  toJSON() {\n    const o = Object.assign({\n      $ref: this.collection,\n      $id: this.oid\n    }, this.fields);\n    if (this.db != null) o.$db = this.db;\n    return o;\n  }\n  toExtendedJSON(options) {\n    options = options || {};\n    let o = {\n      $ref: this.collection,\n      $id: this.oid\n    };\n    if (options.legacy) {\n      return o;\n    }\n    if (this.db) o.$db = this.db;\n    o = Object.assign(o, this.fields);\n    return o;\n  }\n  static fromExtendedJSON(doc) {\n    const copy = Object.assign({}, doc);\n    delete copy.$ref;\n    delete copy.$id;\n    delete copy.$db;\n    return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    const oid = this.oid === undefined || this.oid.toString === undefined ? this.oid : this.oid.toString();\n    return `new DBRef(\"${this.namespace}\", new ObjectId(\"${String(oid)}\")${this.db ? `, \"${this.db}\"` : ''})`;\n  }\n}\nlet wasm = undefined;\ntry {\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n} catch {}\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_24_DBL = 1 << 24;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\nconst INT_CACHE = {};\nconst UINT_CACHE = {};\nconst MAX_INT64_STRING_LENGTH = 20;\nconst DECIMAL_REG_EX = /^(\\+?0|(\\+|-)?[1-9][0-9]*)$/;\nclass Long extends BSONValue {\n  get _bsontype() {\n    return 'Long';\n  }\n  get __isLong__() {\n    return true;\n  }\n  constructor() {\n    let low = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let high = arguments.length > 1 ? arguments[1] : undefined;\n    let unsigned = arguments.length > 2 ? arguments[2] : undefined;\n    super();\n    if (typeof low === 'bigint') {\n      Object.assign(this, Long.fromBigInt(low, !!high));\n    } else if (typeof low === 'string') {\n      Object.assign(this, Long.fromString(low, !!high));\n    } else {\n      this.low = low | 0;\n      this.high = high | 0;\n      this.unsigned = !!unsigned;\n    }\n  }\n  static fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  static fromInt(value, unsigned) {\n    let obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  static fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? Long.UZERO : Long.ZERO;\n    if (unsigned) {\n      if (value < 0) return Long.UZERO;\n      if (value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n    }\n    if (value < 0) return Long.fromNumber(-value, unsigned).neg();\n    return Long.fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  static fromBigInt(value, unsigned) {\n    return Long.fromString(value.toString(), unsigned);\n  }\n  static fromString(str, unsigned, radix) {\n    if (str.length === 0) throw new BSONError('empty string');\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') return Long.ZERO;\n    if (typeof unsigned === 'number') {\n      radix = unsigned, unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw new BSONError('radix');\n    let p;\n    if ((p = str.indexOf('-')) > 0) throw new BSONError('interior hyphen');else if (p === 0) {\n      return Long.fromString(str.substring(1), unsigned, radix).neg();\n    }\n    const radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    let result = Long.ZERO;\n    for (let i = 0; i < str.length; i += 8) {\n      const size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        const power = Long.fromNumber(Math.pow(radix, size));\n        result = result.mul(power).add(Long.fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  }\n  static fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  }\n  static fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  }\n  static fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  }\n  static isLong(value) {\n    return value != null && typeof value === 'object' && '__isLong__' in value && value.__isLong__ === true;\n  }\n  static fromValue(val, unsigned) {\n    if (typeof val === 'number') return Long.fromNumber(val, unsigned);\n    if (typeof val === 'string') return Long.fromString(val, unsigned);\n    return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  add(addend) {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n    const a48 = this.high >>> 16;\n    const a32 = this.high & 0xffff;\n    const a16 = this.low >>> 16;\n    const a00 = this.low & 0xffff;\n    const b48 = addend.high >>> 16;\n    const b32 = addend.high & 0xffff;\n    const b16 = addend.low >>> 16;\n    const b00 = addend.low & 0xffff;\n    let c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  }\n  and(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  }\n  compare(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.eq(other)) return 0;\n    const thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  }\n  comp(other) {\n    return this.compare(other);\n  }\n  divide(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (divisor.isZero()) throw new BSONError('division by zero');\n    if (wasm) {\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        return this;\n      }\n      const low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n    let approx, rem, res;\n    if (!this.unsigned) {\n      if (this.eq(Long.MIN_VALUE)) {\n        if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE;else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;else {\n          const halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(Long.ZERO)) {\n            return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = Long.ZERO;\n    } else {\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return Long.UZERO;\n      if (divisor.gt(this.shru(1))) return Long.UONE;\n      res = Long.UZERO;\n    }\n    rem = this;\n    while (rem.gte(divisor)) {\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n      const log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n      let approxRes = Long.fromNumber(approx);\n      let approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      }\n      if (approxRes.isZero()) approxRes = Long.ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  }\n  div(divisor) {\n    return this.divide(divisor);\n  }\n  equals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  }\n  eq(other) {\n    return this.equals(other);\n  }\n  getHighBits() {\n    return this.high;\n  }\n  getHighBitsUnsigned() {\n    return this.high >>> 0;\n  }\n  getLowBits() {\n    return this.low;\n  }\n  getLowBitsUnsigned() {\n    return this.low >>> 0;\n  }\n  getNumBitsAbs() {\n    if (this.isNegative()) {\n      return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    }\n    const val = this.high !== 0 ? this.high : this.low;\n    let bit;\n    for (bit = 31; bit > 0; bit--) if ((val & 1 << bit) !== 0) break;\n    return this.high !== 0 ? bit + 33 : bit + 1;\n  }\n  greaterThan(other) {\n    return this.comp(other) > 0;\n  }\n  gt(other) {\n    return this.greaterThan(other);\n  }\n  greaterThanOrEqual(other) {\n    return this.comp(other) >= 0;\n  }\n  gte(other) {\n    return this.greaterThanOrEqual(other);\n  }\n  ge(other) {\n    return this.greaterThanOrEqual(other);\n  }\n  isEven() {\n    return (this.low & 1) === 0;\n  }\n  isNegative() {\n    return !this.unsigned && this.high < 0;\n  }\n  isOdd() {\n    return (this.low & 1) === 1;\n  }\n  isPositive() {\n    return this.unsigned || this.high >= 0;\n  }\n  isZero() {\n    return this.high === 0 && this.low === 0;\n  }\n  lessThan(other) {\n    return this.comp(other) < 0;\n  }\n  lt(other) {\n    return this.lessThan(other);\n  }\n  lessThanOrEqual(other) {\n    return this.comp(other) <= 0;\n  }\n  lte(other) {\n    return this.lessThanOrEqual(other);\n  }\n  modulo(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (wasm) {\n      const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n    return this.sub(this.div(divisor).mul(divisor));\n  }\n  mod(divisor) {\n    return this.modulo(divisor);\n  }\n  rem(divisor) {\n    return this.modulo(divisor);\n  }\n  multiply(multiplier) {\n    if (this.isZero()) return Long.ZERO;\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n    if (wasm) {\n      const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n    if (multiplier.isZero()) return Long.ZERO;\n    if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n    if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24)) return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n    const a48 = this.high >>> 16;\n    const a32 = this.high & 0xffff;\n    const a16 = this.low >>> 16;\n    const a00 = this.low & 0xffff;\n    const b48 = multiplier.high >>> 16;\n    const b32 = multiplier.high & 0xffff;\n    const b16 = multiplier.low >>> 16;\n    const b00 = multiplier.low & 0xffff;\n    let c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  }\n  mul(multiplier) {\n    return this.multiply(multiplier);\n  }\n  negate() {\n    if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;\n    return this.not().add(Long.ONE);\n  }\n  neg() {\n    return this.negate();\n  }\n  not() {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  }\n  notEquals(other) {\n    return !this.equals(other);\n  }\n  neq(other) {\n    return this.notEquals(other);\n  }\n  ne(other) {\n    return this.notEquals(other);\n  }\n  or(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  }\n  shiftLeft(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return Long.fromBits(0, this.low << numBits - 32, this.unsigned);\n  }\n  shl(numBits) {\n    return this.shiftLeft(numBits);\n  }\n  shiftRight(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return Long.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return Long.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  }\n  shr(numBits) {\n    return this.shiftRight(numBits);\n  }\n  shiftRightUnsigned(numBits) {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;else {\n      const high = this.high;\n      if (numBits < 32) {\n        const low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);else return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n    }\n  }\n  shr_u(numBits) {\n    return this.shiftRightUnsigned(numBits);\n  }\n  shru(numBits) {\n    return this.shiftRightUnsigned(numBits);\n  }\n  subtract(subtrahend) {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  }\n  sub(subtrahend) {\n    return this.subtract(subtrahend);\n  }\n  toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  }\n  toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  }\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  }\n  toBytesLE() {\n    const hi = this.high,\n      lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  }\n  toBytesBE() {\n    const hi = this.high,\n      lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  }\n  toSigned() {\n    if (!this.unsigned) return this;\n    return Long.fromBits(this.low, this.high, false);\n  }\n  toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw new BSONError('radix');\n    if (this.isZero()) return '0';\n    if (this.isNegative()) {\n      if (this.eq(Long.MIN_VALUE)) {\n        const radixLong = Long.fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    }\n    const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n    let rem = this;\n    let result = '';\n    while (true) {\n      const remDiv = rem.div(radixToPower);\n      const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n      let digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  }\n  toUnsigned() {\n    if (this.unsigned) return this;\n    return Long.fromBits(this.low, this.high, true);\n  }\n  xor(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  }\n  eqz() {\n    return this.isZero();\n  }\n  le(other) {\n    return this.lessThanOrEqual(other);\n  }\n  toExtendedJSON(options) {\n    if (options && options.relaxed) return this.toNumber();\n    return {\n      $numberLong: this.toString()\n    };\n  }\n  static fromExtendedJSON(doc, options) {\n    const {\n      useBigInt64 = false,\n      relaxed = true\n    } = {\n      ...options\n    };\n    if (doc.$numberLong.length > MAX_INT64_STRING_LENGTH) {\n      throw new BSONError('$numberLong string is too long');\n    }\n    if (!DECIMAL_REG_EX.test(doc.$numberLong)) {\n      throw new BSONError(`$numberLong string \"${doc.$numberLong}\" is in an invalid format`);\n    }\n    if (useBigInt64) {\n      const bigIntResult = BigInt(doc.$numberLong);\n      return BigInt.asIntN(64, bigIntResult);\n    }\n    const longResult = Long.fromString(doc.$numberLong);\n    if (relaxed) {\n      return longResult.toNumber();\n    }\n    return longResult;\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new Long(\"${this.toString()}\"${this.unsigned ? ', true' : ''})`;\n  }\n}\nLong.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\nLong.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\nLong.ZERO = Long.fromInt(0);\nLong.UZERO = Long.fromInt(0, true);\nLong.ONE = Long.fromInt(1);\nLong.UONE = Long.fromInt(1, true);\nLong.NEG_ONE = Long.fromInt(-1);\nLong.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\nLong.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\nconst NAN_BUFFER = ByteUtils.fromNumberArray([0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse());\nconst INF_NEGATIVE_BUFFER = ByteUtils.fromNumberArray([0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse());\nconst INF_POSITIVE_BUFFER = ByteUtils.fromNumberArray([0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00].reverse());\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\nconst COMBINATION_MASK = 0x1f;\nconst EXPONENT_MASK = 0x3fff;\nconst COMBINATION_INFINITY = 30;\nconst COMBINATION_NAN = 31;\nfunction isDigit(value) {\n  return !isNaN(parseInt(value, 10));\n}\nfunction divideu128(value) {\n  const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  let _rem = Long.fromNumber(0);\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return {\n      quotient: value,\n      rem: _rem\n    };\n  }\n  for (let i = 0; i <= 3; i++) {\n    _rem = _rem.shiftLeft(32);\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low;\n    _rem = _rem.modulo(DIVISOR);\n  }\n  return {\n    quotient: value,\n    rem: _rem\n  };\n}\nfunction multiply64x2(left, right) {\n  if (!left && !right) {\n    return {\n      high: Long.fromNumber(0),\n      low: Long.fromNumber(0)\n    };\n  }\n  const leftHigh = left.shiftRightUnsigned(32);\n  const leftLow = new Long(left.getLowBits(), 0);\n  const rightHigh = right.shiftRightUnsigned(32);\n  const rightLow = new Long(right.getLowBits(), 0);\n  let productHigh = leftHigh.multiply(rightHigh);\n  let productMid = leftHigh.multiply(rightLow);\n  const productMid2 = leftLow.multiply(rightHigh);\n  let productLow = leftLow.multiply(rightLow);\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n  return {\n    high: productHigh,\n    low: productLow\n  };\n}\nfunction lessThan(left, right) {\n  const uhleft = left.high >>> 0;\n  const uhright = right.high >>> 0;\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    const ulleft = left.low >>> 0;\n    const ulright = right.low >>> 0;\n    if (ulleft < ulright) return true;\n  }\n  return false;\n}\nfunction invalidErr(string, message) {\n  throw new BSONError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\nclass Decimal128 extends BSONValue {\n  get _bsontype() {\n    return 'Decimal128';\n  }\n  constructor(bytes) {\n    super();\n    if (typeof bytes === 'string') {\n      this.bytes = Decimal128.fromString(bytes).bytes;\n    } else if (isUint8Array(bytes)) {\n      if (bytes.byteLength !== 16) {\n        throw new BSONError('Decimal128 must take a Buffer of 16 bytes');\n      }\n      this.bytes = bytes;\n    } else {\n      throw new BSONError('Decimal128 must take a Buffer or string');\n    }\n  }\n  static fromString(representation) {\n    let isNegative = false;\n    let sawRadix = false;\n    let foundNonZero = false;\n    let significantDigits = 0;\n    let nDigitsRead = 0;\n    let nDigits = 0;\n    let radixPosition = 0;\n    let firstNonZero = 0;\n    const digits = [0];\n    let nDigitsStored = 0;\n    let digitsInsert = 0;\n    let firstDigit = 0;\n    let lastDigit = 0;\n    let exponent = 0;\n    let i = 0;\n    let significandHigh = new Long(0, 0);\n    let significandLow = new Long(0, 0);\n    let biasedExponent = 0;\n    let index = 0;\n    if (representation.length >= 7000) {\n      throw new BSONError('' + representation + ' not a valid Decimal128 string');\n    }\n    const stringMatch = representation.match(PARSE_STRING_REGEXP);\n    const infMatch = representation.match(PARSE_INF_REGEXP);\n    const nanMatch = representation.match(PARSE_NAN_REGEXP);\n    if (!stringMatch && !infMatch && !nanMatch || representation.length === 0) {\n      throw new BSONError('' + representation + ' not a valid Decimal128 string');\n    }\n    if (stringMatch) {\n      const unsignedNumber = stringMatch[2];\n      const e = stringMatch[4];\n      const expSign = stringMatch[5];\n      const expNumber = stringMatch[6];\n      if (e && expNumber === undefined) invalidErr(representation, 'missing exponent power');\n      if (e && unsignedNumber === undefined) invalidErr(representation, 'missing exponent base');\n      if (e === undefined && (expSign || expNumber)) {\n        invalidErr(representation, 'missing e before exponent');\n      }\n    }\n    if (representation[index] === '+' || representation[index] === '-') {\n      isNegative = representation[index++] === '-';\n    }\n    if (!isDigit(representation[index]) && representation[index] !== '.') {\n      if (representation[index] === 'i' || representation[index] === 'I') {\n        return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n      } else if (representation[index] === 'N') {\n        return new Decimal128(NAN_BUFFER);\n      }\n    }\n    while (isDigit(representation[index]) || representation[index] === '.') {\n      if (representation[index] === '.') {\n        if (sawRadix) invalidErr(representation, 'contains multiple periods');\n        sawRadix = true;\n        index = index + 1;\n        continue;\n      }\n      if (nDigitsStored < 34) {\n        if (representation[index] !== '0' || foundNonZero) {\n          if (!foundNonZero) {\n            firstNonZero = nDigitsRead;\n          }\n          foundNonZero = true;\n          digits[digitsInsert++] = parseInt(representation[index], 10);\n          nDigitsStored = nDigitsStored + 1;\n        }\n      }\n      if (foundNonZero) nDigits = nDigits + 1;\n      if (sawRadix) radixPosition = radixPosition + 1;\n      nDigitsRead = nDigitsRead + 1;\n      index = index + 1;\n    }\n    if (sawRadix && !nDigitsRead) throw new BSONError('' + representation + ' not a valid Decimal128 string');\n    if (representation[index] === 'e' || representation[index] === 'E') {\n      const match = representation.substr(++index).match(EXPONENT_REGEX);\n      if (!match || !match[2]) return new Decimal128(NAN_BUFFER);\n      exponent = parseInt(match[0], 10);\n      index = index + match[0].length;\n    }\n    if (representation[index]) return new Decimal128(NAN_BUFFER);\n    firstDigit = 0;\n    if (!nDigitsStored) {\n      firstDigit = 0;\n      lastDigit = 0;\n      digits[0] = 0;\n      nDigits = 1;\n      nDigitsStored = 1;\n      significantDigits = 0;\n    } else {\n      lastDigit = nDigitsStored - 1;\n      significantDigits = nDigits;\n      if (significantDigits !== 1) {\n        while (digits[firstNonZero + significantDigits - 1] === 0) {\n          significantDigits = significantDigits - 1;\n        }\n      }\n    }\n    if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n      exponent = EXPONENT_MIN;\n    } else {\n      exponent = exponent - radixPosition;\n    }\n    while (exponent > EXPONENT_MAX) {\n      lastDigit = lastDigit + 1;\n      if (lastDigit - firstDigit > MAX_DIGITS) {\n        const digitsString = digits.join('');\n        if (digitsString.match(/^0+$/)) {\n          exponent = EXPONENT_MAX;\n          break;\n        }\n        invalidErr(representation, 'overflow');\n      }\n      exponent = exponent - 1;\n    }\n    while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n      if (lastDigit === 0 && significantDigits < nDigitsStored) {\n        exponent = EXPONENT_MIN;\n        significantDigits = 0;\n        break;\n      }\n      if (nDigitsStored < nDigits) {\n        nDigits = nDigits - 1;\n      } else {\n        lastDigit = lastDigit - 1;\n      }\n      if (exponent < EXPONENT_MAX) {\n        exponent = exponent + 1;\n      } else {\n        const digitsString = digits.join('');\n        if (digitsString.match(/^0+$/)) {\n          exponent = EXPONENT_MAX;\n          break;\n        }\n        invalidErr(representation, 'overflow');\n      }\n    }\n    if (lastDigit - firstDigit + 1 < significantDigits) {\n      let endOfString = nDigitsRead;\n      if (sawRadix) {\n        firstNonZero = firstNonZero + 1;\n        endOfString = endOfString + 1;\n      }\n      if (isNegative) {\n        firstNonZero = firstNonZero + 1;\n        endOfString = endOfString + 1;\n      }\n      const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n      let roundBit = 0;\n      if (roundDigit >= 5) {\n        roundBit = 1;\n        if (roundDigit === 5) {\n          roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;\n          for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n            if (parseInt(representation[i], 10)) {\n              roundBit = 1;\n              break;\n            }\n          }\n        }\n      }\n      if (roundBit) {\n        let dIdx = lastDigit;\n        for (; dIdx >= 0; dIdx--) {\n          if (++digits[dIdx] > 9) {\n            digits[dIdx] = 0;\n            if (dIdx === 0) {\n              if (exponent < EXPONENT_MAX) {\n                exponent = exponent + 1;\n                digits[dIdx] = 1;\n              } else {\n                return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n              }\n            }\n          }\n        }\n      }\n    }\n    significandHigh = Long.fromNumber(0);\n    significandLow = Long.fromNumber(0);\n    if (significantDigits === 0) {\n      significandHigh = Long.fromNumber(0);\n      significandLow = Long.fromNumber(0);\n    } else if (lastDigit - firstDigit < 17) {\n      let dIdx = firstDigit;\n      significandLow = Long.fromNumber(digits[dIdx++]);\n      significandHigh = new Long(0, 0);\n      for (; dIdx <= lastDigit; dIdx++) {\n        significandLow = significandLow.multiply(Long.fromNumber(10));\n        significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n      }\n    } else {\n      let dIdx = firstDigit;\n      significandHigh = Long.fromNumber(digits[dIdx++]);\n      for (; dIdx <= lastDigit - 17; dIdx++) {\n        significandHigh = significandHigh.multiply(Long.fromNumber(10));\n        significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n      }\n      significandLow = Long.fromNumber(digits[dIdx++]);\n      for (; dIdx <= lastDigit; dIdx++) {\n        significandLow = significandLow.multiply(Long.fromNumber(10));\n        significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n      }\n    }\n    const significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n    significand.low = significand.low.add(significandLow);\n    if (lessThan(significand.low, significandLow)) {\n      significand.high = significand.high.add(Long.fromNumber(1));\n    }\n    biasedExponent = exponent + EXPONENT_BIAS;\n    const dec = {\n      low: Long.fromNumber(0),\n      high: Long.fromNumber(0)\n    };\n    if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {\n      dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n      dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));\n      dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n    } else {\n      dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n      dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n    }\n    dec.low = significand.low;\n    if (isNegative) {\n      dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n    }\n    const buffer = ByteUtils.allocate(16);\n    index = 0;\n    buffer[index++] = dec.low.low & 0xff;\n    buffer[index++] = dec.low.low >> 8 & 0xff;\n    buffer[index++] = dec.low.low >> 16 & 0xff;\n    buffer[index++] = dec.low.low >> 24 & 0xff;\n    buffer[index++] = dec.low.high & 0xff;\n    buffer[index++] = dec.low.high >> 8 & 0xff;\n    buffer[index++] = dec.low.high >> 16 & 0xff;\n    buffer[index++] = dec.low.high >> 24 & 0xff;\n    buffer[index++] = dec.high.low & 0xff;\n    buffer[index++] = dec.high.low >> 8 & 0xff;\n    buffer[index++] = dec.high.low >> 16 & 0xff;\n    buffer[index++] = dec.high.low >> 24 & 0xff;\n    buffer[index++] = dec.high.high & 0xff;\n    buffer[index++] = dec.high.high >> 8 & 0xff;\n    buffer[index++] = dec.high.high >> 16 & 0xff;\n    buffer[index++] = dec.high.high >> 24 & 0xff;\n    return new Decimal128(buffer);\n  }\n  toString() {\n    let biased_exponent;\n    let significand_digits = 0;\n    const significand = new Array(36);\n    for (let i = 0; i < significand.length; i++) significand[i] = 0;\n    let index = 0;\n    let is_zero = false;\n    let significand_msb;\n    let significand128 = {\n      parts: [0, 0, 0, 0]\n    };\n    let j, k;\n    const string = [];\n    index = 0;\n    const buffer = this.bytes;\n    const low = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n    const midl = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n    const midh = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n    const high = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n    index = 0;\n    const dec = {\n      low: new Long(low, midl),\n      high: new Long(midh, high)\n    };\n    if (dec.high.lessThan(Long.ZERO)) {\n      string.push('-');\n    }\n    const combination = high >> 26 & COMBINATION_MASK;\n    if (combination >> 3 === 3) {\n      if (combination === COMBINATION_INFINITY) {\n        return string.join('') + 'Infinity';\n      } else if (combination === COMBINATION_NAN) {\n        return 'NaN';\n      } else {\n        biased_exponent = high >> 15 & EXPONENT_MASK;\n        significand_msb = 0x08 + (high >> 14 & 0x01);\n      }\n    } else {\n      significand_msb = high >> 14 & 0x07;\n      biased_exponent = high >> 17 & EXPONENT_MASK;\n    }\n    const exponent = biased_exponent - EXPONENT_BIAS;\n    significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n    significand128.parts[1] = midh;\n    significand128.parts[2] = midl;\n    significand128.parts[3] = low;\n    if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {\n      is_zero = true;\n    } else {\n      for (k = 3; k >= 0; k--) {\n        let least_digits = 0;\n        const result = divideu128(significand128);\n        significand128 = result.quotient;\n        least_digits = result.rem.low;\n        if (!least_digits) continue;\n        for (j = 8; j >= 0; j--) {\n          significand[k * 9 + j] = least_digits % 10;\n          least_digits = Math.floor(least_digits / 10);\n        }\n      }\n    }\n    if (is_zero) {\n      significand_digits = 1;\n      significand[index] = 0;\n    } else {\n      significand_digits = 36;\n      while (!significand[index]) {\n        significand_digits = significand_digits - 1;\n        index = index + 1;\n      }\n    }\n    const scientific_exponent = significand_digits - 1 + exponent;\n    if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n      if (significand_digits > 34) {\n        string.push(`${0}`);\n        if (exponent > 0) string.push(`E+${exponent}`);else if (exponent < 0) string.push(`E${exponent}`);\n        return string.join('');\n      }\n      string.push(`${significand[index++]}`);\n      significand_digits = significand_digits - 1;\n      if (significand_digits) {\n        string.push('.');\n      }\n      for (let i = 0; i < significand_digits; i++) {\n        string.push(`${significand[index++]}`);\n      }\n      string.push('E');\n      if (scientific_exponent > 0) {\n        string.push(`+${scientific_exponent}`);\n      } else {\n        string.push(`${scientific_exponent}`);\n      }\n    } else {\n      if (exponent >= 0) {\n        for (let i = 0; i < significand_digits; i++) {\n          string.push(`${significand[index++]}`);\n        }\n      } else {\n        let radix_position = significand_digits + exponent;\n        if (radix_position > 0) {\n          for (let i = 0; i < radix_position; i++) {\n            string.push(`${significand[index++]}`);\n          }\n        } else {\n          string.push('0');\n        }\n        string.push('.');\n        while (radix_position++ < 0) {\n          string.push('0');\n        }\n        for (let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n          string.push(`${significand[index++]}`);\n        }\n      }\n    }\n    return string.join('');\n  }\n  toJSON() {\n    return {\n      $numberDecimal: this.toString()\n    };\n  }\n  toExtendedJSON() {\n    return {\n      $numberDecimal: this.toString()\n    };\n  }\n  static fromExtendedJSON(doc) {\n    return Decimal128.fromString(doc.$numberDecimal);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new Decimal128(\"${this.toString()}\")`;\n  }\n}\nclass Double extends BSONValue {\n  get _bsontype() {\n    return 'Double';\n  }\n  constructor(value) {\n    super();\n    if (value instanceof Number) {\n      value = value.valueOf();\n    }\n    this.value = +value;\n  }\n  valueOf() {\n    return this.value;\n  }\n  toJSON() {\n    return this.value;\n  }\n  toString(radix) {\n    return this.value.toString(radix);\n  }\n  toExtendedJSON(options) {\n    if (options && (options.legacy || options.relaxed && isFinite(this.value))) {\n      return this.value;\n    }\n    if (Object.is(Math.sign(this.value), -0)) {\n      return {\n        $numberDouble: '-0.0'\n      };\n    }\n    return {\n      $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n    };\n  }\n  static fromExtendedJSON(doc, options) {\n    const doubleValue = parseFloat(doc.$numberDouble);\n    return options && options.relaxed ? doubleValue : new Double(doubleValue);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    const eJSON = this.toExtendedJSON();\n    return `new Double(${eJSON.$numberDouble})`;\n  }\n}\nclass Int32 extends BSONValue {\n  get _bsontype() {\n    return 'Int32';\n  }\n  constructor(value) {\n    super();\n    if (value instanceof Number) {\n      value = value.valueOf();\n    }\n    this.value = +value | 0;\n  }\n  valueOf() {\n    return this.value;\n  }\n  toString(radix) {\n    return this.value.toString(radix);\n  }\n  toJSON() {\n    return this.value;\n  }\n  toExtendedJSON(options) {\n    if (options && (options.relaxed || options.legacy)) return this.value;\n    return {\n      $numberInt: this.value.toString()\n    };\n  }\n  static fromExtendedJSON(doc, options) {\n    return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new Int32(${this.valueOf()})`;\n  }\n}\nclass MaxKey extends BSONValue {\n  get _bsontype() {\n    return 'MaxKey';\n  }\n  toExtendedJSON() {\n    return {\n      $maxKey: 1\n    };\n  }\n  static fromExtendedJSON() {\n    return new MaxKey();\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return 'new MaxKey()';\n  }\n}\nclass MinKey extends BSONValue {\n  get _bsontype() {\n    return 'MinKey';\n  }\n  toExtendedJSON() {\n    return {\n      $minKey: 1\n    };\n  }\n  static fromExtendedJSON() {\n    return new MinKey();\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return 'new MinKey()';\n  }\n}\nconst checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\nlet PROCESS_UNIQUE = null;\nconst kId = Symbol('id');\nclass ObjectId extends BSONValue {\n  get _bsontype() {\n    return 'ObjectId';\n  }\n  constructor(inputId) {\n    super();\n    let workingId;\n    if (typeof inputId === 'object' && inputId && 'id' in inputId) {\n      if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {\n        throw new BSONError('Argument passed in must have an id that is of type string or Buffer');\n      }\n      if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {\n        workingId = ByteUtils.fromHex(inputId.toHexString());\n      } else {\n        workingId = inputId.id;\n      }\n    } else {\n      workingId = inputId;\n    }\n    if (workingId == null || typeof workingId === 'number') {\n      this[kId] = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);\n    } else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {\n      this[kId] = ByteUtils.toLocalBufferType(workingId);\n    } else if (typeof workingId === 'string') {\n      if (workingId.length === 12) {\n        const bytes = ByteUtils.fromUTF8(workingId);\n        if (bytes.byteLength === 12) {\n          this[kId] = bytes;\n        } else {\n          throw new BSONError('Argument passed in must be a string of 12 bytes');\n        }\n      } else if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {\n        this[kId] = ByteUtils.fromHex(workingId);\n      } else {\n        throw new BSONError('Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer');\n      }\n    } else {\n      throw new BSONError('Argument passed in does not match the accepted types');\n    }\n    if (ObjectId.cacheHexString) {\n      this.__id = ByteUtils.toHex(this.id);\n    }\n  }\n  get id() {\n    return this[kId];\n  }\n  set id(value) {\n    this[kId] = value;\n    if (ObjectId.cacheHexString) {\n      this.__id = ByteUtils.toHex(value);\n    }\n  }\n  toHexString() {\n    if (ObjectId.cacheHexString && this.__id) {\n      return this.__id;\n    }\n    const hexString = ByteUtils.toHex(this.id);\n    if (ObjectId.cacheHexString && !this.__id) {\n      this.__id = hexString;\n    }\n    return hexString;\n  }\n  static getInc() {\n    return ObjectId.index = (ObjectId.index + 1) % 0xffffff;\n  }\n  static generate(time) {\n    if ('number' !== typeof time) {\n      time = Math.floor(Date.now() / 1000);\n    }\n    const inc = ObjectId.getInc();\n    const buffer = ByteUtils.allocate(12);\n    BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n    if (PROCESS_UNIQUE === null) {\n      PROCESS_UNIQUE = ByteUtils.randomBytes(5);\n    }\n    buffer[4] = PROCESS_UNIQUE[0];\n    buffer[5] = PROCESS_UNIQUE[1];\n    buffer[6] = PROCESS_UNIQUE[2];\n    buffer[7] = PROCESS_UNIQUE[3];\n    buffer[8] = PROCESS_UNIQUE[4];\n    buffer[11] = inc & 0xff;\n    buffer[10] = inc >> 8 & 0xff;\n    buffer[9] = inc >> 16 & 0xff;\n    return buffer;\n  }\n  toString(encoding) {\n    if (encoding === 'base64') return ByteUtils.toBase64(this.id);\n    if (encoding === 'hex') return this.toHexString();\n    return this.toHexString();\n  }\n  toJSON() {\n    return this.toHexString();\n  }\n  equals(otherId) {\n    if (otherId === undefined || otherId === null) {\n      return false;\n    }\n    if (otherId instanceof ObjectId) {\n      return this[kId][11] === otherId[kId][11] && ByteUtils.equals(this[kId], otherId[kId]);\n    }\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12 && isUint8Array(this.id)) {\n      return ByteUtils.equals(this.id, ByteUtils.fromISO88591(otherId));\n    }\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    }\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) {\n      return ByteUtils.equals(ByteUtils.fromUTF8(otherId), this.id);\n    }\n    if (typeof otherId === 'object' && 'toHexString' in otherId && typeof otherId.toHexString === 'function') {\n      const otherIdString = otherId.toHexString();\n      const thisIdString = this.toHexString().toLowerCase();\n      return typeof otherIdString === 'string' && otherIdString.toLowerCase() === thisIdString;\n    }\n    return false;\n  }\n  getTimestamp() {\n    const timestamp = new Date();\n    const time = BSONDataView.fromUint8Array(this.id).getUint32(0, false);\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  }\n  static createPk() {\n    return new ObjectId();\n  }\n  static createFromTime(time) {\n    const buffer = ByteUtils.fromNumberArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n    return new ObjectId(buffer);\n  }\n  static createFromHexString(hexString) {\n    if (hexString?.length !== 24) {\n      throw new BSONError('hex string must be 24 characters');\n    }\n    return new ObjectId(ByteUtils.fromHex(hexString));\n  }\n  static createFromBase64(base64) {\n    if (base64?.length !== 16) {\n      throw new BSONError('base64 string must be 16 characters');\n    }\n    return new ObjectId(ByteUtils.fromBase64(base64));\n  }\n  static isValid(id) {\n    if (id == null) return false;\n    try {\n      new ObjectId(id);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  toExtendedJSON() {\n    if (this.toHexString) return {\n      $oid: this.toHexString()\n    };\n    return {\n      $oid: this.toString('hex')\n    };\n  }\n  static fromExtendedJSON(doc) {\n    return new ObjectId(doc.$oid);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new ObjectId(\"${this.toHexString()}\")`;\n  }\n}\nObjectId.index = Math.floor(Math.random() * 0xffffff);\nfunction internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined) {\n  let totalLength = 4 + 1;\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; i++) {\n      totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);\n    }\n  } else {\n    if (typeof object?.toBSON === 'function') {\n      object = object.toBSON();\n    }\n    for (const key of Object.keys(object)) {\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n    }\n  }\n  return totalLength;\n}\nfunction calculateElement(name, value) {\n  let serializeFunctions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let isArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let ignoreUndefined = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (typeof value?.toBSON === 'function') {\n    value = value.toBSON();\n  }\n  switch (typeof value) {\n    case 'string':\n      return 1 + ByteUtils.utf8ByteLength(name) + 1 + 4 + ByteUtils.utf8ByteLength(value) + 1;\n    case 'number':\n      if (Math.floor(value) === value && value >= JS_INT_MIN && value <= JS_INT_MAX) {\n        if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (4 + 1);\n        } else {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n        }\n      } else {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n      }\n    case 'undefined':\n      if (isArray || !ignoreUndefined) return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n      return 0;\n    case 'boolean':\n      return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 1);\n    case 'object':\n      if (value != null && typeof value._bsontype === 'string' && value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n      } else if (value == null || value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n      } else if (value._bsontype === 'ObjectId') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (12 + 1);\n      } else if (value instanceof Date || isDate(value)) {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n      } else if (ArrayBuffer.isView(value) || value instanceof ArrayBuffer || isAnyArrayBuffer(value)) {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 4 + 1) + value.byteLength;\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Double' || value._bsontype === 'Timestamp') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n      } else if (value._bsontype === 'Decimal128') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (16 + 1);\n      } else if (value._bsontype === 'Code') {\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + 4 + 4 + ByteUtils.utf8ByteLength(value.code.toString()) + 1 + internalCalculateObjectSize(value.scope, serializeFunctions, ignoreUndefined);\n        } else {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + 4 + ByteUtils.utf8ByteLength(value.code.toString()) + 1;\n        }\n      } else if (value._bsontype === 'Binary') {\n        const binary = value;\n        if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1 + 4);\n        } else {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1);\n        }\n      } else if (value._bsontype === 'Symbol') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + ByteUtils.utf8ByteLength(value.value) + 4 + 1 + 1;\n      } else if (value._bsontype === 'DBRef') {\n        const ordered_values = Object.assign({\n          $ref: value.collection,\n          $id: value.oid\n        }, value.fields);\n        if (value.db != null) {\n          ordered_values['$db'] = value.db;\n        }\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + internalCalculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + ByteUtils.utf8ByteLength(value.source) + 1 + (value.global ? 1 : 0) + (value.ignoreCase ? 1 : 0) + (value.multiline ? 1 : 0) + 1;\n      } else if (value._bsontype === 'BSONRegExp') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + ByteUtils.utf8ByteLength(value.pattern) + 1 + ByteUtils.utf8ByteLength(value.options) + 1;\n      } else {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + internalCalculateObjectSize(value, serializeFunctions, ignoreUndefined) + 1;\n      }\n    case 'function':\n      if (serializeFunctions) {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1 + 4 + ByteUtils.utf8ByteLength(value.toString()) + 1;\n      }\n  }\n  return 0;\n}\nfunction alphabetize(str) {\n  return str.split('').sort().join('');\n}\nclass BSONRegExp extends BSONValue {\n  get _bsontype() {\n    return 'BSONRegExp';\n  }\n  constructor(pattern, options) {\n    super();\n    this.pattern = pattern;\n    this.options = alphabetize(options ?? '');\n    if (this.pattern.indexOf('\\x00') !== -1) {\n      throw new BSONError(`BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`);\n    }\n    if (this.options.indexOf('\\x00') !== -1) {\n      throw new BSONError(`BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`);\n    }\n    for (let i = 0; i < this.options.length; i++) {\n      if (!(this.options[i] === 'i' || this.options[i] === 'm' || this.options[i] === 'x' || this.options[i] === 'l' || this.options[i] === 's' || this.options[i] === 'u')) {\n        throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);\n      }\n    }\n  }\n  static parseOptions(options) {\n    return options ? options.split('').sort().join('') : '';\n  }\n  toExtendedJSON(options) {\n    options = options || {};\n    if (options.legacy) {\n      return {\n        $regex: this.pattern,\n        $options: this.options\n      };\n    }\n    return {\n      $regularExpression: {\n        pattern: this.pattern,\n        options: this.options\n      }\n    };\n  }\n  static fromExtendedJSON(doc) {\n    if ('$regex' in doc) {\n      if (typeof doc.$regex !== 'string') {\n        if (doc.$regex._bsontype === 'BSONRegExp') {\n          return doc;\n        }\n      } else {\n        return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n      }\n    }\n    if ('$regularExpression' in doc) {\n      return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));\n    }\n    throw new BSONError(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(doc)}`);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new BSONRegExp(${JSON.stringify(this.pattern)}, ${JSON.stringify(this.options)})`;\n  }\n}\nclass BSONSymbol extends BSONValue {\n  get _bsontype() {\n    return 'BSONSymbol';\n  }\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  valueOf() {\n    return this.value;\n  }\n  toString() {\n    return this.value;\n  }\n  inspect() {\n    return `new BSONSymbol(\"${this.value}\")`;\n  }\n  toJSON() {\n    return this.value;\n  }\n  toExtendedJSON() {\n    return {\n      $symbol: this.value\n    };\n  }\n  static fromExtendedJSON(doc) {\n    return new BSONSymbol(doc.$symbol);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n}\nconst LongWithoutOverridesClass = Long;\nclass Timestamp extends LongWithoutOverridesClass {\n  get _bsontype() {\n    return 'Timestamp';\n  }\n  constructor(low) {\n    if (low == null) {\n      super(0, 0, true);\n    } else if (typeof low === 'bigint') {\n      super(low, true);\n    } else if (Long.isLong(low)) {\n      super(low.low, low.high, true);\n    } else if (typeof low === 'object' && 't' in low && 'i' in low) {\n      if (typeof low.t !== 'number' && (typeof low.t !== 'object' || low.t._bsontype !== 'Int32')) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide t as a number');\n      }\n      if (typeof low.i !== 'number' && (typeof low.i !== 'object' || low.i._bsontype !== 'Int32')) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide i as a number');\n      }\n      const t = Number(low.t);\n      const i = Number(low.i);\n      if (t < 0 || Number.isNaN(t)) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide a positive t');\n      }\n      if (i < 0 || Number.isNaN(i)) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide a positive i');\n      }\n      if (t > 4294967295) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide t equal or less than uint32 max');\n      }\n      if (i > 4294967295) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide i equal or less than uint32 max');\n      }\n      super(i, t, true);\n    } else {\n      throw new BSONError('A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }');\n    }\n  }\n  toJSON() {\n    return {\n      $timestamp: this.toString()\n    };\n  }\n  static fromInt(value) {\n    return new Timestamp(Long.fromInt(value, true));\n  }\n  static fromNumber(value) {\n    return new Timestamp(Long.fromNumber(value, true));\n  }\n  static fromBits(lowBits, highBits) {\n    return new Timestamp({\n      i: lowBits,\n      t: highBits\n    });\n  }\n  static fromString(str, optRadix) {\n    return new Timestamp(Long.fromString(str, true, optRadix));\n  }\n  toExtendedJSON() {\n    return {\n      $timestamp: {\n        t: this.high >>> 0,\n        i: this.low >>> 0\n      }\n    };\n  }\n  static fromExtendedJSON(doc) {\n    const i = Long.isLong(doc.$timestamp.i) ? doc.$timestamp.i.getLowBitsUnsigned() : doc.$timestamp.i;\n    const t = Long.isLong(doc.$timestamp.t) ? doc.$timestamp.t.getLowBitsUnsigned() : doc.$timestamp.t;\n    return new Timestamp({\n      t,\n      i\n    });\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new Timestamp({ t: ${this.getHighBits()}, i: ${this.getLowBits()} })`;\n  }\n}\nTimestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\nconst FIRST_BIT = 0x80;\nconst FIRST_TWO_BITS = 0xc0;\nconst FIRST_THREE_BITS = 0xe0;\nconst FIRST_FOUR_BITS = 0xf0;\nconst FIRST_FIVE_BITS = 0xf8;\nconst TWO_BIT_CHAR = 0xc0;\nconst THREE_BIT_CHAR = 0xe0;\nconst FOUR_BIT_CHAR = 0xf0;\nconst CONTINUING_CHAR = 0x80;\nfunction validateUtf8(bytes, start, end) {\n  let continuation = 0;\n  for (let i = start; i < end; i += 1) {\n    const byte = bytes[i];\n    if (continuation) {\n      if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {\n        return false;\n      }\n      continuation -= 1;\n    } else if (byte & FIRST_BIT) {\n      if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {\n        continuation = 1;\n      } else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {\n        continuation = 2;\n      } else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {\n        continuation = 3;\n      } else {\n        return false;\n      }\n    }\n  }\n  return !continuation;\n}\nconst JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);\nfunction internalDeserialize(buffer, options, isArray) {\n  options = options == null ? {} : options;\n  const index = options && options.index ? options.index : 0;\n  const size = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n  if (size < 5) {\n    throw new BSONError(`bson size must be >= 5, is ${size}`);\n  }\n  if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n    throw new BSONError(`buffer length ${buffer.length} must be >= bson size ${size}`);\n  }\n  if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n    throw new BSONError(`buffer length ${buffer.length} must === bson size ${size}`);\n  }\n  if (size + index > buffer.byteLength) {\n    throw new BSONError(`(bson size ${size} + options.index ${index} must be <= buffer length ${buffer.byteLength})`);\n  }\n  if (buffer[index + size - 1] !== 0) {\n    throw new BSONError(\"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\");\n  }\n  return deserializeObject(buffer, index, options, isArray);\n}\nconst allowedDBRefKeys = /^\\$ref$|^\\$id$|^\\$db$/;\nfunction deserializeObject(buffer, index, options) {\n  let isArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n  const raw = options['raw'] == null ? false : options['raw'];\n  const bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n  const promoteBuffers = options.promoteBuffers ?? false;\n  const promoteLongs = options.promoteLongs ?? true;\n  const promoteValues = options.promoteValues ?? true;\n  const useBigInt64 = options.useBigInt64 ?? false;\n  if (useBigInt64 && !promoteValues) {\n    throw new BSONError('Must either request bigint or Long for int64 deserialization');\n  }\n  if (useBigInt64 && !promoteLongs) {\n    throw new BSONError('Must either request bigint or Long for int64 deserialization');\n  }\n  const validation = options.validation == null ? {\n    utf8: true\n  } : options.validation;\n  let globalUTFValidation = true;\n  let validationSetting;\n  const utf8KeysSet = new Set();\n  const utf8ValidatedKeys = validation.utf8;\n  if (typeof utf8ValidatedKeys === 'boolean') {\n    validationSetting = utf8ValidatedKeys;\n  } else {\n    globalUTFValidation = false;\n    const utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function (key) {\n      return utf8ValidatedKeys[key];\n    });\n    if (utf8ValidationValues.length === 0) {\n      throw new BSONError('UTF-8 validation setting cannot be empty');\n    }\n    if (typeof utf8ValidationValues[0] !== 'boolean') {\n      throw new BSONError('Invalid UTF-8 validation option, must specify boolean values');\n    }\n    validationSetting = utf8ValidationValues[0];\n    if (!utf8ValidationValues.every(item => item === validationSetting)) {\n      throw new BSONError('Invalid UTF-8 validation option - keys must be all true or all false');\n    }\n  }\n  if (!globalUTFValidation) {\n    for (const key of Object.keys(utf8ValidatedKeys)) {\n      utf8KeysSet.add(key);\n    }\n  }\n  const startIndex = index;\n  if (buffer.length < 5) throw new BSONError('corrupt bson message < 5 bytes long');\n  const size = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n  if (size < 5 || size > buffer.length) throw new BSONError('corrupt bson message');\n  const object = isArray ? [] : {};\n  let arrayIndex = 0;\n  const done = false;\n  let isPossibleDBRef = isArray ? false : null;\n  const dataview = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  while (!done) {\n    const elementType = buffer[index++];\n    if (elementType === 0) break;\n    let i = index;\n    while (buffer[i] !== 0x00 && i < buffer.length) {\n      i++;\n    }\n    if (i >= buffer.byteLength) throw new BSONError('Bad BSON Document: illegal CString');\n    const name = isArray ? arrayIndex++ : ByteUtils.toUTF8(buffer, index, i);\n    let shouldValidateKey = true;\n    if (globalUTFValidation || utf8KeysSet.has(name)) {\n      shouldValidateKey = validationSetting;\n    } else {\n      shouldValidateKey = !validationSetting;\n    }\n    if (isPossibleDBRef !== false && name[0] === '$') {\n      isPossibleDBRef = allowedDBRefKeys.test(name);\n    }\n    let value;\n    index = i + 1;\n    if (elementType === BSON_DATA_STRING) {\n      const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n        throw new BSONError('bad string length in bson');\n      }\n      value = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n      index = index + stringSize;\n    } else if (elementType === BSON_DATA_OID) {\n      const oid = ByteUtils.allocate(12);\n      oid.set(buffer.subarray(index, index + 12));\n      value = new ObjectId(oid);\n      index = index + 12;\n    } else if (elementType === BSON_DATA_INT && promoteValues === false) {\n      value = new Int32(buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24);\n    } else if (elementType === BSON_DATA_INT) {\n      value = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n    } else if (elementType === BSON_DATA_NUMBER && promoteValues === false) {\n      value = new Double(dataview.getFloat64(index, true));\n      index = index + 8;\n    } else if (elementType === BSON_DATA_NUMBER) {\n      value = dataview.getFloat64(index, true);\n      index = index + 8;\n    } else if (elementType === BSON_DATA_DATE) {\n      const lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      const highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      value = new Date(new Long(lowBits, highBits).toNumber());\n    } else if (elementType === BSON_DATA_BOOLEAN) {\n      if (buffer[index] !== 0 && buffer[index] !== 1) throw new BSONError('illegal boolean type value');\n      value = buffer[index++] === 1;\n    } else if (elementType === BSON_DATA_OBJECT) {\n      const _index = index;\n      const objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n      if (objectSize <= 0 || objectSize > buffer.length - index) throw new BSONError('bad embedded document length in bson');\n      if (raw) {\n        value = buffer.slice(index, index + objectSize);\n      } else {\n        let objectOptions = options;\n        if (!globalUTFValidation) {\n          objectOptions = {\n            ...options,\n            validation: {\n              utf8: shouldValidateKey\n            }\n          };\n        }\n        value = deserializeObject(buffer, _index, objectOptions, false);\n      }\n      index = index + objectSize;\n    } else if (elementType === BSON_DATA_ARRAY) {\n      const _index = index;\n      const objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n      let arrayOptions = options;\n      const stopIndex = index + objectSize;\n      if (fieldsAsRaw && fieldsAsRaw[name]) {\n        arrayOptions = {\n          ...options,\n          raw: true\n        };\n      }\n      if (!globalUTFValidation) {\n        arrayOptions = {\n          ...arrayOptions,\n          validation: {\n            utf8: shouldValidateKey\n          }\n        };\n      }\n      value = deserializeObject(buffer, _index, arrayOptions, true);\n      index = index + objectSize;\n      if (buffer[index - 1] !== 0) throw new BSONError('invalid array terminator byte');\n      if (index !== stopIndex) throw new BSONError('corrupted array bson');\n    } else if (elementType === BSON_DATA_UNDEFINED) {\n      value = undefined;\n    } else if (elementType === BSON_DATA_NULL) {\n      value = null;\n    } else if (elementType === BSON_DATA_LONG) {\n      const dataview = BSONDataView.fromUint8Array(buffer.subarray(index, index + 8));\n      const lowBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      const highBits = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      const long = new Long(lowBits, highBits);\n      if (useBigInt64) {\n        value = dataview.getBigInt64(0, true);\n      } else if (promoteLongs && promoteValues === true) {\n        value = long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG) ? long.toNumber() : long;\n      } else {\n        value = long;\n      }\n    } else if (elementType === BSON_DATA_DECIMAL128) {\n      const bytes = ByteUtils.allocate(16);\n      bytes.set(buffer.subarray(index, index + 16), 0);\n      index = index + 16;\n      value = new Decimal128(bytes);\n    } else if (elementType === BSON_DATA_BINARY) {\n      let binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      const totalBinarySize = binarySize;\n      const subType = buffer[index++];\n      if (binarySize < 0) throw new BSONError('Negative binary type element size found');\n      if (binarySize > buffer.byteLength) throw new BSONError('Binary type size larger than document size');\n      if (buffer['slice'] != null) {\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n          if (binarySize < 0) throw new BSONError('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4) throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n          if (binarySize < totalBinarySize - 4) throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n        }\n        if (promoteBuffers && promoteValues) {\n          value = ByteUtils.toLocalBufferType(buffer.slice(index, index + binarySize));\n        } else {\n          value = new Binary(buffer.slice(index, index + binarySize), subType);\n          if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n            value = value.toUUID();\n          }\n        }\n      } else {\n        const _buffer = ByteUtils.allocate(binarySize);\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n          if (binarySize < 0) throw new BSONError('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4) throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n          if (binarySize < totalBinarySize - 4) throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n        }\n        for (i = 0; i < binarySize; i++) {\n          _buffer[i] = buffer[index + i];\n        }\n        if (promoteBuffers && promoteValues) {\n          value = _buffer;\n        } else {\n          value = new Binary(buffer.slice(index, index + binarySize), subType);\n          if (subType === BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n            value = value.toUUID();\n          }\n        }\n      }\n      index = index + binarySize;\n    } else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {\n      i = index;\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      const source = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n      i = index;\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n      const optionsArray = new Array(regExpOptions.length);\n      for (i = 0; i < regExpOptions.length; i++) {\n        switch (regExpOptions[i]) {\n          case 'm':\n            optionsArray[i] = 'm';\n            break;\n          case 's':\n            optionsArray[i] = 'g';\n            break;\n          case 'i':\n            optionsArray[i] = 'i';\n            break;\n        }\n      }\n      value = new RegExp(source, optionsArray.join(''));\n    } else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {\n      i = index;\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      const source = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n      i = index;\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n      value = new BSONRegExp(source, regExpOptions);\n    } else if (elementType === BSON_DATA_SYMBOL) {\n      const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n        throw new BSONError('bad string length in bson');\n      }\n      const symbol = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n      value = promoteValues ? symbol : new BSONSymbol(symbol);\n      index = index + stringSize;\n    } else if (elementType === BSON_DATA_TIMESTAMP) {\n      const i = buffer[index++] + buffer[index++] * (1 << 8) + buffer[index++] * (1 << 16) + buffer[index++] * (1 << 24);\n      const t = buffer[index++] + buffer[index++] * (1 << 8) + buffer[index++] * (1 << 16) + buffer[index++] * (1 << 24);\n      value = new Timestamp({\n        i,\n        t\n      });\n    } else if (elementType === BSON_DATA_MIN_KEY) {\n      value = new MinKey();\n    } else if (elementType === BSON_DATA_MAX_KEY) {\n      value = new MaxKey();\n    } else if (elementType === BSON_DATA_CODE) {\n      const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n        throw new BSONError('bad string length in bson');\n      }\n      const functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n      value = new Code(functionString);\n      index = index + stringSize;\n    } else if (elementType === BSON_DATA_CODE_W_SCOPE) {\n      const totalSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      if (totalSize < 4 + 4 + 4 + 1) {\n        throw new BSONError('code_w_scope total size shorter minimum expected length');\n      }\n      const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) {\n        throw new BSONError('bad string length in bson');\n      }\n      const functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n      index = index + stringSize;\n      const _index = index;\n      const objectSize = buffer[index] | buffer[index + 1] << 8 | buffer[index + 2] << 16 | buffer[index + 3] << 24;\n      const scopeObject = deserializeObject(buffer, _index, options, false);\n      index = index + objectSize;\n      if (totalSize < 4 + 4 + objectSize + stringSize) {\n        throw new BSONError('code_w_scope total size is too short, truncating scope');\n      }\n      if (totalSize > 4 + 4 + objectSize + stringSize) {\n        throw new BSONError('code_w_scope total size is too long, clips outer document');\n      }\n      value = new Code(functionString, scopeObject);\n    } else if (elementType === BSON_DATA_DBPOINTER) {\n      const stringSize = buffer[index++] | buffer[index++] << 8 | buffer[index++] << 16 | buffer[index++] << 24;\n      if (stringSize <= 0 || stringSize > buffer.length - index || buffer[index + stringSize - 1] !== 0) throw new BSONError('bad string length in bson');\n      if (validation != null && validation.utf8) {\n        if (!validateUtf8(buffer, index, index + stringSize - 1)) {\n          throw new BSONError('Invalid UTF-8 string in BSON document');\n        }\n      }\n      const namespace = ByteUtils.toUTF8(buffer, index, index + stringSize - 1);\n      index = index + stringSize;\n      const oidBuffer = ByteUtils.allocate(12);\n      oidBuffer.set(buffer.subarray(index, index + 12), 0);\n      const oid = new ObjectId(oidBuffer);\n      index = index + 12;\n      value = new DBRef(namespace, oid);\n    } else {\n      throw new BSONError(`Detected unknown BSON type ${elementType.toString(16)} for fieldname \"${name}\"`);\n    }\n    if (name === '__proto__') {\n      Object.defineProperty(object, name, {\n        value,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      });\n    } else {\n      object[name] = value;\n    }\n  }\n  if (size !== index - startIndex) {\n    if (isArray) throw new BSONError('corrupt array bson');\n    throw new BSONError('corrupt object bson');\n  }\n  if (!isPossibleDBRef) return object;\n  if (isDBRefLike(object)) {\n    const copy = Object.assign({}, object);\n    delete copy.$ref;\n    delete copy.$id;\n    delete copy.$db;\n    return new DBRef(object.$ref, object.$id, object.$db, copy);\n  }\n  return object;\n}\nfunction getValidatedString(buffer, start, end, shouldValidateUtf8) {\n  const value = ByteUtils.toUTF8(buffer, start, end);\n  if (shouldValidateUtf8) {\n    for (let i = 0; i < value.length; i++) {\n      if (value.charCodeAt(i) === 0xfffd) {\n        if (!validateUtf8(buffer, start, end)) {\n          throw new BSONError('Invalid UTF-8 string in BSON document');\n        }\n        break;\n      }\n    }\n  }\n  return value;\n}\nconst regexp = /\\x00/;\nconst ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);\nfunction serializeString(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_STRING;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  const size = ByteUtils.encodeUTF8Into(buffer, value, index + 4);\n  buffer[index + 3] = size + 1 >> 24 & 0xff;\n  buffer[index + 2] = size + 1 >> 16 & 0xff;\n  buffer[index + 1] = size + 1 >> 8 & 0xff;\n  buffer[index] = size + 1 & 0xff;\n  index = index + 4 + size;\n  buffer[index++] = 0;\n  return index;\n}\nconst NUMBER_SPACE = new DataView(new ArrayBuffer(8), 0, 8);\nconst FOUR_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 4);\nconst EIGHT_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 8);\nfunction serializeNumber(buffer, key, value, index) {\n  const isNegativeZero = Object.is(value, -0);\n  const type = !isNegativeZero && Number.isSafeInteger(value) && value <= BSON_INT32_MAX && value >= BSON_INT32_MIN ? BSON_DATA_INT : BSON_DATA_NUMBER;\n  if (type === BSON_DATA_INT) {\n    NUMBER_SPACE.setInt32(0, value, true);\n  } else {\n    NUMBER_SPACE.setFloat64(0, value, true);\n  }\n  const bytes = type === BSON_DATA_INT ? FOUR_BYTE_VIEW_ON_NUMBER : EIGHT_BYTE_VIEW_ON_NUMBER;\n  buffer[index++] = type;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0x00;\n  buffer.set(bytes, index);\n  index += bytes.byteLength;\n  return index;\n}\nfunction serializeBigInt(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_LONG;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index += numberOfWrittenBytes;\n  buffer[index++] = 0;\n  NUMBER_SPACE.setBigInt64(0, value, true);\n  buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n  index += EIGHT_BYTE_VIEW_ON_NUMBER.byteLength;\n  return index;\n}\nfunction serializeNull(buffer, key, _, index) {\n  buffer[index++] = BSON_DATA_NULL;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\nfunction serializeBoolean(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_BOOLEAN;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  buffer[index++] = value ? 1 : 0;\n  return index;\n}\nfunction serializeDate(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_DATE;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const dateInMilis = Long.fromNumber(value.getTime());\n  const lowBits = dateInMilis.getLowBits();\n  const highBits = dateInMilis.getHighBits();\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = lowBits >> 8 & 0xff;\n  buffer[index++] = lowBits >> 16 & 0xff;\n  buffer[index++] = lowBits >> 24 & 0xff;\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = highBits >> 8 & 0xff;\n  buffer[index++] = highBits >> 16 & 0xff;\n  buffer[index++] = highBits >> 24 & 0xff;\n  return index;\n}\nfunction serializeRegExp(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_REGEXP;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw new BSONError('value ' + value.source + ' must not contain null bytes');\n  }\n  index = index + ByteUtils.encodeUTF8Into(buffer, value.source, index);\n  buffer[index++] = 0x00;\n  if (value.ignoreCase) buffer[index++] = 0x69;\n  if (value.global) buffer[index++] = 0x73;\n  if (value.multiline) buffer[index++] = 0x6d;\n  buffer[index++] = 0x00;\n  return index;\n}\nfunction serializeBSONRegExp(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_REGEXP;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.pattern.match(regexp) != null) {\n    throw new BSONError('pattern ' + value.pattern + ' must not contain null bytes');\n  }\n  index = index + ByteUtils.encodeUTF8Into(buffer, value.pattern, index);\n  buffer[index++] = 0x00;\n  const sortedOptions = value.options.split('').sort().join('');\n  index = index + ByteUtils.encodeUTF8Into(buffer, sortedOptions, index);\n  buffer[index++] = 0x00;\n  return index;\n}\nfunction serializeMinMax(buffer, key, value, index) {\n  if (value === null) {\n    buffer[index++] = BSON_DATA_NULL;\n  } else if (value._bsontype === 'MinKey') {\n    buffer[index++] = BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = BSON_DATA_MAX_KEY;\n  }\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\nfunction serializeObjectId(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_OID;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (isUint8Array(value.id)) {\n    buffer.set(value.id.subarray(0, 12), index);\n  } else {\n    throw new BSONError('object [' + JSON.stringify(value) + '] is not a valid ObjectId');\n  }\n  return index + 12;\n}\nfunction serializeBuffer(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_BINARY;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const size = value.length;\n  buffer[index++] = size & 0xff;\n  buffer[index++] = size >> 8 & 0xff;\n  buffer[index++] = size >> 16 & 0xff;\n  buffer[index++] = size >> 24 & 0xff;\n  buffer[index++] = BSON_BINARY_SUBTYPE_DEFAULT;\n  buffer.set(value, index);\n  index = index + size;\n  return index;\n}\nfunction serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path) {\n  if (path.has(value)) {\n    throw new BSONError('Cannot convert circular structure to BSON');\n  }\n  path.add(value);\n  buffer[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n  path.delete(value);\n  return endIndex;\n}\nfunction serializeDecimal128(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_DECIMAL128;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  buffer.set(value.bytes.subarray(0, 16), index);\n  return index + 16;\n}\nfunction serializeLong(buffer, key, value, index) {\n  buffer[index++] = value._bsontype === 'Long' ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const lowBits = value.getLowBits();\n  const highBits = value.getHighBits();\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = lowBits >> 8 & 0xff;\n  buffer[index++] = lowBits >> 16 & 0xff;\n  buffer[index++] = lowBits >> 24 & 0xff;\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = highBits >> 8 & 0xff;\n  buffer[index++] = highBits >> 16 & 0xff;\n  buffer[index++] = highBits >> 24 & 0xff;\n  return index;\n}\nfunction serializeInt32(buffer, key, value, index) {\n  value = value.valueOf();\n  buffer[index++] = BSON_DATA_INT;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  buffer[index++] = value & 0xff;\n  buffer[index++] = value >> 8 & 0xff;\n  buffer[index++] = value >> 16 & 0xff;\n  buffer[index++] = value >> 24 & 0xff;\n  return index;\n}\nfunction serializeDouble(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_NUMBER;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  NUMBER_SPACE.setFloat64(0, value.value, true);\n  buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n  index = index + 8;\n  return index;\n}\nfunction serializeFunction(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_CODE;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const functionString = value.toString();\n  const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = size >> 8 & 0xff;\n  buffer[index + 2] = size >> 16 & 0xff;\n  buffer[index + 3] = size >> 24 & 0xff;\n  index = index + 4 + size - 1;\n  buffer[index++] = 0;\n  return index;\n}\nfunction serializeCode(buffer, key, value, index) {\n  let checkKeys = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let depth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  let serializeFunctions = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let ignoreUndefined = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;\n  let path = arguments.length > 8 ? arguments[8] : undefined;\n  if (value.scope && typeof value.scope === 'object') {\n    buffer[index++] = BSON_DATA_CODE_W_SCOPE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    let startIndex = index;\n    const functionString = value.code;\n    index = index + 4;\n    const codeSize = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = codeSize >> 8 & 0xff;\n    buffer[index + 2] = codeSize >> 16 & 0xff;\n    buffer[index + 3] = codeSize >> 24 & 0xff;\n    buffer[index + 4 + codeSize - 1] = 0;\n    index = index + codeSize + 4;\n    const endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);\n    index = endIndex - 1;\n    const totalSize = endIndex - startIndex;\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = totalSize >> 8 & 0xff;\n    buffer[startIndex++] = totalSize >> 16 & 0xff;\n    buffer[startIndex++] = totalSize >> 24 & 0xff;\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = BSON_DATA_CODE;\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    const functionString = value.code.toString();\n    const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = size >> 8 & 0xff;\n    buffer[index + 2] = size >> 16 & 0xff;\n    buffer[index + 3] = size >> 24 & 0xff;\n    index = index + 4 + size - 1;\n    buffer[index++] = 0;\n  }\n  return index;\n}\nfunction serializeBinary(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_BINARY;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const data = value.buffer;\n  let size = value.position;\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  buffer[index++] = size & 0xff;\n  buffer[index++] = size >> 8 & 0xff;\n  buffer[index++] = size >> 16 & 0xff;\n  buffer[index++] = size >> 24 & 0xff;\n  buffer[index++] = value.sub_type;\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = size >> 8 & 0xff;\n    buffer[index++] = size >> 16 & 0xff;\n    buffer[index++] = size >> 24 & 0xff;\n  }\n  buffer.set(data, index);\n  index = index + value.position;\n  return index;\n}\nfunction serializeSymbol(buffer, key, value, index) {\n  buffer[index++] = BSON_DATA_SYMBOL;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const size = ByteUtils.encodeUTF8Into(buffer, value.value, index + 4) + 1;\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = size >> 8 & 0xff;\n  buffer[index + 2] = size >> 16 & 0xff;\n  buffer[index + 3] = size >> 24 & 0xff;\n  index = index + 4 + size - 1;\n  buffer[index++] = 0x00;\n  return index;\n}\nfunction serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path) {\n  buffer[index++] = BSON_DATA_OBJECT;\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  let startIndex = index;\n  let output = {\n    $ref: value.collection || value.namespace,\n    $id: value.oid\n  };\n  if (value.db != null) {\n    output.$db = value.db;\n  }\n  output = Object.assign(output, value.fields);\n  const endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions, true, path);\n  const size = endIndex - startIndex;\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = size >> 8 & 0xff;\n  buffer[startIndex++] = size >> 16 & 0xff;\n  buffer[startIndex++] = size >> 24 & 0xff;\n  return endIndex;\n}\nfunction serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {\n  if (path == null) {\n    if (object == null) {\n      buffer[0] = 0x05;\n      buffer[1] = 0x00;\n      buffer[2] = 0x00;\n      buffer[3] = 0x00;\n      buffer[4] = 0x00;\n      return 5;\n    }\n    if (Array.isArray(object)) {\n      throw new BSONError('serialize does not support an array as the root input');\n    }\n    if (typeof object !== 'object') {\n      throw new BSONError('serialize does not support non-object as the root input');\n    } else if ('_bsontype' in object && typeof object._bsontype === 'string') {\n      throw new BSONError(`BSON types cannot be serialized as a document`);\n    } else if (isDate(object) || isRegExp(object) || isUint8Array(object) || isAnyArrayBuffer(object)) {\n      throw new BSONError(`date, regexp, typedarray, and arraybuffer cannot be BSON documents`);\n    }\n    path = new Set();\n  }\n  path.add(object);\n  let index = startingIndex + 4;\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; i++) {\n      const key = `${i}`;\n      let value = object[i];\n      if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n      }\n      if (typeof value === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (typeof value === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (typeof value === 'bigint') {\n        index = serializeBigInt(buffer, key, value, index);\n      } else if (typeof value === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (isUint8Array(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (typeof value === 'object' && value._bsontype == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n      } else if (typeof value === 'object' && value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n      } else if (value._bsontype === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (value._bsontype === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value._bsontype === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index);\n      } else if (value._bsontype === 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n      } else if (value._bsontype === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value._bsontype === 'BSONSymbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value._bsontype === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n      } else if (value._bsontype === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value._bsontype === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value._bsontype !== 'undefined') {\n        throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n      }\n    }\n  } else if (object instanceof Map || isMap(object)) {\n    const iterator = object.entries();\n    let done = false;\n    while (!done) {\n      const entry = iterator.next();\n      done = !!entry.done;\n      if (done) continue;\n      const key = entry.value[0];\n      let value = entry.value[1];\n      if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n      }\n      const type = typeof value;\n      if (typeof key === 'string' && !ignoreKeys.has(key)) {\n        if (key.match(regexp) != null) {\n          throw new BSONError('key ' + key + ' must not contain null bytes');\n        }\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw new BSONError('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw new BSONError('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'bigint') {\n        index = serializeBigInt(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === null || value === undefined && ignoreUndefined === false) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (isUint8Array(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n      } else if (typeof value === 'object' && value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n      } else if (value._bsontype === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value._bsontype === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value._bsontype === 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index);\n      } else if (value._bsontype === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value._bsontype === 'BSONSymbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value._bsontype === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n      } else if (value._bsontype === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value._bsontype === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value._bsontype !== 'undefined') {\n        throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n      }\n    }\n  } else {\n    if (typeof object?.toBSON === 'function') {\n      object = object.toBSON();\n      if (object != null && typeof object !== 'object') {\n        throw new BSONError('toBSON function did not return an object');\n      }\n    }\n    for (const key of Object.keys(object)) {\n      let value = object[key];\n      if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n      }\n      const type = typeof value;\n      if (typeof key === 'string' && !ignoreKeys.has(key)) {\n        if (key.match(regexp) != null) {\n          throw new BSONError('key ' + key + ' must not contain null bytes');\n        }\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw new BSONError('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw new BSONError('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'bigint') {\n        index = serializeBigInt(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (isUint8Array(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype == null) {\n        index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n      } else if (typeof value === 'object' && value[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n        throw new BSONVersionError();\n      } else if (value._bsontype === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value._bsontype === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value._bsontype === 'Code') {\n        index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, path);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index);\n      } else if (value._bsontype === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value._bsontype === 'BSONSymbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value._bsontype === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n      } else if (value._bsontype === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value._bsontype === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value._bsontype !== 'undefined') {\n        throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n      }\n    }\n  }\n  path.delete(object);\n  buffer[index++] = 0x00;\n  const size = index - startingIndex;\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = size >> 8 & 0xff;\n  buffer[startingIndex++] = size >> 16 & 0xff;\n  buffer[startingIndex++] = size >> 24 & 0xff;\n  return index;\n}\nfunction isBSONType(value) {\n  return value != null && typeof value === 'object' && '_bsontype' in value && typeof value._bsontype === 'string';\n}\nconst keysToCodecs = {\n  $oid: ObjectId,\n  $binary: Binary,\n  $uuid: Binary,\n  $symbol: BSONSymbol,\n  $numberInt: Int32,\n  $numberDecimal: Decimal128,\n  $numberDouble: Double,\n  $numberLong: Long,\n  $minKey: MinKey,\n  $maxKey: MaxKey,\n  $regex: BSONRegExp,\n  $regularExpression: BSONRegExp,\n  $timestamp: Timestamp\n};\nfunction deserializeValue(value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof value === 'number') {\n    const in32BitRange = value <= BSON_INT32_MAX && value >= BSON_INT32_MIN;\n    const in64BitRange = value <= BSON_INT64_MAX && value >= BSON_INT64_MIN;\n    if (options.relaxed || options.legacy) {\n      return value;\n    }\n    if (Number.isInteger(value) && !Object.is(value, -0)) {\n      if (in32BitRange) {\n        return new Int32(value);\n      }\n      if (in64BitRange) {\n        if (options.useBigInt64) {\n          return BigInt(value);\n        }\n        return Long.fromNumber(value);\n      }\n    }\n    return new Double(value);\n  }\n  if (value == null || typeof value !== 'object') return value;\n  if (value.$undefined) return null;\n  const keys = Object.keys(value).filter(k => k.startsWith('$') && value[k] != null);\n  for (let i = 0; i < keys.length; i++) {\n    const c = keysToCodecs[keys[i]];\n    if (c) return c.fromExtendedJSON(value, options);\n  }\n  if (value.$date != null) {\n    const d = value.$date;\n    const date = new Date();\n    if (options.legacy) {\n      if (typeof d === 'number') date.setTime(d);else if (typeof d === 'string') date.setTime(Date.parse(d));else if (typeof d === 'bigint') date.setTime(Number(d));else throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n    } else {\n      if (typeof d === 'string') date.setTime(Date.parse(d));else if (Long.isLong(d)) date.setTime(d.toNumber());else if (typeof d === 'number' && options.relaxed) date.setTime(d);else if (typeof d === 'bigint') date.setTime(Number(d));else throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n    }\n    return date;\n  }\n  if (value.$code != null) {\n    const copy = Object.assign({}, value);\n    if (value.$scope) {\n      copy.$scope = deserializeValue(value.$scope);\n    }\n    return Code.fromExtendedJSON(value);\n  }\n  if (isDBRefLike(value) || value.$dbPointer) {\n    const v = value.$ref ? value : value.$dbPointer;\n    if (v instanceof DBRef) return v;\n    const dollarKeys = Object.keys(v).filter(k => k.startsWith('$'));\n    let valid = true;\n    dollarKeys.forEach(k => {\n      if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;\n    });\n    if (valid) return DBRef.fromExtendedJSON(v);\n  }\n  return value;\n}\nfunction serializeArray(array, options) {\n  return array.map((v, index) => {\n    options.seenObjects.push({\n      propertyName: `index ${index}`,\n      obj: null\n    });\n    try {\n      return serializeValue(v, options);\n    } finally {\n      options.seenObjects.pop();\n    }\n  });\n}\nfunction getISOString(date) {\n  const isoStr = date.toISOString();\n  return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\nfunction serializeValue(value, options) {\n  if (value instanceof Map || isMap(value)) {\n    const obj = Object.create(null);\n    for (const [k, v] of value) {\n      if (typeof k !== 'string') {\n        throw new BSONError('Can only serialize maps with string keys');\n      }\n      obj[k] = v;\n    }\n    return serializeValue(obj, options);\n  }\n  if ((typeof value === 'object' || typeof value === 'function') && value !== null) {\n    const index = options.seenObjects.findIndex(entry => entry.obj === value);\n    if (index !== -1) {\n      const props = options.seenObjects.map(entry => entry.propertyName);\n      const leadingPart = props.slice(0, index).map(prop => `${prop} -> `).join('');\n      const alreadySeen = props[index];\n      const circularPart = ' -> ' + props.slice(index + 1, props.length - 1).map(prop => `${prop} -> `).join('');\n      const current = props[props.length - 1];\n      const leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);\n      const dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);\n      throw new BSONError('Converting circular structure to EJSON:\\n' + `    ${leadingPart}${alreadySeen}${circularPart}${current}\\n` + `    ${leadingSpace}\\\\${dashes}/`);\n    }\n    options.seenObjects[options.seenObjects.length - 1].obj = value;\n  }\n  if (Array.isArray(value)) return serializeArray(value, options);\n  if (value === undefined) return null;\n  if (value instanceof Date || isDate(value)) {\n    const dateNum = value.getTime(),\n      inRange = dateNum > -1 && dateNum < 253402318800000;\n    if (options.legacy) {\n      return options.relaxed && inRange ? {\n        $date: value.getTime()\n      } : {\n        $date: getISOString(value)\n      };\n    }\n    return options.relaxed && inRange ? {\n      $date: getISOString(value)\n    } : {\n      $date: {\n        $numberLong: value.getTime().toString()\n      }\n    };\n  }\n  if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {\n    if (Number.isInteger(value) && !Object.is(value, -0)) {\n      if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n        return {\n          $numberInt: value.toString()\n        };\n      }\n      if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) {\n        return {\n          $numberLong: value.toString()\n        };\n      }\n    }\n    return {\n      $numberDouble: Object.is(value, -0) ? '-0.0' : value.toString()\n    };\n  }\n  if (typeof value === 'bigint') {\n    if (!options.relaxed) {\n      return {\n        $numberLong: BigInt.asIntN(64, value).toString()\n      };\n    }\n    return Number(BigInt.asIntN(64, value));\n  }\n  if (value instanceof RegExp || isRegExp(value)) {\n    let flags = value.flags;\n    if (flags === undefined) {\n      const match = value.toString().match(/[gimuy]*$/);\n      if (match) {\n        flags = match[0];\n      }\n    }\n    const rx = new BSONRegExp(value.source, flags);\n    return rx.toExtendedJSON(options);\n  }\n  if (value != null && typeof value === 'object') return serializeDocument(value, options);\n  return value;\n}\nconst BSON_TYPE_MAPPINGS = {\n  Binary: o => new Binary(o.value(), o.sub_type),\n  Code: o => new Code(o.code, o.scope),\n  DBRef: o => new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields),\n  Decimal128: o => new Decimal128(o.bytes),\n  Double: o => new Double(o.value),\n  Int32: o => new Int32(o.value),\n  Long: o => Long.fromBits(o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_),\n  MaxKey: () => new MaxKey(),\n  MinKey: () => new MinKey(),\n  ObjectId: o => new ObjectId(o),\n  BSONRegExp: o => new BSONRegExp(o.pattern, o.options),\n  BSONSymbol: o => new BSONSymbol(o.value),\n  Timestamp: o => Timestamp.fromBits(o.low, o.high)\n};\nfunction serializeDocument(doc, options) {\n  if (doc == null || typeof doc !== 'object') throw new BSONError('not an object instance');\n  const bsontype = doc._bsontype;\n  if (typeof bsontype === 'undefined') {\n    const _doc = {};\n    for (const name of Object.keys(doc)) {\n      options.seenObjects.push({\n        propertyName: name,\n        obj: null\n      });\n      try {\n        const value = serializeValue(doc[name], options);\n        if (name === '__proto__') {\n          Object.defineProperty(_doc, name, {\n            value,\n            writable: true,\n            enumerable: true,\n            configurable: true\n          });\n        } else {\n          _doc[name] = value;\n        }\n      } finally {\n        options.seenObjects.pop();\n      }\n    }\n    return _doc;\n  } else if (doc != null && typeof doc === 'object' && typeof doc._bsontype === 'string' && doc[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION) {\n    throw new BSONVersionError();\n  } else if (isBSONType(doc)) {\n    let outDoc = doc;\n    if (typeof outDoc.toExtendedJSON !== 'function') {\n      const mapper = BSON_TYPE_MAPPINGS[doc._bsontype];\n      if (!mapper) {\n        throw new BSONError('Unrecognized or invalid _bsontype: ' + doc._bsontype);\n      }\n      outDoc = mapper(outDoc);\n    }\n    if (bsontype === 'Code' && outDoc.scope) {\n      outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));\n    } else if (bsontype === 'DBRef' && outDoc.oid) {\n      outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));\n    }\n    return outDoc.toExtendedJSON(options);\n  } else {\n    throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);\n  }\n}\nfunction parse(text, options) {\n  const ejsonOptions = {\n    useBigInt64: options?.useBigInt64 ?? false,\n    relaxed: options?.relaxed ?? true,\n    legacy: options?.legacy ?? false\n  };\n  return JSON.parse(text, (key, value) => {\n    if (key.indexOf('\\x00') !== -1) {\n      throw new BSONError(`BSON Document field names cannot contain null bytes, found: ${JSON.stringify(key)}`);\n    }\n    return deserializeValue(value, ejsonOptions);\n  });\n}\nfunction stringify(value, replacer, space, options) {\n  if (space != null && typeof space === 'object') {\n    options = space;\n    space = 0;\n  }\n  if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n    options = replacer;\n    replacer = undefined;\n    space = 0;\n  }\n  const serializeOptions = Object.assign({\n    relaxed: true,\n    legacy: false\n  }, options, {\n    seenObjects: [{\n      propertyName: '(root)',\n      obj: null\n    }]\n  });\n  const doc = serializeValue(value, serializeOptions);\n  return JSON.stringify(doc, replacer, space);\n}\nfunction EJSONserialize(value, options) {\n  options = options || {};\n  return JSON.parse(stringify(value, options));\n}\nfunction EJSONdeserialize(ejson, options) {\n  options = options || {};\n  return parse(JSON.stringify(ejson), options);\n}\nconst EJSON = Object.create(null);\nEJSON.parse = parse;\nEJSON.stringify = stringify;\nEJSON.serialize = EJSONserialize;\nEJSON.deserialize = EJSONdeserialize;\nObject.freeze(EJSON);\nconst MAXSIZE = 1024 * 1024 * 17;\nlet buffer = ByteUtils.allocate(MAXSIZE);\nfunction setInternalBufferSize(size) {\n  if (buffer.length < size) {\n    buffer = ByteUtils.allocate(size);\n  }\n}\nfunction serialize(object) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  const minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n  if (buffer.length < minInternalBufferSize) {\n    buffer = ByteUtils.allocate(minInternalBufferSize);\n  }\n  const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n  const finishedBuffer = ByteUtils.allocate(serializationIndex);\n  finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);\n  return finishedBuffer;\n}\nfunction serializeWithBufferAndIndex(object, finalBuffer) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  const startIndex = typeof options.index === 'number' ? options.index : 0;\n  const serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, null);\n  finalBuffer.set(buffer.subarray(0, serializationIndex), startIndex);\n  return startIndex + serializationIndex - 1;\n}\nfunction deserialize(buffer) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return internalDeserialize(ByteUtils.toLocalBufferType(buffer), options);\n}\nfunction calculateObjectSize(object) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = options || {};\n  const serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\nfunction deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {\n  const internalOptions = Object.assign({\n    allowObjectSmallerThanBufferSize: true,\n    index: 0\n  }, options);\n  const bufferData = ByteUtils.toLocalBufferType(data);\n  let index = startIndex;\n  for (let i = 0; i < numberOfDocuments; i++) {\n    const size = bufferData[index] | bufferData[index + 1] << 8 | bufferData[index + 2] << 16 | bufferData[index + 3] << 24;\n    internalOptions.index = index;\n    documents[docStartIndex + i] = internalDeserialize(bufferData, internalOptions);\n    index = index + size;\n  }\n  return index;\n}\nvar bson = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BSONError: BSONError,\n  BSONRegExp: BSONRegExp,\n  BSONRuntimeError: BSONRuntimeError,\n  BSONSymbol: BSONSymbol,\n  BSONType: BSONType,\n  BSONValue: BSONValue,\n  BSONVersionError: BSONVersionError,\n  Binary: Binary,\n  Code: Code,\n  DBRef: DBRef,\n  Decimal128: Decimal128,\n  Double: Double,\n  EJSON: EJSON,\n  Int32: Int32,\n  Long: Long,\n  MaxKey: MaxKey,\n  MinKey: MinKey,\n  ObjectId: ObjectId,\n  Timestamp: Timestamp,\n  UUID: UUID,\n  calculateObjectSize: calculateObjectSize,\n  deserialize: deserialize,\n  deserializeStream: deserializeStream,\n  serialize: serialize,\n  serializeWithBufferAndIndex: serializeWithBufferAndIndex,\n  setInternalBufferSize: setInternalBufferSize\n});\nexport { bson as BSON, BSONError, BSONRegExp, BSONRuntimeError, BSONSymbol, BSONType, BSONValue, BSONVersionError, Binary, Code, DBRef, Decimal128, Double, EJSON, Int32, Long, MaxKey, MinKey, ObjectId, Timestamp, UUID, calculateObjectSize, deserialize, deserializeStream, serialize, serializeWithBufferAndIndex, setInternalBufferSize };","map":{"version":3,"names":["isAnyArrayBuffer","value","includes","Object","prototype","toString","call","isUint8Array","isRegExp","d","isMap","isDate","BSON_MAJOR_VERSION","BSON_INT32_MAX","BSON_INT32_MIN","BSON_INT64_MAX","Math","pow","BSON_INT64_MIN","JS_INT_MAX","JS_INT_MIN","BSON_DATA_NUMBER","BSON_DATA_STRING","BSON_DATA_OBJECT","BSON_DATA_ARRAY","BSON_DATA_BINARY","BSON_DATA_UNDEFINED","BSON_DATA_OID","BSON_DATA_BOOLEAN","BSON_DATA_DATE","BSON_DATA_NULL","BSON_DATA_REGEXP","BSON_DATA_DBPOINTER","BSON_DATA_CODE","BSON_DATA_SYMBOL","BSON_DATA_CODE_W_SCOPE","BSON_DATA_INT","BSON_DATA_TIMESTAMP","BSON_DATA_LONG","BSON_DATA_DECIMAL128","BSON_DATA_MIN_KEY","BSON_DATA_MAX_KEY","BSON_BINARY_SUBTYPE_DEFAULT","BSON_BINARY_SUBTYPE_UUID_NEW","BSONType","freeze","double","string","object","array","binData","undefined","objectId","bool","date","null","regex","dbPointer","javascript","symbol","javascriptWithScope","int","timestamp","long","decimal","minKey","maxKey","BSONError","Error","bsonError","name","constructor","message","isBSONError","BSONVersionError","BSONRuntimeError","nodejsMathRandomBytes","byteLength","nodeJsByteUtils","fromNumberArray","Array","from","length","floor","random","nodejsRandomBytes","randomBytes","toLocalBufferType","potentialBuffer","Buffer","isBuffer","ArrayBuffer","isView","buffer","byteOffset","stringTag","Symbol","toStringTag","String","allocate","size","alloc","equals","a","b","fromBase64","base64","toBase64","fromISO88591","codePoints","toISO88591","fromHex","hex","toHex","fromUTF8","text","toUTF8","start","end","utf8ByteLength","input","encodeUTF8Into","source","write","isReactNative","navigator","globalThis","product","webMathRandomBytes","RangeError","webByteUtils","webRandomBytes","crypto","getRandomValues","console","warn","HEX_DIGIT","potentialUint8array","Uint8Array","slice","TypeError","i","atob","c","charCodeAt","uint8array","btoa","Uint16Array","fromCharCode","join","evenLengthHex","firstDigit","secondDigit","test","hexDigit","Number","parseInt","push","byte","padStart","TextEncoder","encode","TextDecoder","fatal","decode","bytes","set","hasGlobalBuffer","_isBuffer","ByteUtils","BSONDataView","DataView","fromUint8Array","BSONValue","for","Binary","_bsontype","subType","isArray","sub_type","BUFFER_SIZE","position","put","byteValue","decodedByte","newSpace","sequence","offset","read","asRaw","subarray","toJSON","encoding","toExtendedJSON","options","base64String","legacy","$binary","$type","toUUID","SUBTYPE_UUID","UUID","createFromHexString","createFromBase64","fromExtendedJSON","doc","data","type","bytesFromString","$uuid","JSON","stringify","inspect","SUBTYPE_DEFAULT","SUBTYPE_FUNCTION","SUBTYPE_BYTE_ARRAY","SUBTYPE_UUID_OLD","SUBTYPE_MD5","SUBTYPE_ENCRYPTED","SUBTYPE_COLUMN","SUBTYPE_USER_DEFINED","UUID_BYTE_LENGTH","UUID_WITHOUT_DASHES","UUID_WITH_DASHES","generate","id","toHexString","includeDashes","arguments","otherId","toBinary","isValid","isValidUUIDString","hexString","representation","replace","cacheHexString","Code","code","scope","$code","$scope","codeJson","isDBRefLike","$id","$ref","$db","DBRef","collection","oid","db","fields","parts","split","shift","namespace","o","assign","copy","wasm","WebAssembly","Instance","Module","exports","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_32_DBL","TWO_PWR_64_DBL","TWO_PWR_63_DBL","INT_CACHE","UINT_CACHE","MAX_INT64_STRING_LENGTH","DECIMAL_REG_EX","Long","__isLong__","low","high","unsigned","fromBigInt","fromString","fromBits","lowBits","highBits","fromInt","obj","cachedObj","cache","fromNumber","isNaN","UZERO","ZERO","MAX_UNSIGNED_VALUE","MIN_VALUE","MAX_VALUE","neg","str","radix","p","indexOf","substring","radixToPower","result","min","power","mul","add","fromBytes","le","fromBytesLE","fromBytesBE","isLong","fromValue","val","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","and","other","compare","eq","thisNeg","isNegative","otherNeg","sub","comp","divide","divisor","isZero","div_u","div_s","get_high","approx","rem","res","ONE","NEG_ONE","halfThis","shr","div","shl","toUnsigned","gt","shru","UONE","gte","max","toNumber","log2","ceil","log","LN2","delta","approxRes","approxRem","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","greaterThan","greaterThanOrEqual","ge","isEven","isOdd","isPositive","lessThan","lt","lessThanOrEqual","lte","modulo","rem_u","rem_s","mod","multiply","multiplier","TWO_PWR_24","negate","not","notEquals","neq","ne","or","shiftLeft","numBits","toInt","shiftRight","shiftRightUnsigned","shr_u","subtract","subtrahend","toBigInt","BigInt","toBytes","toBytesLE","toBytesBE","hi","lo","toSigned","radixLong","rem1","remDiv","intval","digits","xor","eqz","relaxed","$numberLong","useBigInt64","bigIntResult","asIntN","longResult","PARSE_STRING_REGEXP","PARSE_INF_REGEXP","PARSE_NAN_REGEXP","EXPONENT_MAX","EXPONENT_MIN","EXPONENT_BIAS","MAX_DIGITS","NAN_BUFFER","reverse","INF_NEGATIVE_BUFFER","INF_POSITIVE_BUFFER","EXPONENT_REGEX","COMBINATION_MASK","EXPONENT_MASK","COMBINATION_INFINITY","COMBINATION_NAN","isDigit","divideu128","DIVISOR","_rem","quotient","multiply64x2","left","right","leftHigh","leftLow","rightHigh","rightLow","productHigh","productMid","productMid2","productLow","uhleft","uhright","ulleft","ulright","invalidErr","Decimal128","sawRadix","foundNonZero","significantDigits","nDigitsRead","nDigits","radixPosition","firstNonZero","nDigitsStored","digitsInsert","lastDigit","exponent","significandHigh","significandLow","biasedExponent","index","stringMatch","match","infMatch","nanMatch","unsignedNumber","e","expSign","expNumber","substr","digitsString","endOfString","roundDigit","roundBit","dIdx","significand","dec","biased_exponent","significand_digits","is_zero","significand_msb","significand128","j","k","midl","midh","combination","least_digits","scientific_exponent","radix_position","$numberDecimal","Double","valueOf","isFinite","is","sign","$numberDouble","isInteger","toFixed","doubleValue","parseFloat","eJSON","Int32","$numberInt","MaxKey","$maxKey","MinKey","$minKey","checkForHexRegExp","RegExp","PROCESS_UNIQUE","kId","ObjectId","inputId","workingId","__id","getInc","time","Date","now","inc","setUint32","toLowerCase","otherIdString","thisIdString","getTimestamp","getUint32","setTime","createPk","createFromTime","$oid","internalCalculateObjectSize","serializeFunctions","ignoreUndefined","totalLength","calculateElement","toBSON","key","keys","binary","ordered_values","global","ignoreCase","multiline","pattern","alphabetize","sort","BSONRegExp","parseOptions","$regex","$options","$regularExpression","BSONSymbol","$symbol","LongWithoutOverridesClass","Timestamp","t","$timestamp","optRadix","FIRST_BIT","FIRST_TWO_BITS","FIRST_THREE_BITS","FIRST_FOUR_BITS","FIRST_FIVE_BITS","TWO_BIT_CHAR","THREE_BIT_CHAR","FOUR_BIT_CHAR","CONTINUING_CHAR","validateUtf8","continuation","JS_INT_MAX_LONG","JS_INT_MIN_LONG","internalDeserialize","allowObjectSmallerThanBufferSize","deserializeObject","allowedDBRefKeys","fieldsAsRaw","raw","bsonRegExp","promoteBuffers","promoteLongs","promoteValues","validation","utf8","globalUTFValidation","validationSetting","utf8KeysSet","Set","utf8ValidatedKeys","utf8ValidationValues","map","every","item","startIndex","arrayIndex","done","isPossibleDBRef","dataview","elementType","shouldValidateKey","has","stringSize","getValidatedString","getFloat64","_index","objectSize","objectOptions","arrayOptions","stopIndex","getBigInt64","binarySize","totalBinarySize","_buffer","regExpOptions","optionsArray","functionString","totalSize","scopeObject","oidBuffer","defineProperty","writable","enumerable","configurable","shouldValidateUtf8","regexp","ignoreKeys","serializeString","numberOfWrittenBytes","NUMBER_SPACE","FOUR_BYTE_VIEW_ON_NUMBER","EIGHT_BYTE_VIEW_ON_NUMBER","serializeNumber","isNegativeZero","isSafeInteger","setInt32","setFloat64","serializeBigInt","setBigInt64","serializeNull","_","serializeBoolean","serializeDate","dateInMilis","getTime","serializeRegExp","serializeBSONRegExp","sortedOptions","serializeMinMax","serializeObjectId","serializeBuffer","serializeObject","checkKeys","depth","path","endIndex","serializeInto","delete","serializeDecimal128","serializeLong","serializeInt32","serializeDouble","serializeFunction","serializeCode","codeSize","serializeBinary","serializeSymbol","serializeDBRef","output","startingIndex","Map","iterator","entries","entry","next","isBSONType","keysToCodecs","deserializeValue","in32BitRange","in64BitRange","$undefined","filter","startsWith","$date","parse","$dbPointer","v","dollarKeys","valid","forEach","serializeArray","seenObjects","propertyName","serializeValue","pop","getISOString","isoStr","toISOString","getUTCMilliseconds","create","findIndex","props","leadingPart","prop","alreadySeen","circularPart","current","leadingSpace","repeat","dashes","dateNum","inRange","flags","rx","serializeDocument","BSON_TYPE_MAPPINGS","low_","high_","unsigned_","bsontype","_doc","outDoc","mapper","ejsonOptions","replacer","space","serializeOptions","EJSONserialize","EJSONdeserialize","ejson","EJSON","serialize","deserialize","MAXSIZE","setInternalBufferSize","minInternalBufferSize","serializationIndex","finishedBuffer","serializeWithBufferAndIndex","finalBuffer","calculateObjectSize","deserializeStream","numberOfDocuments","documents","docStartIndex","internalOptions","bufferData"],"sources":["/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/parser/utils.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/constants.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/error.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/utils/node_byte_utils.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/utils/web_byte_utils.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/utils/byte_utils.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/bson_value.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/binary.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/code.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/db_ref.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/long.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/decimal128.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/double.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/int_32.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/max_key.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/min_key.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/objectid.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/parser/calculate_size.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/regexp.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/symbol.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/timestamp.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/validate_utf8.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/parser/deserializer.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/parser/serializer.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/extended_json.ts","/home/antoine/Documents/Epitech/epitech-hub-website-project/project-front/node_modules/bson/src/bson.ts"],"sourcesContent":["export function isAnyArrayBuffer(value: unknown): value is ArrayBuffer {\n  return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(\n    Object.prototype.toString.call(value)\n  );\n}\n\nexport function isUint8Array(value: unknown): value is Uint8Array {\n  return Object.prototype.toString.call(value) === '[object Uint8Array]';\n}\n\nexport function isBigInt64Array(value: unknown): value is BigInt64Array {\n  return Object.prototype.toString.call(value) === '[object BigInt64Array]';\n}\n\nexport function isBigUInt64Array(value: unknown): value is BigUint64Array {\n  return Object.prototype.toString.call(value) === '[object BigUint64Array]';\n}\n\nexport function isRegExp(d: unknown): d is RegExp {\n  return Object.prototype.toString.call(d) === '[object RegExp]';\n}\n\nexport function isMap(d: unknown): d is Map<unknown, unknown> {\n  return Object.prototype.toString.call(d) === '[object Map]';\n}\n\nexport function isDate(d: unknown): d is Date {\n  return Object.prototype.toString.call(d) === '[object Date]';\n}\n","/** @internal */\nexport const BSON_MAJOR_VERSION = 5 as const;\n\n/** @internal */\nexport const BSON_INT32_MAX = 0x7fffffff;\n/** @internal */\nexport const BSON_INT32_MIN = -0x80000000;\n/** @internal */\nexport const BSON_INT64_MAX = Math.pow(2, 63) - 1;\n/** @internal */\nexport const BSON_INT64_MIN = -Math.pow(2, 63);\n\n/**\n * Any integer up to 2^53 can be precisely represented by a double.\n * @internal\n */\nexport const JS_INT_MAX = Math.pow(2, 53);\n\n/**\n * Any integer down to -2^53 can be precisely represented by a double.\n * @internal\n */\nexport const JS_INT_MIN = -Math.pow(2, 53);\n\n/** Number BSON Type @internal */\nexport const BSON_DATA_NUMBER = 1;\n\n/** String BSON Type @internal */\nexport const BSON_DATA_STRING = 2;\n\n/** Object BSON Type @internal */\nexport const BSON_DATA_OBJECT = 3;\n\n/** Array BSON Type @internal */\nexport const BSON_DATA_ARRAY = 4;\n\n/** Binary BSON Type @internal */\nexport const BSON_DATA_BINARY = 5;\n\n/** Binary BSON Type @internal */\nexport const BSON_DATA_UNDEFINED = 6;\n\n/** ObjectId BSON Type @internal */\nexport const BSON_DATA_OID = 7;\n\n/** Boolean BSON Type @internal */\nexport const BSON_DATA_BOOLEAN = 8;\n\n/** Date BSON Type @internal */\nexport const BSON_DATA_DATE = 9;\n\n/** null BSON Type @internal */\nexport const BSON_DATA_NULL = 10;\n\n/** RegExp BSON Type @internal */\nexport const BSON_DATA_REGEXP = 11;\n\n/** Code BSON Type @internal */\nexport const BSON_DATA_DBPOINTER = 12;\n\n/** Code BSON Type @internal */\nexport const BSON_DATA_CODE = 13;\n\n/** Symbol BSON Type @internal */\nexport const BSON_DATA_SYMBOL = 14;\n\n/** Code with Scope BSON Type @internal */\nexport const BSON_DATA_CODE_W_SCOPE = 15;\n\n/** 32 bit Integer BSON Type @internal */\nexport const BSON_DATA_INT = 16;\n\n/** Timestamp BSON Type @internal */\nexport const BSON_DATA_TIMESTAMP = 17;\n\n/** Long BSON Type @internal */\nexport const BSON_DATA_LONG = 18;\n\n/** Decimal128 BSON Type @internal */\nexport const BSON_DATA_DECIMAL128 = 19;\n\n/** MinKey BSON Type @internal */\nexport const BSON_DATA_MIN_KEY = 0xff;\n\n/** MaxKey BSON Type @internal */\nexport const BSON_DATA_MAX_KEY = 0x7f;\n\n/** Binary Default Type @internal */\nexport const BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n/** Binary Function Type @internal */\nexport const BSON_BINARY_SUBTYPE_FUNCTION = 1;\n\n/** Binary Byte Array Type @internal */\nexport const BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;\n\n/** Binary Deprecated UUID Type @deprecated Please use BSON_BINARY_SUBTYPE_UUID_NEW @internal */\nexport const BSON_BINARY_SUBTYPE_UUID = 3;\n\n/** Binary UUID Type @internal */\nexport const BSON_BINARY_SUBTYPE_UUID_NEW = 4;\n\n/** Binary MD5 Type @internal */\nexport const BSON_BINARY_SUBTYPE_MD5 = 5;\n\n/** Encrypted BSON type @internal */\nexport const BSON_BINARY_SUBTYPE_ENCRYPTED = 6;\n\n/** Column BSON type @internal */\nexport const BSON_BINARY_SUBTYPE_COLUMN = 7;\n\n/** Binary User Defined Type @internal */\nexport const BSON_BINARY_SUBTYPE_USER_DEFINED = 128;\n\n/** @public */\nexport const BSONType = Object.freeze({\n  double: 1,\n  string: 2,\n  object: 3,\n  array: 4,\n  binData: 5,\n  undefined: 6,\n  objectId: 7,\n  bool: 8,\n  date: 9,\n  null: 10,\n  regex: 11,\n  dbPointer: 12,\n  javascript: 13,\n  symbol: 14,\n  javascriptWithScope: 15,\n  int: 16,\n  timestamp: 17,\n  long: 18,\n  decimal: 19,\n  minKey: -1,\n  maxKey: 127\n} as const);\n\n/** @public */\nexport type BSONType = (typeof BSONType)[keyof typeof BSONType];\n","import { BSON_MAJOR_VERSION } from './constants';\n\n/**\n * @public\n * @category Error\n *\n * `BSONError` objects are thrown when BSON ecounters an error.\n *\n * This is the parent class for all the other errors thrown by this library.\n */\nexport class BSONError extends Error {\n  /**\n   * @internal\n   * The underlying algorithm for isBSONError may change to improve how strict it is\n   * about determining if an input is a BSONError. But it must remain backwards compatible\n   * with previous minors & patches of the current major version.\n   */\n  protected get bsonError(): true {\n    return true;\n  }\n\n  override get name(): string {\n    return 'BSONError';\n  }\n\n  constructor(message: string) {\n    super(message);\n  }\n\n  /**\n   * @public\n   *\n   * All errors thrown from the BSON library inherit from `BSONError`.\n   * This method can assist with determining if an error originates from the BSON library\n   * even if it does not pass an `instanceof` check against this class' constructor.\n   *\n   * @param value - any javascript value that needs type checking\n   */\n  public static isBSONError(value: unknown): value is BSONError {\n    return (\n      value != null &&\n      typeof value === 'object' &&\n      'bsonError' in value &&\n      value.bsonError === true &&\n      // Do not access the following properties, just check existence\n      'name' in value &&\n      'message' in value &&\n      'stack' in value\n    );\n  }\n}\n\n/**\n * @public\n * @category Error\n */\nexport class BSONVersionError extends BSONError {\n  get name(): 'BSONVersionError' {\n    return 'BSONVersionError';\n  }\n\n  constructor() {\n    super(\n      `Unsupported BSON version, bson types must be from bson ${BSON_MAJOR_VERSION}.0 or later`\n    );\n  }\n}\n\n/**\n * @public\n * @category Error\n *\n * An error generated when BSON functions encounter an unexpected input\n * or reaches an unexpected/invalid internal state\n *\n */\nexport class BSONRuntimeError extends BSONError {\n  get name(): 'BSONRuntimeError' {\n    return 'BSONRuntimeError';\n  }\n\n  constructor(message: string) {\n    super(message);\n  }\n}\n","import { BSONError } from '../error';\n\ntype NodeJsEncoding = 'base64' | 'hex' | 'utf8' | 'binary';\ntype NodeJsBuffer = ArrayBufferView &\n  Uint8Array & {\n    write(string: string, offset: number, length: undefined, encoding: 'utf8'): number;\n    copy(target: Uint8Array, targetStart: number, sourceStart: number, sourceEnd: number): number;\n    toString: (this: Uint8Array, encoding: NodeJsEncoding, start?: number, end?: number) => string;\n    equals: (this: Uint8Array, other: Uint8Array) => boolean;\n  };\ntype NodeJsBufferConstructor = Omit<Uint8ArrayConstructor, 'from'> & {\n  alloc: (size: number) => NodeJsBuffer;\n  from(array: number[]): NodeJsBuffer;\n  from(array: Uint8Array): NodeJsBuffer;\n  from(array: ArrayBuffer): NodeJsBuffer;\n  from(array: ArrayBuffer, byteOffset: number, byteLength: number): NodeJsBuffer;\n  from(base64: string, encoding: NodeJsEncoding): NodeJsBuffer;\n  byteLength(input: string, encoding: 'utf8'): number;\n  isBuffer(value: unknown): value is NodeJsBuffer;\n};\n\n// This can be nullish, but we gate the nodejs functions on being exported whether or not this exists\n// Node.js global\ndeclare const Buffer: NodeJsBufferConstructor;\ndeclare const require: (mod: 'crypto') => { randomBytes: (byteLength: number) => Uint8Array };\n\n/** @internal */\nexport function nodejsMathRandomBytes(byteLength: number) {\n  return nodeJsByteUtils.fromNumberArray(\n    Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256))\n  );\n}\n\n/**\n * @internal\n * WARNING: REQUIRE WILL BE REWRITTEN\n *\n * This code is carefully used by require_rewriter.mjs any modifications must be reflected in the plugin.\n *\n * @remarks\n * \"crypto\" is the only dependency BSON needs. This presents a problem for creating a bundle of the BSON library\n * in an es module format that can be used both on the browser and in Node.js. In Node.js when BSON is imported as\n * an es module, there will be no global require function defined, making the code below fallback to the much less desireable math.random bytes.\n * In order to make our es module bundle work as expected on Node.js we need to change this `require()` to a dynamic import, and the dynamic\n * import must be top-level awaited since es modules are async. So we rely on a custom rollup plugin to seek out the following lines of code\n * and replace `require` with `await import` and the IIFE line (`nodejsRandomBytes = (() => { ... })()`) with `nodejsRandomBytes = await (async () => { ... })()`\n * when generating an es module bundle.\n */\nconst nodejsRandomBytes: (byteLength: number) => Uint8Array = (() => {\n  try {\n    return require('crypto').randomBytes;\n  } catch {\n    return nodejsMathRandomBytes;\n  }\n})();\n\n/** @internal */\nexport const nodeJsByteUtils = {\n  toLocalBufferType(potentialBuffer: Uint8Array | NodeJsBuffer | ArrayBuffer): NodeJsBuffer {\n    if (Buffer.isBuffer(potentialBuffer)) {\n      return potentialBuffer;\n    }\n\n    if (ArrayBuffer.isView(potentialBuffer)) {\n      return Buffer.from(\n        potentialBuffer.buffer,\n        potentialBuffer.byteOffset,\n        potentialBuffer.byteLength\n      );\n    }\n\n    const stringTag =\n      potentialBuffer?.[Symbol.toStringTag] ?? Object.prototype.toString.call(potentialBuffer);\n    if (\n      stringTag === 'ArrayBuffer' ||\n      stringTag === 'SharedArrayBuffer' ||\n      stringTag === '[object ArrayBuffer]' ||\n      stringTag === '[object SharedArrayBuffer]'\n    ) {\n      return Buffer.from(potentialBuffer);\n    }\n\n    throw new BSONError(`Cannot create Buffer from ${String(potentialBuffer)}`);\n  },\n\n  allocate(size: number): NodeJsBuffer {\n    return Buffer.alloc(size);\n  },\n\n  equals(a: Uint8Array, b: Uint8Array): boolean {\n    return nodeJsByteUtils.toLocalBufferType(a).equals(b);\n  },\n\n  fromNumberArray(array: number[]): NodeJsBuffer {\n    return Buffer.from(array);\n  },\n\n  fromBase64(base64: string): NodeJsBuffer {\n    return Buffer.from(base64, 'base64');\n  },\n\n  toBase64(buffer: Uint8Array): string {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('base64');\n  },\n\n  /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n  fromISO88591(codePoints: string): NodeJsBuffer {\n    return Buffer.from(codePoints, 'binary');\n  },\n\n  /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n  toISO88591(buffer: Uint8Array): string {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('binary');\n  },\n\n  fromHex(hex: string): NodeJsBuffer {\n    return Buffer.from(hex, 'hex');\n  },\n\n  toHex(buffer: Uint8Array): string {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('hex');\n  },\n\n  fromUTF8(text: string): NodeJsBuffer {\n    return Buffer.from(text, 'utf8');\n  },\n\n  toUTF8(buffer: Uint8Array, start: number, end: number): string {\n    return nodeJsByteUtils.toLocalBufferType(buffer).toString('utf8', start, end);\n  },\n\n  utf8ByteLength(input: string): number {\n    return Buffer.byteLength(input, 'utf8');\n  },\n\n  encodeUTF8Into(buffer: Uint8Array, source: string, byteOffset: number): number {\n    return nodeJsByteUtils.toLocalBufferType(buffer).write(source, byteOffset, undefined, 'utf8');\n  },\n\n  randomBytes: nodejsRandomBytes\n};\n","import { BSONError } from '../error';\n\ntype TextDecoder = {\n  readonly encoding: string;\n  readonly fatal: boolean;\n  readonly ignoreBOM: boolean;\n  decode(input?: Uint8Array): string;\n};\ntype TextDecoderConstructor = {\n  new (label: 'utf8', options: { fatal: boolean; ignoreBOM?: boolean }): TextDecoder;\n};\n\ntype TextEncoder = {\n  readonly encoding: string;\n  encode(input?: string): Uint8Array;\n};\ntype TextEncoderConstructor = {\n  new (): TextEncoder;\n};\n\n// Web global\ndeclare const TextDecoder: TextDecoderConstructor;\ndeclare const TextEncoder: TextEncoderConstructor;\ndeclare const atob: (base64: string) => string;\ndeclare const btoa: (binary: string) => string;\n\ntype ArrayBufferViewWithTag = ArrayBufferView & {\n  [Symbol.toStringTag]?: string;\n};\n\nfunction isReactNative() {\n  const { navigator } = globalThis as { navigator?: { product?: string } };\n  return typeof navigator === 'object' && navigator.product === 'ReactNative';\n}\n\n/** @internal */\nexport function webMathRandomBytes(byteLength: number) {\n  if (byteLength < 0) {\n    throw new RangeError(`The argument 'byteLength' is invalid. Received ${byteLength}`);\n  }\n  return webByteUtils.fromNumberArray(\n    Array.from({ length: byteLength }, () => Math.floor(Math.random() * 256))\n  );\n}\n\n/** @internal */\nconst webRandomBytes: (byteLength: number) => Uint8Array = (() => {\n  const { crypto } = globalThis as {\n    crypto?: { getRandomValues?: (space: Uint8Array) => Uint8Array };\n  };\n  if (crypto != null && typeof crypto.getRandomValues === 'function') {\n    return (byteLength: number) => {\n      // @ts-expect-error: crypto.getRandomValues cannot actually be null here\n      // You cannot separate getRandomValues from crypto (need to have this === crypto)\n      return crypto.getRandomValues(webByteUtils.allocate(byteLength));\n    };\n  } else {\n    if (isReactNative()) {\n      const { console } = globalThis as { console?: { warn?: (message: string) => void } };\n      console?.warn?.(\n        'BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.'\n      );\n    }\n    return webMathRandomBytes;\n  }\n})();\n\nconst HEX_DIGIT = /(\\d|[a-f])/i;\n\n/** @internal */\nexport const webByteUtils = {\n  toLocalBufferType(\n    potentialUint8array: Uint8Array | ArrayBufferViewWithTag | ArrayBuffer\n  ): Uint8Array {\n    const stringTag =\n      potentialUint8array?.[Symbol.toStringTag] ??\n      Object.prototype.toString.call(potentialUint8array);\n\n    if (stringTag === 'Uint8Array') {\n      return potentialUint8array as Uint8Array;\n    }\n\n    if (ArrayBuffer.isView(potentialUint8array)) {\n      return new Uint8Array(\n        potentialUint8array.buffer.slice(\n          potentialUint8array.byteOffset,\n          potentialUint8array.byteOffset + potentialUint8array.byteLength\n        )\n      );\n    }\n\n    if (\n      stringTag === 'ArrayBuffer' ||\n      stringTag === 'SharedArrayBuffer' ||\n      stringTag === '[object ArrayBuffer]' ||\n      stringTag === '[object SharedArrayBuffer]'\n    ) {\n      return new Uint8Array(potentialUint8array);\n    }\n\n    throw new BSONError(`Cannot make a Uint8Array from ${String(potentialUint8array)}`);\n  },\n\n  allocate(size: number): Uint8Array {\n    if (typeof size !== 'number') {\n      throw new TypeError(`The \"size\" argument must be of type number. Received ${String(size)}`);\n    }\n    return new Uint8Array(size);\n  },\n\n  equals(a: Uint8Array, b: Uint8Array): boolean {\n    if (a.byteLength !== b.byteLength) {\n      return false;\n    }\n    for (let i = 0; i < a.byteLength; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  fromNumberArray(array: number[]): Uint8Array {\n    return Uint8Array.from(array);\n  },\n\n  fromBase64(base64: string): Uint8Array {\n    return Uint8Array.from(atob(base64), c => c.charCodeAt(0));\n  },\n\n  toBase64(uint8array: Uint8Array): string {\n    return btoa(webByteUtils.toISO88591(uint8array));\n  },\n\n  /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n  fromISO88591(codePoints: string): Uint8Array {\n    return Uint8Array.from(codePoints, c => c.charCodeAt(0) & 0xff);\n  },\n\n  /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n  toISO88591(uint8array: Uint8Array): string {\n    return Array.from(Uint16Array.from(uint8array), b => String.fromCharCode(b)).join('');\n  },\n\n  fromHex(hex: string): Uint8Array {\n    const evenLengthHex = hex.length % 2 === 0 ? hex : hex.slice(0, hex.length - 1);\n    const buffer = [];\n\n    for (let i = 0; i < evenLengthHex.length; i += 2) {\n      const firstDigit = evenLengthHex[i];\n      const secondDigit = evenLengthHex[i + 1];\n\n      if (!HEX_DIGIT.test(firstDigit)) {\n        break;\n      }\n      if (!HEX_DIGIT.test(secondDigit)) {\n        break;\n      }\n\n      const hexDigit = Number.parseInt(`${firstDigit}${secondDigit}`, 16);\n      buffer.push(hexDigit);\n    }\n\n    return Uint8Array.from(buffer);\n  },\n\n  toHex(uint8array: Uint8Array): string {\n    return Array.from(uint8array, byte => byte.toString(16).padStart(2, '0')).join('');\n  },\n\n  fromUTF8(text: string): Uint8Array {\n    return new TextEncoder().encode(text);\n  },\n\n  toUTF8(uint8array: Uint8Array, start: number, end: number): string {\n    return new TextDecoder('utf8', { fatal: false }).decode(uint8array.slice(start, end));\n  },\n\n  utf8ByteLength(input: string): number {\n    return webByteUtils.fromUTF8(input).byteLength;\n  },\n\n  encodeUTF8Into(buffer: Uint8Array, source: string, byteOffset: number): number {\n    const bytes = webByteUtils.fromUTF8(source);\n    buffer.set(bytes, byteOffset);\n    return bytes.byteLength;\n  },\n\n  randomBytes: webRandomBytes\n};\n","import { nodeJsByteUtils } from './node_byte_utils';\nimport { webByteUtils } from './web_byte_utils';\n\n/** @internal */\nexport type ByteUtils = {\n  /** Transforms the input to an instance of Buffer if running on node, otherwise Uint8Array */\n  toLocalBufferType(buffer: Uint8Array | ArrayBufferView | ArrayBuffer): Uint8Array;\n  /** Create empty space of size */\n  allocate: (size: number) => Uint8Array;\n  /** Check if two Uint8Arrays are deep equal */\n  equals: (a: Uint8Array, b: Uint8Array) => boolean;\n  /** Check if two Uint8Arrays are deep equal */\n  fromNumberArray: (array: number[]) => Uint8Array;\n  /** Create a Uint8Array from a base64 string */\n  fromBase64: (base64: string) => Uint8Array;\n  /** Create a base64 string from bytes */\n  toBase64: (buffer: Uint8Array) => string;\n  /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n  fromISO88591: (codePoints: string) => Uint8Array;\n  /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n  toISO88591: (buffer: Uint8Array) => string;\n  /** Create a Uint8Array from a hex string */\n  fromHex: (hex: string) => Uint8Array;\n  /** Create a hex string from bytes */\n  toHex: (buffer: Uint8Array) => string;\n  /** Create a Uint8Array containing utf8 code units from a string */\n  fromUTF8: (text: string) => Uint8Array;\n  /** Create a string from utf8 code units */\n  toUTF8: (buffer: Uint8Array, start: number, end: number) => string;\n  /** Get the utf8 code unit count from a string if it were to be transformed to utf8 */\n  utf8ByteLength: (input: string) => number;\n  /** Encode UTF8 bytes generated from `source` string into `destination` at byteOffset. Returns the number of bytes encoded. */\n  encodeUTF8Into(destination: Uint8Array, source: string, byteOffset: number): number;\n  /** Generate a Uint8Array filled with random bytes with byteLength */\n  randomBytes(byteLength: number): Uint8Array;\n};\n\ndeclare const Buffer: { new (): unknown; prototype?: { _isBuffer?: boolean } } | undefined;\n\n/**\n * Check that a global Buffer exists that is a function and\n * does not have a '_isBuffer' property defined on the prototype\n * (this is to prevent using the npm buffer)\n */\nconst hasGlobalBuffer = typeof Buffer === 'function' && Buffer.prototype?._isBuffer !== true;\n\n/**\n * This is the only ByteUtils that should be used across the rest of the BSON library.\n *\n * The type annotation is important here, it asserts that each of the platform specific\n * utils implementations are compatible with the common one.\n *\n * @internal\n */\nexport const ByteUtils: ByteUtils = hasGlobalBuffer ? nodeJsByteUtils : webByteUtils;\n\nexport class BSONDataView extends DataView {\n  static fromUint8Array(input: Uint8Array) {\n    return new DataView(input.buffer, input.byteOffset, input.byteLength);\n  }\n}\n","import { BSON_MAJOR_VERSION } from './constants';\n\n/** @public */\nexport abstract class BSONValue {\n  /** @public */\n  public abstract get _bsontype(): string;\n\n  /** @internal */\n  get [Symbol.for('@@mdb.bson.version')](): typeof BSON_MAJOR_VERSION {\n    return BSON_MAJOR_VERSION;\n  }\n\n  /** @public */\n  public abstract inspect(): string;\n\n  /** @internal */\n  abstract toExtendedJSON(): unknown;\n}\n","import { isUint8Array } from './parser/utils';\nimport type { EJSONOptions } from './extended_json';\nimport { BSONError } from './error';\nimport { BSON_BINARY_SUBTYPE_UUID_NEW } from './constants';\nimport { ByteUtils } from './utils/byte_utils';\nimport { BSONValue } from './bson_value';\n\n/** @public */\nexport type BinarySequence = Uint8Array | number[];\n\n/** @public */\nexport interface BinaryExtendedLegacy {\n  $type: string;\n  $binary: string;\n}\n\n/** @public */\nexport interface BinaryExtended {\n  $binary: {\n    subType: string;\n    base64: string;\n  };\n}\n\n/**\n * A class representation of the BSON Binary type.\n * @public\n * @category BSONType\n */\nexport class Binary extends BSONValue {\n  get _bsontype(): 'Binary' {\n    return 'Binary';\n  }\n\n  /**\n   * Binary default subtype\n   * @internal\n   */\n  private static readonly BSON_BINARY_SUBTYPE_DEFAULT = 0;\n\n  /** Initial buffer default size */\n  static readonly BUFFER_SIZE = 256;\n  /** Default BSON type */\n  static readonly SUBTYPE_DEFAULT = 0;\n  /** Function BSON type */\n  static readonly SUBTYPE_FUNCTION = 1;\n  /** Byte Array BSON type */\n  static readonly SUBTYPE_BYTE_ARRAY = 2;\n  /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */\n  static readonly SUBTYPE_UUID_OLD = 3;\n  /** UUID BSON type */\n  static readonly SUBTYPE_UUID = 4;\n  /** MD5 BSON type */\n  static readonly SUBTYPE_MD5 = 5;\n  /** Encrypted BSON type */\n  static readonly SUBTYPE_ENCRYPTED = 6;\n  /** Column BSON type */\n  static readonly SUBTYPE_COLUMN = 7;\n  /** User BSON type */\n  static readonly SUBTYPE_USER_DEFINED = 128;\n\n  buffer!: Uint8Array;\n  sub_type!: number;\n  position!: number;\n\n  /**\n   * Create a new Binary instance.\n   *\n   * This constructor can accept a string as its first argument. In this case,\n   * this string will be encoded using ISO-8859-1, **not** using UTF-8.\n   * This is almost certainly not what you want. Use `new Binary(Buffer.from(string))`\n   * instead to convert the string to a Buffer using UTF-8 first.\n   *\n   * @param buffer - a buffer object containing the binary data.\n   * @param subType - the option binary type.\n   */\n  constructor(buffer?: string | BinarySequence, subType?: number) {\n    super();\n    if (\n      !(buffer == null) &&\n      !(typeof buffer === 'string') &&\n      !ArrayBuffer.isView(buffer) &&\n      !(buffer instanceof ArrayBuffer) &&\n      !Array.isArray(buffer)\n    ) {\n      throw new BSONError(\n        'Binary can only be constructed from string, Buffer, TypedArray, or Array<number>'\n      );\n    }\n\n    this.sub_type = subType ?? Binary.BSON_BINARY_SUBTYPE_DEFAULT;\n\n    if (buffer == null) {\n      // create an empty binary buffer\n      this.buffer = ByteUtils.allocate(Binary.BUFFER_SIZE);\n      this.position = 0;\n    } else {\n      if (typeof buffer === 'string') {\n        // string\n        this.buffer = ByteUtils.fromISO88591(buffer);\n      } else if (Array.isArray(buffer)) {\n        // number[]\n        this.buffer = ByteUtils.fromNumberArray(buffer);\n      } else {\n        // Buffer | TypedArray | ArrayBuffer\n        this.buffer = ByteUtils.toLocalBufferType(buffer);\n      }\n\n      this.position = this.buffer.byteLength;\n    }\n  }\n\n  /**\n   * Updates this binary with byte_value.\n   *\n   * @param byteValue - a single byte we wish to write.\n   */\n  put(byteValue: string | number | Uint8Array | number[]): void {\n    // If it's a string and a has more than one character throw an error\n    if (typeof byteValue === 'string' && byteValue.length !== 1) {\n      throw new BSONError('only accepts single character String');\n    } else if (typeof byteValue !== 'number' && byteValue.length !== 1)\n      throw new BSONError('only accepts single character Uint8Array or Array');\n\n    // Decode the byte value once\n    let decodedByte: number;\n    if (typeof byteValue === 'string') {\n      decodedByte = byteValue.charCodeAt(0);\n    } else if (typeof byteValue === 'number') {\n      decodedByte = byteValue;\n    } else {\n      decodedByte = byteValue[0];\n    }\n\n    if (decodedByte < 0 || decodedByte > 255) {\n      throw new BSONError('only accepts number in a valid unsigned byte range 0-255');\n    }\n\n    if (this.buffer.byteLength > this.position) {\n      this.buffer[this.position++] = decodedByte;\n    } else {\n      const newSpace = ByteUtils.allocate(Binary.BUFFER_SIZE + this.buffer.length);\n      newSpace.set(this.buffer, 0);\n      this.buffer = newSpace;\n      this.buffer[this.position++] = decodedByte;\n    }\n  }\n\n  /**\n   * Writes a buffer or string to the binary.\n   *\n   * @param sequence - a string or buffer to be written to the Binary BSON object.\n   * @param offset - specify the binary of where to write the content.\n   */\n  write(sequence: string | BinarySequence, offset: number): void {\n    offset = typeof offset === 'number' ? offset : this.position;\n\n    // If the buffer is to small let's extend the buffer\n    if (this.buffer.byteLength < offset + sequence.length) {\n      const newSpace = ByteUtils.allocate(this.buffer.byteLength + sequence.length);\n      newSpace.set(this.buffer, 0);\n\n      // Assign the new buffer\n      this.buffer = newSpace;\n    }\n\n    if (ArrayBuffer.isView(sequence)) {\n      this.buffer.set(ByteUtils.toLocalBufferType(sequence), offset);\n      this.position =\n        offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;\n    } else if (typeof sequence === 'string') {\n      const bytes = ByteUtils.fromISO88591(sequence);\n      this.buffer.set(bytes, offset);\n      this.position =\n        offset + sequence.length > this.position ? offset + sequence.length : this.position;\n    }\n  }\n\n  /**\n   * Reads **length** bytes starting at **position**.\n   *\n   * @param position - read from the given position in the Binary.\n   * @param length - the number of bytes to read.\n   */\n  read(position: number, length: number): BinarySequence {\n    length = length && length > 0 ? length : this.position;\n\n    // Let's return the data based on the type we have\n    return this.buffer.slice(position, position + length);\n  }\n\n  /**\n   * Returns the value of this binary as a string.\n   * @param asRaw - Will skip converting to a string\n   * @remarks\n   * This is handy when calling this function conditionally for some key value pairs and not others\n   */\n  value(asRaw?: boolean): string | BinarySequence {\n    asRaw = !!asRaw;\n\n    // Optimize to serialize for the situation where the data == size of buffer\n    if (asRaw && this.buffer.length === this.position) {\n      return this.buffer;\n    }\n\n    // If it's a node.js buffer object\n    if (asRaw) {\n      return this.buffer.slice(0, this.position);\n    }\n    // TODO(NODE-4361): remove binary string support, value(true) should be the default / only option here.\n    return ByteUtils.toISO88591(this.buffer.subarray(0, this.position));\n  }\n\n  /** the length of the binary sequence */\n  length(): number {\n    return this.position;\n  }\n\n  toJSON(): string {\n    return ByteUtils.toBase64(this.buffer);\n  }\n\n  toString(encoding?: 'hex' | 'base64' | 'utf8' | 'utf-8'): string {\n    if (encoding === 'hex') return ByteUtils.toHex(this.buffer);\n    if (encoding === 'base64') return ByteUtils.toBase64(this.buffer);\n    if (encoding === 'utf8' || encoding === 'utf-8')\n      return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n    return ByteUtils.toUTF8(this.buffer, 0, this.buffer.byteLength);\n  }\n\n  /** @internal */\n  toExtendedJSON(options?: EJSONOptions): BinaryExtendedLegacy | BinaryExtended {\n    options = options || {};\n    const base64String = ByteUtils.toBase64(this.buffer);\n\n    const subType = Number(this.sub_type).toString(16);\n    if (options.legacy) {\n      return {\n        $binary: base64String,\n        $type: subType.length === 1 ? '0' + subType : subType\n      };\n    }\n    return {\n      $binary: {\n        base64: base64String,\n        subType: subType.length === 1 ? '0' + subType : subType\n      }\n    };\n  }\n\n  toUUID(): UUID {\n    if (this.sub_type === Binary.SUBTYPE_UUID) {\n      return new UUID(this.buffer.slice(0, this.position));\n    }\n\n    throw new BSONError(\n      `Binary sub_type \"${this.sub_type}\" is not supported for converting to UUID. Only \"${Binary.SUBTYPE_UUID}\" is currently supported.`\n    );\n  }\n\n  /** Creates an Binary instance from a hex digit string */\n  static createFromHexString(hex: string, subType?: number): Binary {\n    return new Binary(ByteUtils.fromHex(hex), subType);\n  }\n\n  /** Creates an Binary instance from a base64 string */\n  static createFromBase64(base64: string, subType?: number): Binary {\n    return new Binary(ByteUtils.fromBase64(base64), subType);\n  }\n\n  /** @internal */\n  static fromExtendedJSON(\n    doc: BinaryExtendedLegacy | BinaryExtended | UUIDExtended,\n    options?: EJSONOptions\n  ): Binary {\n    options = options || {};\n    let data: Uint8Array | undefined;\n    let type;\n    if ('$binary' in doc) {\n      if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {\n        type = doc.$type ? parseInt(doc.$type, 16) : 0;\n        data = ByteUtils.fromBase64(doc.$binary);\n      } else {\n        if (typeof doc.$binary !== 'string') {\n          type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;\n          data = ByteUtils.fromBase64(doc.$binary.base64);\n        }\n      }\n    } else if ('$uuid' in doc) {\n      type = 4;\n      data = UUID.bytesFromString(doc.$uuid);\n    }\n    if (!data) {\n      throw new BSONError(`Unexpected Binary Extended JSON format ${JSON.stringify(doc)}`);\n    }\n    return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    const base64 = ByteUtils.toBase64(this.buffer.subarray(0, this.position));\n    return `Binary.createFromBase64(\"${base64}\", ${this.sub_type})`;\n  }\n}\n\n/** @public */\nexport type UUIDExtended = {\n  $uuid: string;\n};\n\nconst UUID_BYTE_LENGTH = 16;\nconst UUID_WITHOUT_DASHES = /^[0-9A-F]{32}$/i;\nconst UUID_WITH_DASHES = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\n\n/**\n * A class representation of the BSON UUID type.\n * @public\n */\nexport class UUID extends Binary {\n  /** @deprecated Hex string is no longer cached, this control will be removed in a future major release */\n  static cacheHexString = false;\n  /**\n   * Create a UUID type\n   *\n   * When the argument to the constructor is omitted a random v4 UUID will be generated.\n   *\n   * @param input - Can be a 32 or 36 character hex string (dashes excluded/included) or a 16 byte binary Buffer.\n   */\n  constructor(input?: string | Uint8Array | UUID) {\n    let bytes: Uint8Array;\n    if (input == null) {\n      bytes = UUID.generate();\n    } else if (input instanceof UUID) {\n      bytes = ByteUtils.toLocalBufferType(new Uint8Array(input.buffer));\n    } else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {\n      bytes = ByteUtils.toLocalBufferType(input);\n    } else if (typeof input === 'string') {\n      bytes = UUID.bytesFromString(input);\n    } else {\n      throw new BSONError(\n        'Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).'\n      );\n    }\n    super(bytes, BSON_BINARY_SUBTYPE_UUID_NEW);\n  }\n\n  /**\n   * The UUID bytes\n   * @readonly\n   */\n  get id(): Uint8Array {\n    return this.buffer;\n  }\n\n  set id(value: Uint8Array) {\n    this.buffer = value;\n  }\n\n  /**\n   * Returns the UUID id as a 32 or 36 character hex string representation, excluding/including dashes (defaults to 36 character dash separated)\n   * @param includeDashes - should the string exclude dash-separators.\n   */\n  toHexString(includeDashes = true): string {\n    if (includeDashes) {\n      return [\n        ByteUtils.toHex(this.buffer.subarray(0, 4)),\n        ByteUtils.toHex(this.buffer.subarray(4, 6)),\n        ByteUtils.toHex(this.buffer.subarray(6, 8)),\n        ByteUtils.toHex(this.buffer.subarray(8, 10)),\n        ByteUtils.toHex(this.buffer.subarray(10, 16))\n      ].join('-');\n    }\n    return ByteUtils.toHex(this.buffer);\n  }\n\n  /**\n   * Converts the id into a 36 character (dashes included) hex string, unless a encoding is specified.\n   */\n  toString(encoding?: 'hex' | 'base64'): string {\n    if (encoding === 'hex') return ByteUtils.toHex(this.id);\n    if (encoding === 'base64') return ByteUtils.toBase64(this.id);\n    return this.toHexString();\n  }\n\n  /**\n   * Converts the id into its JSON string representation.\n   * A 36 character (dashes included) hex string in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n   */\n  toJSON(): string {\n    return this.toHexString();\n  }\n\n  /**\n   * Compares the equality of this UUID with `otherID`.\n   *\n   * @param otherId - UUID instance to compare against.\n   */\n  equals(otherId: string | Uint8Array | UUID): boolean {\n    if (!otherId) {\n      return false;\n    }\n\n    if (otherId instanceof UUID) {\n      return ByteUtils.equals(otherId.id, this.id);\n    }\n\n    try {\n      return ByteUtils.equals(new UUID(otherId).id, this.id);\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Creates a Binary instance from the current UUID.\n   */\n  toBinary(): Binary {\n    return new Binary(this.id, Binary.SUBTYPE_UUID);\n  }\n\n  /**\n   * Generates a populated buffer containing a v4 uuid\n   */\n  static generate(): Uint8Array {\n    const bytes = ByteUtils.randomBytes(UUID_BYTE_LENGTH);\n\n    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n    // Kindly borrowed from https://github.com/uuidjs/uuid/blob/master/src/v4.js\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    return bytes;\n  }\n\n  /**\n   * Checks if a value is a valid bson UUID\n   * @param input - UUID, string or Buffer to validate.\n   */\n  static isValid(input: string | Uint8Array | UUID | Binary): boolean {\n    if (!input) {\n      return false;\n    }\n\n    if (typeof input === 'string') {\n      return UUID.isValidUUIDString(input);\n    }\n\n    if (isUint8Array(input)) {\n      return input.byteLength === UUID_BYTE_LENGTH;\n    }\n\n    return (\n      input._bsontype === 'Binary' &&\n      input.sub_type === this.SUBTYPE_UUID &&\n      input.buffer.byteLength === 16\n    );\n  }\n\n  /**\n   * Creates an UUID from a hex string representation of an UUID.\n   * @param hexString - 32 or 36 character hex string (dashes excluded/included).\n   */\n  static override createFromHexString(hexString: string): UUID {\n    const buffer = UUID.bytesFromString(hexString);\n    return new UUID(buffer);\n  }\n\n  /** Creates an UUID from a base64 string representation of an UUID. */\n  static override createFromBase64(base64: string): UUID {\n    return new UUID(ByteUtils.fromBase64(base64));\n  }\n\n  /** @internal */\n  static bytesFromString(representation: string) {\n    if (!UUID.isValidUUIDString(representation)) {\n      throw new BSONError(\n        'UUID string representation must be 32 hex digits or canonical hyphenated representation'\n      );\n    }\n    return ByteUtils.fromHex(representation.replace(/-/g, ''));\n  }\n\n  /**\n   * @internal\n   *\n   * Validates a string to be a hex digit sequence with or without dashes.\n   * The canonical hyphenated representation of a uuid is hex in 8-4-4-4-12 groups.\n   */\n  static isValidUUIDString(representation: string) {\n    return UUID_WITHOUT_DASHES.test(representation) || UUID_WITH_DASHES.test(representation);\n  }\n\n  /**\n   * Converts to a string representation of this Id.\n   *\n   * @returns return the 36 character hex string representation.\n   * @internal\n   */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new UUID(\"${this.toHexString()}\")`;\n  }\n}\n","import type { Document } from './bson';\nimport { BSONValue } from './bson_value';\n\n/** @public */\nexport interface CodeExtended {\n  $code: string;\n  $scope?: Document;\n}\n\n/**\n * A class representation of the BSON Code type.\n * @public\n * @category BSONType\n */\nexport class Code extends BSONValue {\n  get _bsontype(): 'Code' {\n    return 'Code';\n  }\n\n  code: string;\n\n  // a code instance having a null scope is what determines whether\n  // it is BSONType 0x0D (just code) / 0x0F (code with scope)\n  scope: Document | null;\n\n  /**\n   * @param code - a string or function.\n   * @param scope - an optional scope for the function.\n   */\n  constructor(code: string | Function, scope?: Document | null) {\n    super();\n    this.code = code.toString();\n    this.scope = scope ?? null;\n  }\n\n  toJSON(): { code: string; scope?: Document } {\n    if (this.scope != null) {\n      return { code: this.code, scope: this.scope };\n    }\n\n    return { code: this.code };\n  }\n\n  /** @internal */\n  toExtendedJSON(): CodeExtended {\n    if (this.scope) {\n      return { $code: this.code, $scope: this.scope };\n    }\n\n    return { $code: this.code };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: CodeExtended): Code {\n    return new Code(doc.$code, doc.$scope);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    const codeJson = this.toJSON();\n    return `new Code(\"${String(codeJson.code)}\"${\n      codeJson.scope != null ? `, ${JSON.stringify(codeJson.scope)}` : ''\n    })`;\n  }\n}\n","import type { Document } from './bson';\nimport { BSONValue } from './bson_value';\nimport type { EJSONOptions } from './extended_json';\nimport type { ObjectId } from './objectid';\n\n/** @public */\nexport interface DBRefLike {\n  $ref: string;\n  $id: ObjectId;\n  $db?: string;\n}\n\n/** @internal */\nexport function isDBRefLike(value: unknown): value is DBRefLike {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    '$id' in value &&\n    value.$id != null &&\n    '$ref' in value &&\n    typeof value.$ref === 'string' &&\n    // If '$db' is defined it MUST be a string, otherwise it should be absent\n    (!('$db' in value) || ('$db' in value && typeof value.$db === 'string'))\n  );\n}\n\n/**\n * A class representation of the BSON DBRef type.\n * @public\n * @category BSONType\n */\nexport class DBRef extends BSONValue {\n  get _bsontype(): 'DBRef' {\n    return 'DBRef';\n  }\n\n  collection!: string;\n  oid!: ObjectId;\n  db?: string;\n  fields!: Document;\n\n  /**\n   * @param collection - the collection name.\n   * @param oid - the reference ObjectId.\n   * @param db - optional db name, if omitted the reference is local to the current db.\n   */\n  constructor(collection: string, oid: ObjectId, db?: string, fields?: Document) {\n    super();\n    // check if namespace has been provided\n    const parts = collection.split('.');\n    if (parts.length === 2) {\n      db = parts.shift();\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      collection = parts.shift()!;\n    }\n\n    this.collection = collection;\n    this.oid = oid;\n    this.db = db;\n    this.fields = fields || {};\n  }\n\n  // Property provided for compatibility with the 1.x parser\n  // the 1.x parser used a \"namespace\" property, while 4.x uses \"collection\"\n\n  /** @internal */\n  get namespace(): string {\n    return this.collection;\n  }\n\n  set namespace(value: string) {\n    this.collection = value;\n  }\n\n  toJSON(): DBRefLike & Document {\n    const o = Object.assign(\n      {\n        $ref: this.collection,\n        $id: this.oid\n      },\n      this.fields\n    );\n\n    if (this.db != null) o.$db = this.db;\n    return o;\n  }\n\n  /** @internal */\n  toExtendedJSON(options?: EJSONOptions): DBRefLike {\n    options = options || {};\n    let o: DBRefLike = {\n      $ref: this.collection,\n      $id: this.oid\n    };\n\n    if (options.legacy) {\n      return o;\n    }\n\n    if (this.db) o.$db = this.db;\n    o = Object.assign(o, this.fields);\n    return o;\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: DBRefLike): DBRef {\n    const copy = Object.assign({}, doc) as Partial<DBRefLike>;\n    delete copy.$ref;\n    delete copy.$id;\n    delete copy.$db;\n    return new DBRef(doc.$ref, doc.$id, doc.$db, copy);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    // NOTE: if OID is an ObjectId class it will just print the oid string.\n    const oid =\n      this.oid === undefined || this.oid.toString === undefined ? this.oid : this.oid.toString();\n    return `new DBRef(\"${this.namespace}\", new ObjectId(\"${String(oid)}\")${\n      this.db ? `, \"${this.db}\"` : ''\n    })`;\n  }\n}\n","import { BSONValue } from './bson_value';\nimport { BSONError } from './error';\nimport type { EJSONOptions } from './extended_json';\nimport type { Timestamp } from './timestamp';\n\ninterface LongWASMHelpers {\n  /** Gets the high bits of the last operation performed */\n  get_high(this: void): number;\n  div_u(\n    this: void,\n    lowBits: number,\n    highBits: number,\n    lowBitsDivisor: number,\n    highBitsDivisor: number\n  ): number;\n  div_s(\n    this: void,\n    lowBits: number,\n    highBits: number,\n    lowBitsDivisor: number,\n    highBitsDivisor: number\n  ): number;\n  rem_u(\n    this: void,\n    lowBits: number,\n    highBits: number,\n    lowBitsDivisor: number,\n    highBitsDivisor: number\n  ): number;\n  rem_s(\n    this: void,\n    lowBits: number,\n    highBits: number,\n    lowBitsDivisor: number,\n    highBitsDivisor: number\n  ): number;\n  mul(\n    this: void,\n    lowBits: number,\n    highBits: number,\n    lowBitsMultiplier: number,\n    highBitsMultiplier: number\n  ): number;\n}\n\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nlet wasm: LongWASMHelpers | undefined = undefined;\n\n/* We do not want to have to include DOM types just for this check */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const WebAssembly: any;\n\ntry {\n  wasm = new WebAssembly.Instance(\n    new WebAssembly.Module(\n      // prettier-ignore\n      new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])\n    ),\n    {}\n  ).exports as unknown as LongWASMHelpers;\n} catch {\n  // no wasm support\n}\n\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_24_DBL = 1 << 24;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n/** A cache of the Long representations of small integer values. */\nconst INT_CACHE: { [key: number]: Long } = {};\n\n/** A cache of the Long representations of small unsigned integer values. */\nconst UINT_CACHE: { [key: number]: Long } = {};\n\nconst MAX_INT64_STRING_LENGTH = 20;\n\nconst DECIMAL_REG_EX = /^(\\+?0|(\\+|-)?[1-9][0-9]*)$/;\n\n/** @public */\nexport interface LongExtended {\n  $numberLong: string;\n}\n\n/**\n * A class representing a 64-bit integer\n * @public\n * @category BSONType\n * @remarks\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16 bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.\n */\nexport class Long extends BSONValue {\n  get _bsontype(): 'Long' {\n    return 'Long';\n  }\n\n  /** An indicator used to reliably determine if an object is a Long or not. */\n  get __isLong__(): boolean {\n    return true;\n  }\n\n  /**\n   * The high 32 bits as a signed value.\n   */\n  high!: number;\n\n  /**\n   * The low 32 bits as a signed value.\n   */\n  low!: number;\n\n  /**\n   * Whether unsigned or not.\n   */\n  unsigned!: boolean;\n\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   *\n   * Acceptable signatures are:\n   * - Long(low, high, unsigned?)\n   * - Long(bigint, unsigned?)\n   * - Long(string, unsigned?)\n   *\n   * @param low - The low (signed) 32 bits of the long\n   * @param high - The high (signed) 32 bits of the long\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   */\n  constructor(low: number | bigint | string = 0, high?: number | boolean, unsigned?: boolean) {\n    super();\n    if (typeof low === 'bigint') {\n      Object.assign(this, Long.fromBigInt(low, !!high));\n    } else if (typeof low === 'string') {\n      Object.assign(this, Long.fromString(low, !!high));\n    } else {\n      this.low = low | 0;\n      this.high = (high as number) | 0;\n      this.unsigned = !!unsigned;\n    }\n  }\n\n  static TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);\n\n  /** Maximum unsigned value. */\n  static MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);\n  /** Signed zero */\n  static ZERO = Long.fromInt(0);\n  /** Unsigned zero. */\n  static UZERO = Long.fromInt(0, true);\n  /** Signed one. */\n  static ONE = Long.fromInt(1);\n  /** Unsigned one. */\n  static UONE = Long.fromInt(1, true);\n  /** Signed negative one. */\n  static NEG_ONE = Long.fromInt(-1);\n  /** Maximum signed value. */\n  static MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);\n  /** Minimum signed value. */\n  static MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.\n   * Each is assumed to use 32 bits.\n   * @param lowBits - The low 32 bits\n   * @param highBits - The high 32 bits\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @returns The corresponding Long value\n   */\n  static fromBits(lowBits: number, highBits: number, unsigned?: boolean): Long {\n    return new Long(lowBits, highBits, unsigned);\n  }\n\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @param value - The 32 bit integer in question\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @returns The corresponding Long value\n   */\n  static fromInt(value: number, unsigned?: boolean): Long {\n    let obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if ((cache = 0 <= value && value < 256)) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if ((cache = -128 <= value && value < 128)) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = Long.fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @param value - The number in question\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @returns The corresponding Long value\n   */\n  static fromNumber(value: number, unsigned?: boolean): Long {\n    if (isNaN(value)) return unsigned ? Long.UZERO : Long.ZERO;\n    if (unsigned) {\n      if (value < 0) return Long.UZERO;\n      if (value >= TWO_PWR_64_DBL) return Long.MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return Long.MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return Long.MAX_VALUE;\n    }\n    if (value < 0) return Long.fromNumber(-value, unsigned).neg();\n    return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n  }\n\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @param value - The number in question\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @returns The corresponding Long value\n   */\n  static fromBigInt(value: bigint, unsigned?: boolean): Long {\n    return Long.fromString(value.toString(), unsigned);\n  }\n\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @param str - The textual representation of the Long\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @param radix - The radix in which the text is written (2-36), defaults to 10\n   * @returns The corresponding Long value\n   */\n  static fromString(str: string, unsigned?: boolean, radix?: number): Long {\n    if (str.length === 0) throw new BSONError('empty string');\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity')\n      return Long.ZERO;\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      (radix = unsigned), (unsigned = false);\n    } else {\n      unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw new BSONError('radix');\n\n    let p;\n    if ((p = str.indexOf('-')) > 0) throw new BSONError('interior hyphen');\n    else if (p === 0) {\n      return Long.fromString(str.substring(1), unsigned, radix).neg();\n    }\n\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    const radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n    let result = Long.ZERO;\n    for (let i = 0; i < str.length; i += 8) {\n      const size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        const power = Long.fromNumber(Math.pow(radix, size));\n        result = result.mul(power).add(Long.fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  }\n\n  /**\n   * Creates a Long from its byte representation.\n   * @param bytes - Byte representation\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @param le - Whether little or big endian, defaults to big endian\n   * @returns The corresponding Long value\n   */\n  static fromBytes(bytes: number[], unsigned?: boolean, le?: boolean): Long {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  }\n\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param bytes - Little endian byte representation\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @returns The corresponding Long value\n   */\n  static fromBytesLE(bytes: number[], unsigned?: boolean): Long {\n    return new Long(\n      bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),\n      bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),\n      unsigned\n    );\n  }\n\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param bytes - Big endian byte representation\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   * @returns The corresponding Long value\n   */\n  static fromBytesBE(bytes: number[], unsigned?: boolean): Long {\n    return new Long(\n      (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],\n      (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],\n      unsigned\n    );\n  }\n\n  /**\n   * Tests if the specified object is a Long.\n   */\n  static isLong(value: unknown): value is Long {\n    return (\n      value != null &&\n      typeof value === 'object' &&\n      '__isLong__' in value &&\n      value.__isLong__ === true\n    );\n  }\n\n  /**\n   * Converts the specified value to a Long.\n   * @param unsigned - Whether unsigned or not, defaults to signed\n   */\n  static fromValue(\n    val: number | string | { low: number; high: number; unsigned?: boolean },\n    unsigned?: boolean\n  ): Long {\n    if (typeof val === 'number') return Long.fromNumber(val, unsigned);\n    if (typeof val === 'string') return Long.fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return Long.fromBits(\n      val.low,\n      val.high,\n      typeof unsigned === 'boolean' ? unsigned : val.unsigned\n    );\n  }\n\n  /** Returns the sum of this and the specified Long. */\n  add(addend: string | number | Long | Timestamp): Long {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    const a48 = this.high >>> 16;\n    const a32 = this.high & 0xffff;\n    const a16 = this.low >>> 16;\n    const a00 = this.low & 0xffff;\n\n    const b48 = addend.high >>> 16;\n    const b32 = addend.high & 0xffff;\n    const b16 = addend.low >>> 16;\n    const b00 = addend.low & 0xffff;\n\n    let c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n    return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n  }\n\n  /**\n   * Returns the sum of this and the specified Long.\n   * @returns Sum\n   */\n  and(other: string | number | Long | Timestamp): Long {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  }\n\n  /**\n   * Compares this Long's value with the specified's.\n   * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater\n   */\n  compare(other: string | number | Long | Timestamp): 0 | 1 | -1 {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.eq(other)) return 0;\n    const thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    // At this point the sign bits are the same\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return other.high >>> 0 > this.high >>> 0 ||\n      (other.high === this.high && other.low >>> 0 > this.low >>> 0)\n      ? -1\n      : 1;\n  }\n\n  /** This is an alias of {@link Long.compare} */\n  comp(other: string | number | Long | Timestamp): 0 | 1 | -1 {\n    return this.compare(other);\n  }\n\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.\n   * @returns Quotient\n   */\n  divide(divisor: string | number | Long | Timestamp): Long {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (divisor.isZero()) throw new BSONError('division by zero');\n\n    // use wasm support if present\n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (\n        !this.unsigned &&\n        this.high === -0x80000000 &&\n        divisor.low === -1 &&\n        divisor.high === -1\n      ) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n      const low = (this.unsigned ? wasm.div_u : wasm.div_s)(\n        this.low,\n        this.high,\n        divisor.low,\n        divisor.high\n      );\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n\n    if (this.isZero()) return this.unsigned ? Long.UZERO : Long.ZERO;\n    let approx, rem, res;\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(Long.MIN_VALUE)) {\n        if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE)) return Long.MIN_VALUE;\n        // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(Long.MIN_VALUE)) return Long.ONE;\n        else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          const halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(Long.ZERO)) {\n            return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(Long.MIN_VALUE)) return this.unsigned ? Long.UZERO : Long.ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = Long.ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return Long.UZERO;\n      if (divisor.gt(this.shru(1)))\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return Long.UONE;\n      res = Long.UZERO;\n    }\n\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    rem = this;\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\n\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      const log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      const delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      let approxRes = Long.fromNumber(approx);\n      let approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      }\n\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) approxRes = Long.ONE;\n\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  }\n\n  /**This is an alias of {@link Long.divide} */\n  div(divisor: string | number | Long | Timestamp): Long {\n    return this.divide(divisor);\n  }\n\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @param other - Other value\n   */\n  equals(other: string | number | Long | Timestamp): boolean {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)\n      return false;\n    return this.high === other.high && this.low === other.low;\n  }\n\n  /** This is an alias of {@link Long.equals} */\n  eq(other: string | number | Long | Timestamp): boolean {\n    return this.equals(other);\n  }\n\n  /** Gets the high 32 bits as a signed integer. */\n  getHighBits(): number {\n    return this.high;\n  }\n\n  /** Gets the high 32 bits as an unsigned integer. */\n  getHighBitsUnsigned(): number {\n    return this.high >>> 0;\n  }\n\n  /** Gets the low 32 bits as a signed integer. */\n  getLowBits(): number {\n    return this.low;\n  }\n\n  /** Gets the low 32 bits as an unsigned integer. */\n  getLowBitsUnsigned(): number {\n    return this.low >>> 0;\n  }\n\n  /** Gets the number of bits needed to represent the absolute value of this Long. */\n  getNumBitsAbs(): number {\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    }\n    const val = this.high !== 0 ? this.high : this.low;\n    let bit: number;\n    for (bit = 31; bit > 0; bit--) if ((val & (1 << bit)) !== 0) break;\n    return this.high !== 0 ? bit + 33 : bit + 1;\n  }\n\n  /** Tests if this Long's value is greater than the specified's. */\n  greaterThan(other: string | number | Long | Timestamp): boolean {\n    return this.comp(other) > 0;\n  }\n\n  /** This is an alias of {@link Long.greaterThan} */\n  gt(other: string | number | Long | Timestamp): boolean {\n    return this.greaterThan(other);\n  }\n\n  /** Tests if this Long's value is greater than or equal the specified's. */\n  greaterThanOrEqual(other: string | number | Long | Timestamp): boolean {\n    return this.comp(other) >= 0;\n  }\n\n  /** This is an alias of {@link Long.greaterThanOrEqual} */\n  gte(other: string | number | Long | Timestamp): boolean {\n    return this.greaterThanOrEqual(other);\n  }\n  /** This is an alias of {@link Long.greaterThanOrEqual} */\n  ge(other: string | number | Long | Timestamp): boolean {\n    return this.greaterThanOrEqual(other);\n  }\n\n  /** Tests if this Long's value is even. */\n  isEven(): boolean {\n    return (this.low & 1) === 0;\n  }\n\n  /** Tests if this Long's value is negative. */\n  isNegative(): boolean {\n    return !this.unsigned && this.high < 0;\n  }\n\n  /** Tests if this Long's value is odd. */\n  isOdd(): boolean {\n    return (this.low & 1) === 1;\n  }\n\n  /** Tests if this Long's value is positive. */\n  isPositive(): boolean {\n    return this.unsigned || this.high >= 0;\n  }\n\n  /** Tests if this Long's value equals zero. */\n  isZero(): boolean {\n    return this.high === 0 && this.low === 0;\n  }\n\n  /** Tests if this Long's value is less than the specified's. */\n  lessThan(other: string | number | Long | Timestamp): boolean {\n    return this.comp(other) < 0;\n  }\n\n  /** This is an alias of {@link Long#lessThan}. */\n  lt(other: string | number | Long | Timestamp): boolean {\n    return this.lessThan(other);\n  }\n\n  /** Tests if this Long's value is less than or equal the specified's. */\n  lessThanOrEqual(other: string | number | Long | Timestamp): boolean {\n    return this.comp(other) <= 0;\n  }\n\n  /** This is an alias of {@link Long.lessThanOrEqual} */\n  lte(other: string | number | Long | Timestamp): boolean {\n    return this.lessThanOrEqual(other);\n  }\n\n  /** Returns this Long modulo the specified. */\n  modulo(divisor: string | number | Long | Timestamp): Long {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n\n    // use wasm support if present\n    if (wasm) {\n      const low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\n        this.low,\n        this.high,\n        divisor.low,\n        divisor.high\n      );\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n\n    return this.sub(this.div(divisor).mul(divisor));\n  }\n\n  /** This is an alias of {@link Long.modulo} */\n  mod(divisor: string | number | Long | Timestamp): Long {\n    return this.modulo(divisor);\n  }\n  /** This is an alias of {@link Long.modulo} */\n  rem(divisor: string | number | Long | Timestamp): Long {\n    return this.modulo(divisor);\n  }\n\n  /**\n   * Returns the product of this and the specified Long.\n   * @param multiplier - Multiplier\n   * @returns Product\n   */\n  multiply(multiplier: string | number | Long | Timestamp): Long {\n    if (this.isZero()) return Long.ZERO;\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n\n    // use wasm support if present\n    if (wasm) {\n      const low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);\n      return Long.fromBits(low, wasm.get_high(), this.unsigned);\n    }\n\n    if (multiplier.isZero()) return Long.ZERO;\n    if (this.eq(Long.MIN_VALUE)) return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    if (multiplier.eq(Long.MIN_VALUE)) return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());\n      else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();\n\n    // If both longs are small, use float multiplication\n    if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))\n      return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\n\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    const a48 = this.high >>> 16;\n    const a32 = this.high & 0xffff;\n    const a16 = this.low >>> 16;\n    const a00 = this.low & 0xffff;\n\n    const b48 = multiplier.high >>> 16;\n    const b32 = multiplier.high & 0xffff;\n    const b16 = multiplier.low >>> 16;\n    const b00 = multiplier.low & 0xffff;\n\n    let c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n    return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n  }\n\n  /** This is an alias of {@link Long.multiply} */\n  mul(multiplier: string | number | Long | Timestamp): Long {\n    return this.multiply(multiplier);\n  }\n\n  /** Returns the Negation of this Long's value. */\n  negate(): Long {\n    if (!this.unsigned && this.eq(Long.MIN_VALUE)) return Long.MIN_VALUE;\n    return this.not().add(Long.ONE);\n  }\n\n  /** This is an alias of {@link Long.negate} */\n  neg(): Long {\n    return this.negate();\n  }\n\n  /** Returns the bitwise NOT of this Long. */\n  not(): Long {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  }\n\n  /** Tests if this Long's value differs from the specified's. */\n  notEquals(other: string | number | Long | Timestamp): boolean {\n    return !this.equals(other);\n  }\n\n  /** This is an alias of {@link Long.notEquals} */\n  neq(other: string | number | Long | Timestamp): boolean {\n    return this.notEquals(other);\n  }\n  /** This is an alias of {@link Long.notEquals} */\n  ne(other: string | number | Long | Timestamp): boolean {\n    return this.notEquals(other);\n  }\n\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   */\n  or(other: number | string | Long): Long {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  }\n\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @param numBits - Number of bits\n   * @returns Shifted Long\n   */\n  shiftLeft(numBits: number | Long): Long {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    else if (numBits < 32)\n      return Long.fromBits(\n        this.low << numBits,\n        (this.high << numBits) | (this.low >>> (32 - numBits)),\n        this.unsigned\n      );\n    else return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);\n  }\n\n  /** This is an alias of {@link Long.shiftLeft} */\n  shl(numBits: number | Long): Long {\n    return this.shiftLeft(numBits);\n  }\n\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @param numBits - Number of bits\n   * @returns Shifted Long\n   */\n  shiftRight(numBits: number | Long): Long {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    else if (numBits < 32)\n      return Long.fromBits(\n        (this.low >>> numBits) | (this.high << (32 - numBits)),\n        this.high >> numBits,\n        this.unsigned\n      );\n    else return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\n  }\n\n  /** This is an alias of {@link Long.shiftRight} */\n  shr(numBits: number | Long): Long {\n    return this.shiftRight(numBits);\n  }\n\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @param numBits - Number of bits\n   * @returns Shifted Long\n   */\n  shiftRightUnsigned(numBits: Long | number): Long {\n    if (Long.isLong(numBits)) numBits = numBits.toInt();\n    numBits &= 63;\n    if (numBits === 0) return this;\n    else {\n      const high = this.high;\n      if (numBits < 32) {\n        const low = this.low;\n        return Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits,\n          this.unsigned\n        );\n      } else if (numBits === 32) return Long.fromBits(high, 0, this.unsigned);\n      else return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\n    }\n  }\n\n  /** This is an alias of {@link Long.shiftRightUnsigned} */\n  shr_u(numBits: number | Long): Long {\n    return this.shiftRightUnsigned(numBits);\n  }\n  /** This is an alias of {@link Long.shiftRightUnsigned} */\n  shru(numBits: number | Long): Long {\n    return this.shiftRightUnsigned(numBits);\n  }\n\n  /**\n   * Returns the difference of this and the specified Long.\n   * @param subtrahend - Subtrahend\n   * @returns Difference\n   */\n  subtract(subtrahend: string | number | Long | Timestamp): Long {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  }\n\n  /** This is an alias of {@link Long.subtract} */\n  sub(subtrahend: string | number | Long | Timestamp): Long {\n    return this.subtract(subtrahend);\n  }\n\n  /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */\n  toInt(): number {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  }\n\n  /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */\n  toNumber(): number {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  }\n\n  /** Converts the Long to a BigInt (arbitrary precision). */\n  toBigInt(): bigint {\n    // eslint-disable-next-line no-restricted-globals -- This is allowed here as it is explicitly requesting a bigint\n    return BigInt(this.toString());\n  }\n\n  /**\n   * Converts this Long to its byte representation.\n   * @param le - Whether little or big endian, defaults to big endian\n   * @returns Byte representation\n   */\n  toBytes(le?: boolean): number[] {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  }\n\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @returns Little endian byte representation\n   */\n  toBytesLE(): number[] {\n    const hi = this.high,\n      lo = this.low;\n    return [\n      lo & 0xff,\n      (lo >>> 8) & 0xff,\n      (lo >>> 16) & 0xff,\n      lo >>> 24,\n      hi & 0xff,\n      (hi >>> 8) & 0xff,\n      (hi >>> 16) & 0xff,\n      hi >>> 24\n    ];\n  }\n\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @returns Big endian byte representation\n   */\n  toBytesBE(): number[] {\n    const hi = this.high,\n      lo = this.low;\n    return [\n      hi >>> 24,\n      (hi >>> 16) & 0xff,\n      (hi >>> 8) & 0xff,\n      hi & 0xff,\n      lo >>> 24,\n      (lo >>> 16) & 0xff,\n      (lo >>> 8) & 0xff,\n      lo & 0xff\n    ];\n  }\n\n  /**\n   * Converts this Long to signed.\n   */\n  toSigned(): Long {\n    if (!this.unsigned) return this;\n    return Long.fromBits(this.low, this.high, false);\n  }\n\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @param radix - Radix (2-36), defaults to 10\n   * @throws RangeError If `radix` is out of range\n   */\n  toString(radix?: number): string {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw new BSONError('radix');\n    if (this.isZero()) return '0';\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(Long.MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        const radixLong = Long.fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    }\n\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    const radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let rem: Long = this;\n    let result = '';\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const remDiv = rem.div(radixToPower);\n      const intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;\n      let digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  }\n\n  /** Converts this Long to unsigned. */\n  toUnsigned(): Long {\n    if (this.unsigned) return this;\n    return Long.fromBits(this.low, this.high, true);\n  }\n\n  /** Returns the bitwise XOR of this Long and the given one. */\n  xor(other: Long | number | string): Long {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  }\n\n  /** This is an alias of {@link Long.isZero} */\n  eqz(): boolean {\n    return this.isZero();\n  }\n\n  /** This is an alias of {@link Long.lessThanOrEqual} */\n  le(other: string | number | Long | Timestamp): boolean {\n    return this.lessThanOrEqual(other);\n  }\n\n  /*\n   ****************************************************************\n   *                  BSON SPECIFIC ADDITIONS                     *\n   ****************************************************************\n   */\n  toExtendedJSON(options?: EJSONOptions): number | LongExtended {\n    if (options && options.relaxed) return this.toNumber();\n    return { $numberLong: this.toString() };\n  }\n  static fromExtendedJSON(\n    doc: { $numberLong: string },\n    options?: EJSONOptions\n  ): number | Long | bigint {\n    const { useBigInt64 = false, relaxed = true } = { ...options };\n\n    if (doc.$numberLong.length > MAX_INT64_STRING_LENGTH) {\n      throw new BSONError('$numberLong string is too long');\n    }\n\n    if (!DECIMAL_REG_EX.test(doc.$numberLong)) {\n      throw new BSONError(`$numberLong string \"${doc.$numberLong}\" is in an invalid format`);\n    }\n\n    if (useBigInt64) {\n      /* eslint-disable no-restricted-globals -- Can use BigInt here as useBigInt64=true */\n      const bigIntResult = BigInt(doc.$numberLong);\n      return BigInt.asIntN(64, bigIntResult);\n      /* eslint-enable */\n    }\n\n    const longResult = Long.fromString(doc.$numberLong);\n    if (relaxed) {\n      return longResult.toNumber();\n    }\n    return longResult;\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new Long(\"${this.toString()}\"${this.unsigned ? ', true' : ''})`;\n  }\n}\n","import { BSONValue } from './bson_value';\nimport { BSONError } from './error';\nimport { Long } from './long';\nimport { isUint8Array } from './parser/utils';\nimport { ByteUtils } from './utils/byte_utils';\n\nconst PARSE_STRING_REGEXP = /^(\\+|-)?(\\d+|(\\d*\\.\\d*))?(E|e)?([-+])?(\\d+)?$/;\nconst PARSE_INF_REGEXP = /^(\\+|-)?(Infinity|inf)$/i;\nconst PARSE_NAN_REGEXP = /^(\\+|-)?NaN$/i;\n\nconst EXPONENT_MAX = 6111;\nconst EXPONENT_MIN = -6176;\nconst EXPONENT_BIAS = 6176;\nconst MAX_DIGITS = 34;\n\n// Nan value bits as 32 bit values (due to lack of longs)\nconst NAN_BUFFER = ByteUtils.fromNumberArray(\n  [\n    0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n  ].reverse()\n);\n// Infinity value bits 32 bit values (due to lack of longs)\nconst INF_NEGATIVE_BUFFER = ByteUtils.fromNumberArray(\n  [\n    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n  ].reverse()\n);\nconst INF_POSITIVE_BUFFER = ByteUtils.fromNumberArray(\n  [\n    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n  ].reverse()\n);\n\nconst EXPONENT_REGEX = /^([-+])?(\\d+)?$/;\n\n// Extract least significant 5 bits\nconst COMBINATION_MASK = 0x1f;\n// Extract least significant 14 bits\nconst EXPONENT_MASK = 0x3fff;\n// Value of combination field for Inf\nconst COMBINATION_INFINITY = 30;\n// Value of combination field for NaN\nconst COMBINATION_NAN = 31;\n\n// Detect if the value is a digit\nfunction isDigit(value: string): boolean {\n  return !isNaN(parseInt(value, 10));\n}\n\n// Divide two uint128 values\nfunction divideu128(value: { parts: [number, number, number, number] }) {\n  const DIVISOR = Long.fromNumber(1000 * 1000 * 1000);\n  let _rem = Long.fromNumber(0);\n\n  if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {\n    return { quotient: value, rem: _rem };\n  }\n\n  for (let i = 0; i <= 3; i++) {\n    // Adjust remainder to match value of next dividend\n    _rem = _rem.shiftLeft(32);\n    // Add the divided to _rem\n    _rem = _rem.add(new Long(value.parts[i], 0));\n    value.parts[i] = _rem.div(DIVISOR).low;\n    _rem = _rem.modulo(DIVISOR);\n  }\n\n  return { quotient: value, rem: _rem };\n}\n\n// Multiply two Long values and return the 128 bit value\nfunction multiply64x2(left: Long, right: Long): { high: Long; low: Long } {\n  if (!left && !right) {\n    return { high: Long.fromNumber(0), low: Long.fromNumber(0) };\n  }\n\n  const leftHigh = left.shiftRightUnsigned(32);\n  const leftLow = new Long(left.getLowBits(), 0);\n  const rightHigh = right.shiftRightUnsigned(32);\n  const rightLow = new Long(right.getLowBits(), 0);\n\n  let productHigh = leftHigh.multiply(rightHigh);\n  let productMid = leftHigh.multiply(rightLow);\n  const productMid2 = leftLow.multiply(rightHigh);\n  let productLow = leftLow.multiply(rightLow);\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productMid = new Long(productMid.getLowBits(), 0)\n    .add(productMid2)\n    .add(productLow.shiftRightUnsigned(32));\n\n  productHigh = productHigh.add(productMid.shiftRightUnsigned(32));\n  productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));\n\n  // Return the 128 bit result\n  return { high: productHigh, low: productLow };\n}\n\nfunction lessThan(left: Long, right: Long): boolean {\n  // Make values unsigned\n  const uhleft = left.high >>> 0;\n  const uhright = right.high >>> 0;\n\n  // Compare high bits first\n  if (uhleft < uhright) {\n    return true;\n  } else if (uhleft === uhright) {\n    const ulleft = left.low >>> 0;\n    const ulright = right.low >>> 0;\n    if (ulleft < ulright) return true;\n  }\n\n  return false;\n}\n\nfunction invalidErr(string: string, message: string) {\n  throw new BSONError(`\"${string}\" is not a valid Decimal128 string - ${message}`);\n}\n\n/** @public */\nexport interface Decimal128Extended {\n  $numberDecimal: string;\n}\n\n/**\n * A class representation of the BSON Decimal128 type.\n * @public\n * @category BSONType\n */\nexport class Decimal128 extends BSONValue {\n  get _bsontype(): 'Decimal128' {\n    return 'Decimal128';\n  }\n\n  readonly bytes!: Uint8Array;\n\n  /**\n   * @param bytes - a buffer containing the raw Decimal128 bytes in little endian order,\n   *                or a string representation as returned by .toString()\n   */\n  constructor(bytes: Uint8Array | string) {\n    super();\n    if (typeof bytes === 'string') {\n      this.bytes = Decimal128.fromString(bytes).bytes;\n    } else if (isUint8Array(bytes)) {\n      if (bytes.byteLength !== 16) {\n        throw new BSONError('Decimal128 must take a Buffer of 16 bytes');\n      }\n      this.bytes = bytes;\n    } else {\n      throw new BSONError('Decimal128 must take a Buffer or string');\n    }\n  }\n\n  /**\n   * Create a Decimal128 instance from a string representation\n   *\n   * @param representation - a numeric string representation.\n   */\n  static fromString(representation: string): Decimal128 {\n    // Parse state tracking\n    let isNegative = false;\n    let sawRadix = false;\n    let foundNonZero = false;\n\n    // Total number of significant digits (no leading or trailing zero)\n    let significantDigits = 0;\n    // Total number of significand digits read\n    let nDigitsRead = 0;\n    // Total number of digits (no leading zeros)\n    let nDigits = 0;\n    // The number of the digits after radix\n    let radixPosition = 0;\n    // The index of the first non-zero in *str*\n    let firstNonZero = 0;\n\n    // Digits Array\n    const digits = [0];\n    // The number of digits in digits\n    let nDigitsStored = 0;\n    // Insertion pointer for digits\n    let digitsInsert = 0;\n    // The index of the first non-zero digit\n    let firstDigit = 0;\n    // The index of the last digit\n    let lastDigit = 0;\n\n    // Exponent\n    let exponent = 0;\n    // loop index over array\n    let i = 0;\n    // The high 17 digits of the significand\n    let significandHigh = new Long(0, 0);\n    // The low 17 digits of the significand\n    let significandLow = new Long(0, 0);\n    // The biased exponent\n    let biasedExponent = 0;\n\n    // Read index\n    let index = 0;\n\n    // Naively prevent against REDOS attacks.\n    // TODO: implementing a custom parsing for this, or refactoring the regex would yield\n    //       further gains.\n    if (representation.length >= 7000) {\n      throw new BSONError('' + representation + ' not a valid Decimal128 string');\n    }\n\n    // Results\n    const stringMatch = representation.match(PARSE_STRING_REGEXP);\n    const infMatch = representation.match(PARSE_INF_REGEXP);\n    const nanMatch = representation.match(PARSE_NAN_REGEXP);\n\n    // Validate the string\n    if ((!stringMatch && !infMatch && !nanMatch) || representation.length === 0) {\n      throw new BSONError('' + representation + ' not a valid Decimal128 string');\n    }\n\n    if (stringMatch) {\n      // full_match = stringMatch[0]\n      // sign = stringMatch[1]\n\n      const unsignedNumber = stringMatch[2];\n      // stringMatch[3] is undefined if a whole number (ex \"1\", 12\")\n      // but defined if a number w/ decimal in it (ex \"1.0, 12.2\")\n\n      const e = stringMatch[4];\n      const expSign = stringMatch[5];\n      const expNumber = stringMatch[6];\n\n      // they provided e, but didn't give an exponent number. for ex \"1e\"\n      if (e && expNumber === undefined) invalidErr(representation, 'missing exponent power');\n\n      // they provided e, but didn't give a number before it. for ex \"e1\"\n      if (e && unsignedNumber === undefined) invalidErr(representation, 'missing exponent base');\n\n      if (e === undefined && (expSign || expNumber)) {\n        invalidErr(representation, 'missing e before exponent');\n      }\n    }\n\n    // Get the negative or positive sign\n    if (representation[index] === '+' || representation[index] === '-') {\n      isNegative = representation[index++] === '-';\n    }\n\n    // Check if user passed Infinity or NaN\n    if (!isDigit(representation[index]) && representation[index] !== '.') {\n      if (representation[index] === 'i' || representation[index] === 'I') {\n        return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n      } else if (representation[index] === 'N') {\n        return new Decimal128(NAN_BUFFER);\n      }\n    }\n\n    // Read all the digits\n    while (isDigit(representation[index]) || representation[index] === '.') {\n      if (representation[index] === '.') {\n        if (sawRadix) invalidErr(representation, 'contains multiple periods');\n\n        sawRadix = true;\n        index = index + 1;\n        continue;\n      }\n\n      if (nDigitsStored < 34) {\n        if (representation[index] !== '0' || foundNonZero) {\n          if (!foundNonZero) {\n            firstNonZero = nDigitsRead;\n          }\n\n          foundNonZero = true;\n\n          // Only store 34 digits\n          digits[digitsInsert++] = parseInt(representation[index], 10);\n          nDigitsStored = nDigitsStored + 1;\n        }\n      }\n\n      if (foundNonZero) nDigits = nDigits + 1;\n      if (sawRadix) radixPosition = radixPosition + 1;\n\n      nDigitsRead = nDigitsRead + 1;\n      index = index + 1;\n    }\n\n    if (sawRadix && !nDigitsRead)\n      throw new BSONError('' + representation + ' not a valid Decimal128 string');\n\n    // Read exponent if exists\n    if (representation[index] === 'e' || representation[index] === 'E') {\n      // Read exponent digits\n      const match = representation.substr(++index).match(EXPONENT_REGEX);\n\n      // No digits read\n      if (!match || !match[2]) return new Decimal128(NAN_BUFFER);\n\n      // Get exponent\n      exponent = parseInt(match[0], 10);\n\n      // Adjust the index\n      index = index + match[0].length;\n    }\n\n    // Return not a number\n    if (representation[index]) return new Decimal128(NAN_BUFFER);\n\n    // Done reading input\n    // Find first non-zero digit in digits\n    firstDigit = 0;\n\n    if (!nDigitsStored) {\n      firstDigit = 0;\n      lastDigit = 0;\n      digits[0] = 0;\n      nDigits = 1;\n      nDigitsStored = 1;\n      significantDigits = 0;\n    } else {\n      lastDigit = nDigitsStored - 1;\n      significantDigits = nDigits;\n      if (significantDigits !== 1) {\n        while (digits[firstNonZero + significantDigits - 1] === 0) {\n          significantDigits = significantDigits - 1;\n        }\n      }\n    }\n\n    // Normalization of exponent\n    // Correct exponent based on radix position, and shift significand as needed\n    // to represent user input\n\n    // Overflow prevention\n    if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {\n      exponent = EXPONENT_MIN;\n    } else {\n      exponent = exponent - radixPosition;\n    }\n\n    // Attempt to normalize the exponent\n    while (exponent > EXPONENT_MAX) {\n      // Shift exponent to significand and decrease\n      lastDigit = lastDigit + 1;\n\n      if (lastDigit - firstDigit > MAX_DIGITS) {\n        // Check if we have a zero then just hard clamp, otherwise fail\n        const digitsString = digits.join('');\n        if (digitsString.match(/^0+$/)) {\n          exponent = EXPONENT_MAX;\n          break;\n        }\n\n        invalidErr(representation, 'overflow');\n      }\n      exponent = exponent - 1;\n    }\n\n    while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {\n      // Shift last digit. can only do this if < significant digits than # stored.\n      if (lastDigit === 0 && significantDigits < nDigitsStored) {\n        exponent = EXPONENT_MIN;\n        significantDigits = 0;\n        break;\n      }\n\n      if (nDigitsStored < nDigits) {\n        // adjust to match digits not stored\n        nDigits = nDigits - 1;\n      } else {\n        // adjust to round\n        lastDigit = lastDigit - 1;\n      }\n\n      if (exponent < EXPONENT_MAX) {\n        exponent = exponent + 1;\n      } else {\n        // Check if we have a zero then just hard clamp, otherwise fail\n        const digitsString = digits.join('');\n        if (digitsString.match(/^0+$/)) {\n          exponent = EXPONENT_MAX;\n          break;\n        }\n        invalidErr(representation, 'overflow');\n      }\n    }\n\n    // Round\n    // We've normalized the exponent, but might still need to round.\n    if (lastDigit - firstDigit + 1 < significantDigits) {\n      let endOfString = nDigitsRead;\n\n      // If we have seen a radix point, 'string' is 1 longer than we have\n      // documented with ndigits_read, so inc the position of the first nonzero\n      // digit and the position that digits are read to.\n      if (sawRadix) {\n        firstNonZero = firstNonZero + 1;\n        endOfString = endOfString + 1;\n      }\n      // if negative, we need to increment again to account for - sign at start.\n      if (isNegative) {\n        firstNonZero = firstNonZero + 1;\n        endOfString = endOfString + 1;\n      }\n\n      const roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);\n      let roundBit = 0;\n\n      if (roundDigit >= 5) {\n        roundBit = 1;\n        if (roundDigit === 5) {\n          roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;\n          for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {\n            if (parseInt(representation[i], 10)) {\n              roundBit = 1;\n              break;\n            }\n          }\n        }\n      }\n\n      if (roundBit) {\n        let dIdx = lastDigit;\n\n        for (; dIdx >= 0; dIdx--) {\n          if (++digits[dIdx] > 9) {\n            digits[dIdx] = 0;\n\n            // overflowed most significant digit\n            if (dIdx === 0) {\n              if (exponent < EXPONENT_MAX) {\n                exponent = exponent + 1;\n                digits[dIdx] = 1;\n              } else {\n                return new Decimal128(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Encode significand\n    // The high 17 digits of the significand\n    significandHigh = Long.fromNumber(0);\n    // The low 17 digits of the significand\n    significandLow = Long.fromNumber(0);\n\n    // read a zero\n    if (significantDigits === 0) {\n      significandHigh = Long.fromNumber(0);\n      significandLow = Long.fromNumber(0);\n    } else if (lastDigit - firstDigit < 17) {\n      let dIdx = firstDigit;\n      significandLow = Long.fromNumber(digits[dIdx++]);\n      significandHigh = new Long(0, 0);\n\n      for (; dIdx <= lastDigit; dIdx++) {\n        significandLow = significandLow.multiply(Long.fromNumber(10));\n        significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n      }\n    } else {\n      let dIdx = firstDigit;\n      significandHigh = Long.fromNumber(digits[dIdx++]);\n\n      for (; dIdx <= lastDigit - 17; dIdx++) {\n        significandHigh = significandHigh.multiply(Long.fromNumber(10));\n        significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));\n      }\n\n      significandLow = Long.fromNumber(digits[dIdx++]);\n\n      for (; dIdx <= lastDigit; dIdx++) {\n        significandLow = significandLow.multiply(Long.fromNumber(10));\n        significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));\n      }\n    }\n\n    const significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));\n    significand.low = significand.low.add(significandLow);\n\n    if (lessThan(significand.low, significandLow)) {\n      significand.high = significand.high.add(Long.fromNumber(1));\n    }\n\n    // Biased exponent\n    biasedExponent = exponent + EXPONENT_BIAS;\n    const dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };\n\n    // Encode combination, exponent, and significand.\n    if (\n      significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))\n    ) {\n      // Encode '11' into bits 1 to 3\n      dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));\n      dec.high = dec.high.or(\n        Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47))\n      );\n      dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));\n    } else {\n      dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));\n      dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));\n    }\n\n    dec.low = significand.low;\n\n    // Encode sign\n    if (isNegative) {\n      dec.high = dec.high.or(Long.fromString('9223372036854775808'));\n    }\n\n    // Encode into a buffer\n    const buffer = ByteUtils.allocate(16);\n    index = 0;\n\n    // Encode the low 64 bits of the decimal\n    // Encode low bits\n    buffer[index++] = dec.low.low & 0xff;\n    buffer[index++] = (dec.low.low >> 8) & 0xff;\n    buffer[index++] = (dec.low.low >> 16) & 0xff;\n    buffer[index++] = (dec.low.low >> 24) & 0xff;\n    // Encode high bits\n    buffer[index++] = dec.low.high & 0xff;\n    buffer[index++] = (dec.low.high >> 8) & 0xff;\n    buffer[index++] = (dec.low.high >> 16) & 0xff;\n    buffer[index++] = (dec.low.high >> 24) & 0xff;\n\n    // Encode the high 64 bits of the decimal\n    // Encode low bits\n    buffer[index++] = dec.high.low & 0xff;\n    buffer[index++] = (dec.high.low >> 8) & 0xff;\n    buffer[index++] = (dec.high.low >> 16) & 0xff;\n    buffer[index++] = (dec.high.low >> 24) & 0xff;\n    // Encode high bits\n    buffer[index++] = dec.high.high & 0xff;\n    buffer[index++] = (dec.high.high >> 8) & 0xff;\n    buffer[index++] = (dec.high.high >> 16) & 0xff;\n    buffer[index++] = (dec.high.high >> 24) & 0xff;\n\n    // Return the new Decimal128\n    return new Decimal128(buffer);\n  }\n\n  /** Create a string representation of the raw Decimal128 value */\n  toString(): string {\n    // Note: bits in this routine are referred to starting at 0,\n    // from the sign bit, towards the coefficient.\n\n    // decoded biased exponent (14 bits)\n    let biased_exponent;\n    // the number of significand digits\n    let significand_digits = 0;\n    // the base-10 digits in the significand\n    const significand = new Array<number>(36);\n    for (let i = 0; i < significand.length; i++) significand[i] = 0;\n    // read pointer into significand\n    let index = 0;\n\n    // true if the number is zero\n    let is_zero = false;\n\n    // the most significant significand bits (50-46)\n    let significand_msb;\n    // temporary storage for significand decoding\n    let significand128: { parts: [number, number, number, number] } = { parts: [0, 0, 0, 0] };\n    // indexing variables\n    let j, k;\n\n    // Output string\n    const string: string[] = [];\n\n    // Unpack index\n    index = 0;\n\n    // Buffer reference\n    const buffer = this.bytes;\n\n    // Unpack the low 64bits into a long\n    // bits 96 - 127\n    const low =\n      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n    // bits 64 - 95\n    const midl =\n      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n    // Unpack the high 64bits into a long\n    // bits 32 - 63\n    const midh =\n      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n    // bits 0 - 31\n    const high =\n      buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n    // Unpack index\n    index = 0;\n\n    // Create the state of the decimal\n    const dec = {\n      low: new Long(low, midl),\n      high: new Long(midh, high)\n    };\n\n    if (dec.high.lessThan(Long.ZERO)) {\n      string.push('-');\n    }\n\n    // Decode combination field and exponent\n    // bits 1 - 5\n    const combination = (high >> 26) & COMBINATION_MASK;\n\n    if (combination >> 3 === 3) {\n      // Check for 'special' values\n      if (combination === COMBINATION_INFINITY) {\n        return string.join('') + 'Infinity';\n      } else if (combination === COMBINATION_NAN) {\n        return 'NaN';\n      } else {\n        biased_exponent = (high >> 15) & EXPONENT_MASK;\n        significand_msb = 0x08 + ((high >> 14) & 0x01);\n      }\n    } else {\n      significand_msb = (high >> 14) & 0x07;\n      biased_exponent = (high >> 17) & EXPONENT_MASK;\n    }\n\n    // unbiased exponent\n    const exponent = biased_exponent - EXPONENT_BIAS;\n\n    // Create string of significand digits\n\n    // Convert the 114-bit binary number represented by\n    // (significand_high, significand_low) to at most 34 decimal\n    // digits through modulo and division.\n    significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);\n    significand128.parts[1] = midh;\n    significand128.parts[2] = midl;\n    significand128.parts[3] = low;\n\n    if (\n      significand128.parts[0] === 0 &&\n      significand128.parts[1] === 0 &&\n      significand128.parts[2] === 0 &&\n      significand128.parts[3] === 0\n    ) {\n      is_zero = true;\n    } else {\n      for (k = 3; k >= 0; k--) {\n        let least_digits = 0;\n        // Perform the divide\n        const result = divideu128(significand128);\n        significand128 = result.quotient;\n        least_digits = result.rem.low;\n\n        // We now have the 9 least significant digits (in base 2).\n        // Convert and output to string.\n        if (!least_digits) continue;\n\n        for (j = 8; j >= 0; j--) {\n          // significand[k * 9 + j] = Math.round(least_digits % 10);\n          significand[k * 9 + j] = least_digits % 10;\n          // least_digits = Math.round(least_digits / 10);\n          least_digits = Math.floor(least_digits / 10);\n        }\n      }\n    }\n\n    // Output format options:\n    // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd\n    // Regular    - ddd.ddd\n\n    if (is_zero) {\n      significand_digits = 1;\n      significand[index] = 0;\n    } else {\n      significand_digits = 36;\n      while (!significand[index]) {\n        significand_digits = significand_digits - 1;\n        index = index + 1;\n      }\n    }\n\n    // the exponent if scientific notation is used\n    const scientific_exponent = significand_digits - 1 + exponent;\n\n    // The scientific exponent checks are dictated by the string conversion\n    // specification and are somewhat arbitrary cutoffs.\n    //\n    // We must check exponent > 0, because if this is the case, the number\n    // has trailing zeros.  However, we *cannot* output these trailing zeros,\n    // because doing so would change the precision of the value, and would\n    // change stored data if the string converted number is round tripped.\n    if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {\n      // Scientific format\n\n      // if there are too many significant digits, we should just be treating numbers\n      // as + or - 0 and using the non-scientific exponent (this is for the \"invalid\n      // representation should be treated as 0/-0\" spec cases in decimal128-1.json)\n      if (significand_digits > 34) {\n        string.push(`${0}`);\n        if (exponent > 0) string.push(`E+${exponent}`);\n        else if (exponent < 0) string.push(`E${exponent}`);\n        return string.join('');\n      }\n\n      string.push(`${significand[index++]}`);\n      significand_digits = significand_digits - 1;\n\n      if (significand_digits) {\n        string.push('.');\n      }\n\n      for (let i = 0; i < significand_digits; i++) {\n        string.push(`${significand[index++]}`);\n      }\n\n      // Exponent\n      string.push('E');\n      if (scientific_exponent > 0) {\n        string.push(`+${scientific_exponent}`);\n      } else {\n        string.push(`${scientific_exponent}`);\n      }\n    } else {\n      // Regular format with no decimal place\n      if (exponent >= 0) {\n        for (let i = 0; i < significand_digits; i++) {\n          string.push(`${significand[index++]}`);\n        }\n      } else {\n        let radix_position = significand_digits + exponent;\n\n        // non-zero digits before radix\n        if (radix_position > 0) {\n          for (let i = 0; i < radix_position; i++) {\n            string.push(`${significand[index++]}`);\n          }\n        } else {\n          string.push('0');\n        }\n\n        string.push('.');\n        // add leading zeros after radix\n        while (radix_position++ < 0) {\n          string.push('0');\n        }\n\n        for (let i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {\n          string.push(`${significand[index++]}`);\n        }\n      }\n    }\n\n    return string.join('');\n  }\n\n  toJSON(): Decimal128Extended {\n    return { $numberDecimal: this.toString() };\n  }\n\n  /** @internal */\n  toExtendedJSON(): Decimal128Extended {\n    return { $numberDecimal: this.toString() };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: Decimal128Extended): Decimal128 {\n    return Decimal128.fromString(doc.$numberDecimal);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new Decimal128(\"${this.toString()}\")`;\n  }\n}\n","import { BSONValue } from './bson_value';\nimport type { EJSONOptions } from './extended_json';\n\n/** @public */\nexport interface DoubleExtended {\n  $numberDouble: string;\n}\n\n/**\n * A class representation of the BSON Double type.\n * @public\n * @category BSONType\n */\nexport class Double extends BSONValue {\n  get _bsontype(): 'Double' {\n    return 'Double';\n  }\n\n  value!: number;\n  /**\n   * Create a Double type\n   *\n   * @param value - the number we want to represent as a double.\n   */\n  constructor(value: number) {\n    super();\n    if ((value as unknown) instanceof Number) {\n      value = value.valueOf();\n    }\n\n    this.value = +value;\n  }\n\n  /**\n   * Access the number value.\n   *\n   * @returns returns the wrapped double number.\n   */\n  valueOf(): number {\n    return this.value;\n  }\n\n  toJSON(): number {\n    return this.value;\n  }\n\n  toString(radix?: number): string {\n    return this.value.toString(radix);\n  }\n\n  /** @internal */\n  toExtendedJSON(options?: EJSONOptions): number | DoubleExtended {\n    if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {\n      return this.value;\n    }\n\n    if (Object.is(Math.sign(this.value), -0)) {\n      // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user\n      // explicitly provided `-0` then we need to ensure the sign makes it into the output\n      return { $numberDouble: '-0.0' };\n    }\n\n    return {\n      $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()\n    };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: DoubleExtended, options?: EJSONOptions): number | Double {\n    const doubleValue = parseFloat(doc.$numberDouble);\n    return options && options.relaxed ? doubleValue : new Double(doubleValue);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    const eJSON = this.toExtendedJSON() as DoubleExtended;\n    return `new Double(${eJSON.$numberDouble})`;\n  }\n}\n","import { BSONValue } from './bson_value';\nimport type { EJSONOptions } from './extended_json';\n\n/** @public */\nexport interface Int32Extended {\n  $numberInt: string;\n}\n\n/**\n * A class representation of a BSON Int32 type.\n * @public\n * @category BSONType\n */\nexport class Int32 extends BSONValue {\n  get _bsontype(): 'Int32' {\n    return 'Int32';\n  }\n\n  value!: number;\n  /**\n   * Create an Int32 type\n   *\n   * @param value - the number we want to represent as an int32.\n   */\n  constructor(value: number | string) {\n    super();\n    if ((value as unknown) instanceof Number) {\n      value = value.valueOf();\n    }\n\n    this.value = +value | 0;\n  }\n\n  /**\n   * Access the number value.\n   *\n   * @returns returns the wrapped int32 number.\n   */\n  valueOf(): number {\n    return this.value;\n  }\n\n  toString(radix?: number): string {\n    return this.value.toString(radix);\n  }\n\n  toJSON(): number {\n    return this.value;\n  }\n\n  /** @internal */\n  toExtendedJSON(options?: EJSONOptions): number | Int32Extended {\n    if (options && (options.relaxed || options.legacy)) return this.value;\n    return { $numberInt: this.value.toString() };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: Int32Extended, options?: EJSONOptions): number | Int32 {\n    return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new Int32(${this.valueOf()})`;\n  }\n}\n","import { BSONValue } from './bson_value';\n\n/** @public */\nexport interface MaxKeyExtended {\n  $maxKey: 1;\n}\n\n/**\n * A class representation of the BSON MaxKey type.\n * @public\n * @category BSONType\n */\nexport class MaxKey extends BSONValue {\n  get _bsontype(): 'MaxKey' {\n    return 'MaxKey';\n  }\n\n  /** @internal */\n  toExtendedJSON(): MaxKeyExtended {\n    return { $maxKey: 1 };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(): MaxKey {\n    return new MaxKey();\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return 'new MaxKey()';\n  }\n}\n","import { BSONValue } from './bson_value';\n\n/** @public */\nexport interface MinKeyExtended {\n  $minKey: 1;\n}\n\n/**\n * A class representation of the BSON MinKey type.\n * @public\n * @category BSONType\n */\nexport class MinKey extends BSONValue {\n  get _bsontype(): 'MinKey' {\n    return 'MinKey';\n  }\n\n  /** @internal */\n  toExtendedJSON(): MinKeyExtended {\n    return { $minKey: 1 };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(): MinKey {\n    return new MinKey();\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return 'new MinKey()';\n  }\n}\n","import { BSONValue } from './bson_value';\nimport { BSONError } from './error';\nimport { isUint8Array } from './parser/utils';\nimport { BSONDataView, ByteUtils } from './utils/byte_utils';\n\n// Regular expression that checks for hex value\nconst checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');\n\n// Unique sequence for the current process (initialized on first use)\nlet PROCESS_UNIQUE: Uint8Array | null = null;\n\n/** @public */\nexport interface ObjectIdLike {\n  id: string | Uint8Array;\n  __id?: string;\n  toHexString(): string;\n}\n\n/** @public */\nexport interface ObjectIdExtended {\n  $oid: string;\n}\n\nconst kId = Symbol('id');\n\n/**\n * A class representation of the BSON ObjectId type.\n * @public\n * @category BSONType\n */\nexport class ObjectId extends BSONValue {\n  get _bsontype(): 'ObjectId' {\n    return 'ObjectId';\n  }\n\n  /** @internal */\n  private static index = Math.floor(Math.random() * 0xffffff);\n\n  static cacheHexString: boolean;\n\n  /** ObjectId Bytes @internal */\n  private [kId]!: Uint8Array;\n  /** ObjectId hexString cache @internal */\n  private __id?: string;\n\n  /**\n   * Create an ObjectId type\n   *\n   * @param inputId - Can be a 24 character hex string, 12 byte binary Buffer, or a number.\n   */\n  constructor(inputId?: string | number | ObjectId | ObjectIdLike | Uint8Array) {\n    super();\n    // workingId is set based on type of input and whether valid id exists for the input\n    let workingId;\n    if (typeof inputId === 'object' && inputId && 'id' in inputId) {\n      if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {\n        throw new BSONError('Argument passed in must have an id that is of type string or Buffer');\n      }\n      if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {\n        workingId = ByteUtils.fromHex(inputId.toHexString());\n      } else {\n        workingId = inputId.id;\n      }\n    } else {\n      workingId = inputId;\n    }\n\n    // the following cases use workingId to construct an ObjectId\n    if (workingId == null || typeof workingId === 'number') {\n      // The most common use case (blank id, new objectId instance)\n      // Generate a new id\n      this[kId] = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);\n    } else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {\n      // If intstanceof matches we can escape calling ensure buffer in Node.js environments\n      this[kId] = ByteUtils.toLocalBufferType(workingId);\n    } else if (typeof workingId === 'string') {\n      if (workingId.length === 12) {\n        // TODO(NODE-4361): Remove string of length 12 support\n        const bytes = ByteUtils.fromUTF8(workingId);\n        if (bytes.byteLength === 12) {\n          this[kId] = bytes;\n        } else {\n          throw new BSONError('Argument passed in must be a string of 12 bytes');\n        }\n      } else if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {\n        this[kId] = ByteUtils.fromHex(workingId);\n      } else {\n        throw new BSONError(\n          'Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer'\n        );\n      }\n    } else {\n      throw new BSONError('Argument passed in does not match the accepted types');\n    }\n    // If we are caching the hex string\n    if (ObjectId.cacheHexString) {\n      this.__id = ByteUtils.toHex(this.id);\n    }\n  }\n\n  /**\n   * The ObjectId bytes\n   * @readonly\n   */\n  get id(): Uint8Array {\n    return this[kId];\n  }\n\n  set id(value: Uint8Array) {\n    this[kId] = value;\n    if (ObjectId.cacheHexString) {\n      this.__id = ByteUtils.toHex(value);\n    }\n  }\n\n  /** Returns the ObjectId id as a 24 character hex string representation */\n  toHexString(): string {\n    if (ObjectId.cacheHexString && this.__id) {\n      return this.__id;\n    }\n\n    const hexString = ByteUtils.toHex(this.id);\n\n    if (ObjectId.cacheHexString && !this.__id) {\n      this.__id = hexString;\n    }\n\n    return hexString;\n  }\n\n  /**\n   * Update the ObjectId index\n   * @internal\n   */\n  private static getInc(): number {\n    return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);\n  }\n\n  /**\n   * Generate a 12 byte id buffer used in ObjectId's\n   *\n   * @param time - pass in a second based timestamp.\n   */\n  static generate(time?: number): Uint8Array {\n    if ('number' !== typeof time) {\n      time = Math.floor(Date.now() / 1000);\n    }\n\n    const inc = ObjectId.getInc();\n    const buffer = ByteUtils.allocate(12);\n\n    // 4-byte timestamp\n    BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n\n    // set PROCESS_UNIQUE if yet not initialized\n    if (PROCESS_UNIQUE === null) {\n      PROCESS_UNIQUE = ByteUtils.randomBytes(5);\n    }\n\n    // 5-byte process unique\n    buffer[4] = PROCESS_UNIQUE[0];\n    buffer[5] = PROCESS_UNIQUE[1];\n    buffer[6] = PROCESS_UNIQUE[2];\n    buffer[7] = PROCESS_UNIQUE[3];\n    buffer[8] = PROCESS_UNIQUE[4];\n\n    // 3-byte counter\n    buffer[11] = inc & 0xff;\n    buffer[10] = (inc >> 8) & 0xff;\n    buffer[9] = (inc >> 16) & 0xff;\n\n    return buffer;\n  }\n\n  /**\n   * Converts the id into a 24 character hex string for printing, unless encoding is provided.\n   * @param encoding - hex or base64\n   */\n  toString(encoding?: 'hex' | 'base64'): string {\n    // Is the id a buffer then use the buffer toString method to return the format\n    if (encoding === 'base64') return ByteUtils.toBase64(this.id);\n    if (encoding === 'hex') return this.toHexString();\n    return this.toHexString();\n  }\n\n  /** Converts to its JSON the 24 character hex string representation. */\n  toJSON(): string {\n    return this.toHexString();\n  }\n\n  /**\n   * Compares the equality of this ObjectId with `otherID`.\n   *\n   * @param otherId - ObjectId instance to compare against.\n   */\n  equals(otherId: string | ObjectId | ObjectIdLike): boolean {\n    if (otherId === undefined || otherId === null) {\n      return false;\n    }\n\n    if (otherId instanceof ObjectId) {\n      return this[kId][11] === otherId[kId][11] && ByteUtils.equals(this[kId], otherId[kId]);\n    }\n\n    if (\n      typeof otherId === 'string' &&\n      ObjectId.isValid(otherId) &&\n      otherId.length === 12 &&\n      isUint8Array(this.id)\n    ) {\n      return ByteUtils.equals(this.id, ByteUtils.fromISO88591(otherId));\n    }\n\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) {\n      return otherId.toLowerCase() === this.toHexString();\n    }\n\n    if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) {\n      return ByteUtils.equals(ByteUtils.fromUTF8(otherId), this.id);\n    }\n\n    if (\n      typeof otherId === 'object' &&\n      'toHexString' in otherId &&\n      typeof otherId.toHexString === 'function'\n    ) {\n      const otherIdString = otherId.toHexString();\n      const thisIdString = this.toHexString().toLowerCase();\n      return typeof otherIdString === 'string' && otherIdString.toLowerCase() === thisIdString;\n    }\n\n    return false;\n  }\n\n  /** Returns the generation date (accurate up to the second) that this ID was generated. */\n  getTimestamp(): Date {\n    const timestamp = new Date();\n    const time = BSONDataView.fromUint8Array(this.id).getUint32(0, false);\n    timestamp.setTime(Math.floor(time) * 1000);\n    return timestamp;\n  }\n\n  /** @internal */\n  static createPk(): ObjectId {\n    return new ObjectId();\n  }\n\n  /**\n   * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.\n   *\n   * @param time - an integer number representing a number of seconds.\n   */\n  static createFromTime(time: number): ObjectId {\n    const buffer = ByteUtils.fromNumberArray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    // Encode time into first 4 bytes\n    BSONDataView.fromUint8Array(buffer).setUint32(0, time, false);\n    // Return the new objectId\n    return new ObjectId(buffer);\n  }\n\n  /**\n   * Creates an ObjectId from a hex string representation of an ObjectId.\n   *\n   * @param hexString - create a ObjectId from a passed in 24 character hexstring.\n   */\n  static createFromHexString(hexString: string): ObjectId {\n    if (hexString?.length !== 24) {\n      throw new BSONError('hex string must be 24 characters');\n    }\n\n    return new ObjectId(ByteUtils.fromHex(hexString));\n  }\n\n  /** Creates an ObjectId instance from a base64 string */\n  static createFromBase64(base64: string): ObjectId {\n    if (base64?.length !== 16) {\n      throw new BSONError('base64 string must be 16 characters');\n    }\n\n    return new ObjectId(ByteUtils.fromBase64(base64));\n  }\n\n  /**\n   * Checks if a value is a valid bson ObjectId\n   *\n   * @param id - ObjectId instance to validate.\n   */\n  static isValid(id: string | number | ObjectId | ObjectIdLike | Uint8Array): boolean {\n    if (id == null) return false;\n\n    try {\n      new ObjectId(id);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /** @internal */\n  toExtendedJSON(): ObjectIdExtended {\n    if (this.toHexString) return { $oid: this.toHexString() };\n    return { $oid: this.toString('hex') };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: ObjectIdExtended): ObjectId {\n    return new ObjectId(doc.$oid);\n  }\n\n  /**\n   * Converts to a string representation of this Id.\n   *\n   * @returns return the 24 character hex string representation.\n   * @internal\n   */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new ObjectId(\"${this.toHexString()}\")`;\n  }\n}\n","import { Binary } from '../binary';\nimport type { Document } from '../bson';\nimport { BSONVersionError } from '../error';\nimport * as constants from '../constants';\nimport { ByteUtils } from '../utils/byte_utils';\nimport { isAnyArrayBuffer, isDate, isRegExp } from './utils';\n\nexport function internalCalculateObjectSize(\n  object: Document,\n  serializeFunctions?: boolean,\n  ignoreUndefined?: boolean\n): number {\n  let totalLength = 4 + 1;\n\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; i++) {\n      totalLength += calculateElement(\n        i.toString(),\n        object[i],\n        serializeFunctions,\n        true,\n        ignoreUndefined\n      );\n    }\n  } else {\n    // If we have toBSON defined, override the current object\n\n    if (typeof object?.toBSON === 'function') {\n      object = object.toBSON();\n    }\n\n    // Calculate size\n    for (const key of Object.keys(object)) {\n      totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);\n    }\n  }\n\n  return totalLength;\n}\n\n/** @internal */\nfunction calculateElement(\n  name: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  serializeFunctions = false,\n  isArray = false,\n  ignoreUndefined = false\n) {\n  // If we have toBSON defined, override the current object\n  if (typeof value?.toBSON === 'function') {\n    value = value.toBSON();\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return 1 + ByteUtils.utf8ByteLength(name) + 1 + 4 + ByteUtils.utf8ByteLength(value) + 1;\n    case 'number':\n      if (\n        Math.floor(value) === value &&\n        value >= constants.JS_INT_MIN &&\n        value <= constants.JS_INT_MAX\n      ) {\n        if (value >= constants.BSON_INT32_MIN && value <= constants.BSON_INT32_MAX) {\n          // 32 bit\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (4 + 1);\n        } else {\n          return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n        }\n      } else {\n        // 64 bit\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n      }\n    case 'undefined':\n      if (isArray || !ignoreUndefined)\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n      return 0;\n    case 'boolean':\n      return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 1);\n    case 'object':\n      if (\n        value != null &&\n        typeof value._bsontype === 'string' &&\n        value[Symbol.for('@@mdb.bson.version')] !== constants.BSON_MAJOR_VERSION\n      ) {\n        throw new BSONVersionError();\n      } else if (value == null || value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + 1;\n      } else if (value._bsontype === 'ObjectId') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (12 + 1);\n      } else if (value instanceof Date || isDate(value)) {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n      } else if (\n        ArrayBuffer.isView(value) ||\n        value instanceof ArrayBuffer ||\n        isAnyArrayBuffer(value)\n      ) {\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (1 + 4 + 1) + value.byteLength\n        );\n      } else if (\n        value._bsontype === 'Long' ||\n        value._bsontype === 'Double' ||\n        value._bsontype === 'Timestamp'\n      ) {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (8 + 1);\n      } else if (value._bsontype === 'Decimal128') {\n        return (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (16 + 1);\n      } else if (value._bsontype === 'Code') {\n        // Calculate size depending on the availability of a scope\n        if (value.scope != null && Object.keys(value.scope).length > 0) {\n          return (\n            (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n            1 +\n            4 +\n            4 +\n            ByteUtils.utf8ByteLength(value.code.toString()) +\n            1 +\n            internalCalculateObjectSize(value.scope, serializeFunctions, ignoreUndefined)\n          );\n        } else {\n          return (\n            (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n            1 +\n            4 +\n            ByteUtils.utf8ByteLength(value.code.toString()) +\n            1\n          );\n        }\n      } else if (value._bsontype === 'Binary') {\n        const binary: Binary = value;\n        // Check what kind of subtype we have\n        if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n          return (\n            (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n            (binary.position + 1 + 4 + 1 + 4)\n          );\n        } else {\n          return (\n            (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) + (binary.position + 1 + 4 + 1)\n          );\n        }\n      } else if (value._bsontype === 'Symbol') {\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n          ByteUtils.utf8ByteLength(value.value) +\n          4 +\n          1 +\n          1\n        );\n      } else if (value._bsontype === 'DBRef') {\n        // Set up correct object for serialization\n        const ordered_values = Object.assign(\n          {\n            $ref: value.collection,\n            $id: value.oid\n          },\n          value.fields\n        );\n\n        // Add db reference if it exists\n        if (value.db != null) {\n          ordered_values['$db'] = value.db;\n        }\n\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n          1 +\n          internalCalculateObjectSize(ordered_values, serializeFunctions, ignoreUndefined)\n        );\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n          1 +\n          ByteUtils.utf8ByteLength(value.source) +\n          1 +\n          (value.global ? 1 : 0) +\n          (value.ignoreCase ? 1 : 0) +\n          (value.multiline ? 1 : 0) +\n          1\n        );\n      } else if (value._bsontype === 'BSONRegExp') {\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n          1 +\n          ByteUtils.utf8ByteLength(value.pattern) +\n          1 +\n          ByteUtils.utf8ByteLength(value.options) +\n          1\n        );\n      } else {\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n          internalCalculateObjectSize(value, serializeFunctions, ignoreUndefined) +\n          1\n        );\n      }\n    case 'function':\n      if (serializeFunctions) {\n        return (\n          (name != null ? ByteUtils.utf8ByteLength(name) + 1 : 0) +\n          1 +\n          4 +\n          ByteUtils.utf8ByteLength(value.toString()) +\n          1\n        );\n      }\n  }\n\n  return 0;\n}\n","import { BSONValue } from './bson_value';\nimport { BSONError } from './error';\nimport type { EJSONOptions } from './extended_json';\n\nfunction alphabetize(str: string): string {\n  return str.split('').sort().join('');\n}\n\n/** @public */\nexport interface BSONRegExpExtendedLegacy {\n  $regex: string | BSONRegExp;\n  $options: string;\n}\n\n/** @public */\nexport interface BSONRegExpExtended {\n  $regularExpression: {\n    pattern: string;\n    options: string;\n  };\n}\n\n/**\n * A class representation of the BSON RegExp type.\n * @public\n * @category BSONType\n */\nexport class BSONRegExp extends BSONValue {\n  get _bsontype(): 'BSONRegExp' {\n    return 'BSONRegExp';\n  }\n\n  pattern!: string;\n  options!: string;\n  /**\n   * @param pattern - The regular expression pattern to match\n   * @param options - The regular expression options\n   */\n  constructor(pattern: string, options?: string) {\n    super();\n    this.pattern = pattern;\n    this.options = alphabetize(options ?? '');\n\n    if (this.pattern.indexOf('\\x00') !== -1) {\n      throw new BSONError(\n        `BSON Regex patterns cannot contain null bytes, found: ${JSON.stringify(this.pattern)}`\n      );\n    }\n    if (this.options.indexOf('\\x00') !== -1) {\n      throw new BSONError(\n        `BSON Regex options cannot contain null bytes, found: ${JSON.stringify(this.options)}`\n      );\n    }\n\n    // Validate options\n    for (let i = 0; i < this.options.length; i++) {\n      if (\n        !(\n          this.options[i] === 'i' ||\n          this.options[i] === 'm' ||\n          this.options[i] === 'x' ||\n          this.options[i] === 'l' ||\n          this.options[i] === 's' ||\n          this.options[i] === 'u'\n        )\n      ) {\n        throw new BSONError(`The regular expression option [${this.options[i]}] is not supported`);\n      }\n    }\n  }\n\n  static parseOptions(options?: string): string {\n    return options ? options.split('').sort().join('') : '';\n  }\n\n  /** @internal */\n  toExtendedJSON(options?: EJSONOptions): BSONRegExpExtendedLegacy | BSONRegExpExtended {\n    options = options || {};\n    if (options.legacy) {\n      return { $regex: this.pattern, $options: this.options };\n    }\n    return { $regularExpression: { pattern: this.pattern, options: this.options } };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: BSONRegExpExtendedLegacy | BSONRegExpExtended): BSONRegExp {\n    if ('$regex' in doc) {\n      if (typeof doc.$regex !== 'string') {\n        // This is for $regex query operators that have extended json values.\n        if (doc.$regex._bsontype === 'BSONRegExp') {\n          return doc as unknown as BSONRegExp;\n        }\n      } else {\n        return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));\n      }\n    }\n    if ('$regularExpression' in doc) {\n      return new BSONRegExp(\n        doc.$regularExpression.pattern,\n        BSONRegExp.parseOptions(doc.$regularExpression.options)\n      );\n    }\n    throw new BSONError(`Unexpected BSONRegExp EJSON object form: ${JSON.stringify(doc)}`);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new BSONRegExp(${JSON.stringify(this.pattern)}, ${JSON.stringify(this.options)})`;\n  }\n}\n","import { BSONValue } from './bson_value';\n\n/** @public */\nexport interface BSONSymbolExtended {\n  $symbol: string;\n}\n\n/**\n * A class representation of the BSON Symbol type.\n * @public\n * @category BSONType\n */\nexport class BSONSymbol extends BSONValue {\n  get _bsontype(): 'BSONSymbol' {\n    return 'BSONSymbol';\n  }\n\n  value!: string;\n  /**\n   * @param value - the string representing the symbol.\n   */\n  constructor(value: string) {\n    super();\n    this.value = value;\n  }\n\n  /** Access the wrapped string value. */\n  valueOf(): string {\n    return this.value;\n  }\n\n  toString(): string {\n    return this.value;\n  }\n\n  inspect(): string {\n    return `new BSONSymbol(\"${this.value}\")`;\n  }\n\n  toJSON(): string {\n    return this.value;\n  }\n\n  /** @internal */\n  toExtendedJSON(): BSONSymbolExtended {\n    return { $symbol: this.value };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: BSONSymbolExtended): BSONSymbol {\n    return new BSONSymbol(doc.$symbol);\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n}\n","import { BSONError } from './error';\nimport type { Int32 } from './int_32';\nimport { Long } from './long';\n\n/** @public */\nexport type TimestampOverrides = '_bsontype' | 'toExtendedJSON' | 'fromExtendedJSON' | 'inspect';\n/** @public */\nexport type LongWithoutOverrides = new (\n  low: unknown,\n  high?: number | boolean,\n  unsigned?: boolean\n) => {\n  [P in Exclude<keyof Long, TimestampOverrides>]: Long[P];\n};\n/** @public */\nexport const LongWithoutOverridesClass: LongWithoutOverrides =\n  Long as unknown as LongWithoutOverrides;\n\n/** @public */\nexport interface TimestampExtended {\n  $timestamp: {\n    t: number;\n    i: number;\n  };\n}\n\n/**\n * @public\n * @category BSONType\n */\nexport class Timestamp extends LongWithoutOverridesClass {\n  get _bsontype(): 'Timestamp' {\n    return 'Timestamp';\n  }\n\n  static readonly MAX_VALUE = Long.MAX_UNSIGNED_VALUE;\n\n  /**\n   * @param int - A 64-bit bigint representing the Timestamp.\n   */\n  constructor(int: bigint);\n  /**\n   * @param long - A 64-bit Long representing the Timestamp.\n   */\n  constructor(long: Long);\n  /**\n   * @param value - A pair of two values indicating timestamp and increment.\n   */\n  constructor(value: { t: number; i: number });\n  constructor(low?: bigint | Long | { t: number | Int32; i: number | Int32 }) {\n    if (low == null) {\n      super(0, 0, true);\n    } else if (typeof low === 'bigint') {\n      super(low, true);\n    } else if (Long.isLong(low)) {\n      super(low.low, low.high, true);\n    } else if (typeof low === 'object' && 't' in low && 'i' in low) {\n      if (typeof low.t !== 'number' && (typeof low.t !== 'object' || low.t._bsontype !== 'Int32')) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide t as a number');\n      }\n      if (typeof low.i !== 'number' && (typeof low.i !== 'object' || low.i._bsontype !== 'Int32')) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide i as a number');\n      }\n      const t = Number(low.t);\n      const i = Number(low.i);\n      if (t < 0 || Number.isNaN(t)) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide a positive t');\n      }\n      if (i < 0 || Number.isNaN(i)) {\n        throw new BSONError('Timestamp constructed from { t, i } must provide a positive i');\n      }\n      if (t > 0xffff_ffff) {\n        throw new BSONError(\n          'Timestamp constructed from { t, i } must provide t equal or less than uint32 max'\n        );\n      }\n      if (i > 0xffff_ffff) {\n        throw new BSONError(\n          'Timestamp constructed from { t, i } must provide i equal or less than uint32 max'\n        );\n      }\n\n      super(i, t, true);\n    } else {\n      throw new BSONError(\n        'A Timestamp can only be constructed with: bigint, Long, or { t: number; i: number }'\n      );\n    }\n  }\n\n  toJSON(): { $timestamp: string } {\n    return {\n      $timestamp: this.toString()\n    };\n  }\n\n  /** Returns a Timestamp represented by the given (32-bit) integer value. */\n  static fromInt(value: number): Timestamp {\n    return new Timestamp(Long.fromInt(value, true));\n  }\n\n  /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */\n  static fromNumber(value: number): Timestamp {\n    return new Timestamp(Long.fromNumber(value, true));\n  }\n\n  /**\n   * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.\n   *\n   * @param lowBits - the low 32-bits.\n   * @param highBits - the high 32-bits.\n   */\n  static fromBits(lowBits: number, highBits: number): Timestamp {\n    return new Timestamp({ i: lowBits, t: highBits });\n  }\n\n  /**\n   * Returns a Timestamp from the given string, optionally using the given radix.\n   *\n   * @param str - the textual representation of the Timestamp.\n   * @param optRadix - the radix in which the text is written.\n   */\n  static fromString(str: string, optRadix: number): Timestamp {\n    return new Timestamp(Long.fromString(str, true, optRadix));\n  }\n\n  /** @internal */\n  toExtendedJSON(): TimestampExtended {\n    return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };\n  }\n\n  /** @internal */\n  static fromExtendedJSON(doc: TimestampExtended): Timestamp {\n    // The Long check is necessary because extended JSON has different behavior given the size of the input number\n    const i = Long.isLong(doc.$timestamp.i)\n      ? doc.$timestamp.i.getLowBitsUnsigned() // Need to fetch the least significant 32 bits\n      : doc.$timestamp.i;\n    const t = Long.isLong(doc.$timestamp.t)\n      ? doc.$timestamp.t.getLowBitsUnsigned() // Need to fetch the least significant 32 bits\n      : doc.$timestamp.t;\n    return new Timestamp({ t, i });\n  }\n\n  /** @internal */\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new Timestamp({ t: ${this.getHighBits()}, i: ${this.getLowBits()} })`;\n  }\n}\n","const FIRST_BIT = 0x80;\nconst FIRST_TWO_BITS = 0xc0;\nconst FIRST_THREE_BITS = 0xe0;\nconst FIRST_FOUR_BITS = 0xf0;\nconst FIRST_FIVE_BITS = 0xf8;\n\nconst TWO_BIT_CHAR = 0xc0;\nconst THREE_BIT_CHAR = 0xe0;\nconst FOUR_BIT_CHAR = 0xf0;\nconst CONTINUING_CHAR = 0x80;\n\n/**\n * Determines if the passed in bytes are valid utf8\n * @param bytes - An array of 8-bit bytes. Must be indexable and have length property\n * @param start - The index to start validating\n * @param end - The index to end validating\n */\nexport function validateUtf8(\n  bytes: { [index: number]: number },\n  start: number,\n  end: number\n): boolean {\n  let continuation = 0;\n\n  for (let i = start; i < end; i += 1) {\n    const byte = bytes[i];\n\n    if (continuation) {\n      if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {\n        return false;\n      }\n      continuation -= 1;\n    } else if (byte & FIRST_BIT) {\n      if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {\n        continuation = 1;\n      } else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {\n        continuation = 2;\n      } else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {\n        continuation = 3;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return !continuation;\n}\n","import { Binary, UUID } from '../binary';\nimport type { Document } from '../bson';\nimport { Code } from '../code';\nimport * as constants from '../constants';\nimport { DBRef, type DBRefLike, isDBRefLike } from '../db_ref';\nimport { Decimal128 } from '../decimal128';\nimport { Double } from '../double';\nimport { BSONError } from '../error';\nimport { Int32 } from '../int_32';\nimport { Long } from '../long';\nimport { MaxKey } from '../max_key';\nimport { MinKey } from '../min_key';\nimport { ObjectId } from '../objectid';\nimport { BSONRegExp } from '../regexp';\nimport { BSONSymbol } from '../symbol';\nimport { Timestamp } from '../timestamp';\nimport { BSONDataView, ByteUtils } from '../utils/byte_utils';\nimport { validateUtf8 } from '../validate_utf8';\n\n/** @public */\nexport interface DeserializeOptions {\n  /**\n   * when deserializing a Long return as a BigInt.\n   * @defaultValue `false`\n   */\n  useBigInt64?: boolean;\n  /**\n   * when deserializing a Long will fit it into a Number if it's smaller than 53 bits.\n   * @defaultValue `true`\n   */\n  promoteLongs?: boolean;\n  /**\n   * when deserializing a Binary will return it as a node.js Buffer instance.\n   * @defaultValue `false`\n   */\n  promoteBuffers?: boolean;\n  /**\n   * when deserializing will promote BSON values to their Node.js closest equivalent types.\n   * @defaultValue `true`\n   */\n  promoteValues?: boolean;\n  /**\n   * allow to specify if there what fields we wish to return as unserialized raw buffer.\n   * @defaultValue `null`\n   */\n  fieldsAsRaw?: Document;\n  /**\n   * return BSON regular expressions as BSONRegExp instances.\n   * @defaultValue `false`\n   */\n  bsonRegExp?: boolean;\n  /**\n   * allows the buffer to be larger than the parsed BSON object.\n   * @defaultValue `false`\n   */\n  allowObjectSmallerThanBufferSize?: boolean;\n  /**\n   * Offset into buffer to begin reading document from\n   * @defaultValue `0`\n   */\n  index?: number;\n\n  raw?: boolean;\n  /** Allows for opt-out utf-8 validation for all keys or\n   * specified keys. Must be all true or all false.\n   *\n   * @example\n   * ```js\n   * // disables validation on all keys\n   *  validation: { utf8: false }\n   *\n   * // enables validation only on specified keys a, b, and c\n   *  validation: { utf8: { a: true, b: true, c: true } }\n   *\n   *  // disables validation only on specified keys a, b\n   *  validation: { utf8: { a: false, b: false } }\n   * ```\n   */\n  validation?: { utf8: boolean | Record<string, true> | Record<string, false> };\n}\n\n// Internal long versions\nconst JS_INT_MAX_LONG = Long.fromNumber(constants.JS_INT_MAX);\nconst JS_INT_MIN_LONG = Long.fromNumber(constants.JS_INT_MIN);\n\nexport function internalDeserialize(\n  buffer: Uint8Array,\n  options: DeserializeOptions,\n  isArray?: boolean\n): Document {\n  options = options == null ? {} : options;\n  const index = options && options.index ? options.index : 0;\n  // Read the document size\n  const size =\n    buffer[index] |\n    (buffer[index + 1] << 8) |\n    (buffer[index + 2] << 16) |\n    (buffer[index + 3] << 24);\n\n  if (size < 5) {\n    throw new BSONError(`bson size must be >= 5, is ${size}`);\n  }\n\n  if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {\n    throw new BSONError(`buffer length ${buffer.length} must be >= bson size ${size}`);\n  }\n\n  if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {\n    throw new BSONError(`buffer length ${buffer.length} must === bson size ${size}`);\n  }\n\n  if (size + index > buffer.byteLength) {\n    throw new BSONError(\n      `(bson size ${size} + options.index ${index} must be <= buffer length ${buffer.byteLength})`\n    );\n  }\n\n  // Illegal end value\n  if (buffer[index + size - 1] !== 0) {\n    throw new BSONError(\n      \"One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00\"\n    );\n  }\n\n  // Start deserialization\n  return deserializeObject(buffer, index, options, isArray);\n}\n\nconst allowedDBRefKeys = /^\\$ref$|^\\$id$|^\\$db$/;\n\nfunction deserializeObject(\n  buffer: Uint8Array,\n  index: number,\n  options: DeserializeOptions,\n  isArray = false\n) {\n  const fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];\n\n  // Return raw bson buffer instead of parsing it\n  const raw = options['raw'] == null ? false : options['raw'];\n\n  // Return BSONRegExp objects instead of native regular expressions\n  const bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;\n\n  // Controls the promotion of values vs wrapper classes\n  const promoteBuffers = options.promoteBuffers ?? false;\n  const promoteLongs = options.promoteLongs ?? true;\n  const promoteValues = options.promoteValues ?? true;\n  const useBigInt64 = options.useBigInt64 ?? false;\n\n  if (useBigInt64 && !promoteValues) {\n    throw new BSONError('Must either request bigint or Long for int64 deserialization');\n  }\n\n  if (useBigInt64 && !promoteLongs) {\n    throw new BSONError('Must either request bigint or Long for int64 deserialization');\n  }\n\n  // Ensures default validation option if none given\n  const validation = options.validation == null ? { utf8: true } : options.validation;\n\n  // Shows if global utf-8 validation is enabled or disabled\n  let globalUTFValidation = true;\n  // Reflects utf-8 validation setting regardless of global or specific key validation\n  let validationSetting: boolean;\n  // Set of keys either to enable or disable validation on\n  const utf8KeysSet = new Set();\n\n  // Check for boolean uniformity and empty validation option\n  const utf8ValidatedKeys = validation.utf8;\n  if (typeof utf8ValidatedKeys === 'boolean') {\n    validationSetting = utf8ValidatedKeys;\n  } else {\n    globalUTFValidation = false;\n    const utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function (key) {\n      return utf8ValidatedKeys[key];\n    });\n    if (utf8ValidationValues.length === 0) {\n      throw new BSONError('UTF-8 validation setting cannot be empty');\n    }\n    if (typeof utf8ValidationValues[0] !== 'boolean') {\n      throw new BSONError('Invalid UTF-8 validation option, must specify boolean values');\n    }\n    validationSetting = utf8ValidationValues[0];\n    // Ensures boolean uniformity in utf-8 validation (all true or all false)\n    if (!utf8ValidationValues.every(item => item === validationSetting)) {\n      throw new BSONError('Invalid UTF-8 validation option - keys must be all true or all false');\n    }\n  }\n\n  // Add keys to set that will either be validated or not based on validationSetting\n  if (!globalUTFValidation) {\n    for (const key of Object.keys(utf8ValidatedKeys)) {\n      utf8KeysSet.add(key);\n    }\n  }\n\n  // Set the start index\n  const startIndex = index;\n\n  // Validate that we have at least 4 bytes of buffer\n  if (buffer.length < 5) throw new BSONError('corrupt bson message < 5 bytes long');\n\n  // Read the document size\n  const size =\n    buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);\n\n  // Ensure buffer is valid size\n  if (size < 5 || size > buffer.length) throw new BSONError('corrupt bson message');\n\n  // Create holding object\n  const object: Document = isArray ? [] : {};\n  // Used for arrays to skip having to perform utf8 decoding\n  let arrayIndex = 0;\n  const done = false;\n\n  let isPossibleDBRef = isArray ? false : null;\n\n  // While we have more left data left keep parsing\n  const dataview = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  while (!done) {\n    // Read the type\n    const elementType = buffer[index++];\n\n    // If we get a zero it's the last byte, exit\n    if (elementType === 0) break;\n\n    // Get the start search index\n    let i = index;\n    // Locate the end of the c string\n    while (buffer[i] !== 0x00 && i < buffer.length) {\n      i++;\n    }\n\n    // If are at the end of the buffer there is a problem with the document\n    if (i >= buffer.byteLength) throw new BSONError('Bad BSON Document: illegal CString');\n\n    // Represents the key\n    const name = isArray ? arrayIndex++ : ByteUtils.toUTF8(buffer, index, i);\n\n    // shouldValidateKey is true if the key should be validated, false otherwise\n    let shouldValidateKey = true;\n    if (globalUTFValidation || utf8KeysSet.has(name)) {\n      shouldValidateKey = validationSetting;\n    } else {\n      shouldValidateKey = !validationSetting;\n    }\n\n    if (isPossibleDBRef !== false && (name as string)[0] === '$') {\n      isPossibleDBRef = allowedDBRefKeys.test(name as string);\n    }\n    let value;\n\n    index = i + 1;\n\n    if (elementType === constants.BSON_DATA_STRING) {\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      ) {\n        throw new BSONError('bad string length in bson');\n      }\n      value = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n      index = index + stringSize;\n    } else if (elementType === constants.BSON_DATA_OID) {\n      const oid = ByteUtils.allocate(12);\n      oid.set(buffer.subarray(index, index + 12));\n      value = new ObjectId(oid);\n      index = index + 12;\n    } else if (elementType === constants.BSON_DATA_INT && promoteValues === false) {\n      value = new Int32(\n        buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24)\n      );\n    } else if (elementType === constants.BSON_DATA_INT) {\n      value =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n    } else if (elementType === constants.BSON_DATA_NUMBER && promoteValues === false) {\n      value = new Double(dataview.getFloat64(index, true));\n      index = index + 8;\n    } else if (elementType === constants.BSON_DATA_NUMBER) {\n      value = dataview.getFloat64(index, true);\n      index = index + 8;\n    } else if (elementType === constants.BSON_DATA_DATE) {\n      const lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      value = new Date(new Long(lowBits, highBits).toNumber());\n    } else if (elementType === constants.BSON_DATA_BOOLEAN) {\n      if (buffer[index] !== 0 && buffer[index] !== 1)\n        throw new BSONError('illegal boolean type value');\n      value = buffer[index++] === 1;\n    } else if (elementType === constants.BSON_DATA_OBJECT) {\n      const _index = index;\n      const objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      if (objectSize <= 0 || objectSize > buffer.length - index)\n        throw new BSONError('bad embedded document length in bson');\n\n      // We have a raw value\n      if (raw) {\n        value = buffer.slice(index, index + objectSize);\n      } else {\n        let objectOptions = options;\n        if (!globalUTFValidation) {\n          objectOptions = { ...options, validation: { utf8: shouldValidateKey } };\n        }\n        value = deserializeObject(buffer, _index, objectOptions, false);\n      }\n\n      index = index + objectSize;\n    } else if (elementType === constants.BSON_DATA_ARRAY) {\n      const _index = index;\n      const objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      let arrayOptions: DeserializeOptions = options;\n\n      // Stop index\n      const stopIndex = index + objectSize;\n\n      // All elements of array to be returned as raw bson\n      if (fieldsAsRaw && fieldsAsRaw[name]) {\n        arrayOptions = { ...options, raw: true };\n      }\n\n      if (!globalUTFValidation) {\n        arrayOptions = { ...arrayOptions, validation: { utf8: shouldValidateKey } };\n      }\n      value = deserializeObject(buffer, _index, arrayOptions, true);\n      index = index + objectSize;\n\n      if (buffer[index - 1] !== 0) throw new BSONError('invalid array terminator byte');\n      if (index !== stopIndex) throw new BSONError('corrupted array bson');\n    } else if (elementType === constants.BSON_DATA_UNDEFINED) {\n      value = undefined;\n    } else if (elementType === constants.BSON_DATA_NULL) {\n      value = null;\n    } else if (elementType === constants.BSON_DATA_LONG) {\n      // Unpack the low and high bits\n      const dataview = BSONDataView.fromUint8Array(buffer.subarray(index, index + 8));\n\n      const lowBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const highBits =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const long = new Long(lowBits, highBits);\n      if (useBigInt64) {\n        value = dataview.getBigInt64(0, true);\n      } else if (promoteLongs && promoteValues === true) {\n        // Promote the long if possible\n        value =\n          long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)\n            ? long.toNumber()\n            : long;\n      } else {\n        value = long;\n      }\n    } else if (elementType === constants.BSON_DATA_DECIMAL128) {\n      // Buffer to contain the decimal bytes\n      const bytes = ByteUtils.allocate(16);\n      // Copy the next 16 bytes into the bytes buffer\n      bytes.set(buffer.subarray(index, index + 16), 0);\n      // Update index\n      index = index + 16;\n      // Assign the new Decimal128 value\n      value = new Decimal128(bytes);\n    } else if (elementType === constants.BSON_DATA_BINARY) {\n      let binarySize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      const totalBinarySize = binarySize;\n      const subType = buffer[index++];\n\n      // Did we have a negative binary size, throw\n      if (binarySize < 0) throw new BSONError('Negative binary type element size found');\n\n      // Is the length longer than the document\n      if (binarySize > buffer.byteLength)\n        throw new BSONError('Binary type size larger than document size');\n\n      // Decode as raw Buffer object if options specifies it\n      if (buffer['slice'] != null) {\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new BSONError('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n        }\n\n        if (promoteBuffers && promoteValues) {\n          value = ByteUtils.toLocalBufferType(buffer.slice(index, index + binarySize));\n        } else {\n          value = new Binary(buffer.slice(index, index + binarySize), subType);\n          if (subType === constants.BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n            value = value.toUUID();\n          }\n        }\n      } else {\n        const _buffer = ByteUtils.allocate(binarySize);\n        // If we have subtype 2 skip the 4 bytes for the size\n        if (subType === Binary.SUBTYPE_BYTE_ARRAY) {\n          binarySize =\n            buffer[index++] |\n            (buffer[index++] << 8) |\n            (buffer[index++] << 16) |\n            (buffer[index++] << 24);\n          if (binarySize < 0)\n            throw new BSONError('Negative binary type element size found for subtype 0x02');\n          if (binarySize > totalBinarySize - 4)\n            throw new BSONError('Binary type with subtype 0x02 contains too long binary size');\n          if (binarySize < totalBinarySize - 4)\n            throw new BSONError('Binary type with subtype 0x02 contains too short binary size');\n        }\n\n        // Copy the data\n        for (i = 0; i < binarySize; i++) {\n          _buffer[i] = buffer[index + i];\n        }\n\n        if (promoteBuffers && promoteValues) {\n          value = _buffer;\n        } else {\n          value = new Binary(buffer.slice(index, index + binarySize), subType);\n          if (subType === constants.BSON_BINARY_SUBTYPE_UUID_NEW && UUID.isValid(value)) {\n            value = value.toUUID();\n          }\n        }\n      }\n\n      // Update the index\n      index = index + binarySize;\n    } else if (elementType === constants.BSON_DATA_REGEXP && bsonRegExp === false) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      // Return the C string\n      const source = ByteUtils.toUTF8(buffer, index, i);\n      // Create the regexp\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      // Return the C string\n      const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n\n      // For each option add the corresponding one for javascript\n      const optionsArray = new Array(regExpOptions.length);\n\n      // Parse options\n      for (i = 0; i < regExpOptions.length; i++) {\n        switch (regExpOptions[i]) {\n          case 'm':\n            optionsArray[i] = 'm';\n            break;\n          case 's':\n            optionsArray[i] = 'g';\n            break;\n          case 'i':\n            optionsArray[i] = 'i';\n            break;\n        }\n      }\n\n      value = new RegExp(source, optionsArray.join(''));\n    } else if (elementType === constants.BSON_DATA_REGEXP && bsonRegExp === true) {\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      // Return the C string\n      const source = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n\n      // Get the start search index\n      i = index;\n      // Locate the end of the c string\n      while (buffer[i] !== 0x00 && i < buffer.length) {\n        i++;\n      }\n      // If are at the end of the buffer there is a problem with the document\n      if (i >= buffer.length) throw new BSONError('Bad BSON Document: illegal CString');\n      // Return the C string\n      const regExpOptions = ByteUtils.toUTF8(buffer, index, i);\n      index = i + 1;\n\n      // Set the object\n      value = new BSONRegExp(source, regExpOptions);\n    } else if (elementType === constants.BSON_DATA_SYMBOL) {\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      ) {\n        throw new BSONError('bad string length in bson');\n      }\n      const symbol = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);\n      value = promoteValues ? symbol : new BSONSymbol(symbol);\n      index = index + stringSize;\n    } else if (elementType === constants.BSON_DATA_TIMESTAMP) {\n      // We intentionally **do not** use bit shifting here\n      // Bit shifting in javascript coerces numbers to **signed** int32s\n      // We need to keep i, and t unsigned\n      const i =\n        buffer[index++] +\n        buffer[index++] * (1 << 8) +\n        buffer[index++] * (1 << 16) +\n        buffer[index++] * (1 << 24);\n      const t =\n        buffer[index++] +\n        buffer[index++] * (1 << 8) +\n        buffer[index++] * (1 << 16) +\n        buffer[index++] * (1 << 24);\n\n      value = new Timestamp({ i, t });\n    } else if (elementType === constants.BSON_DATA_MIN_KEY) {\n      value = new MinKey();\n    } else if (elementType === constants.BSON_DATA_MAX_KEY) {\n      value = new MaxKey();\n    } else if (elementType === constants.BSON_DATA_CODE) {\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      ) {\n        throw new BSONError('bad string length in bson');\n      }\n      const functionString = getValidatedString(\n        buffer,\n        index,\n        index + stringSize - 1,\n        shouldValidateKey\n      );\n\n      value = new Code(functionString);\n\n      // Update parse index position\n      index = index + stringSize;\n    } else if (elementType === constants.BSON_DATA_CODE_W_SCOPE) {\n      const totalSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n\n      // Element cannot be shorter than totalSize + stringSize + documentSize + terminator\n      if (totalSize < 4 + 4 + 4 + 1) {\n        throw new BSONError('code_w_scope total size shorter minimum expected length');\n      }\n\n      // Get the code string size\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      ) {\n        throw new BSONError('bad string length in bson');\n      }\n\n      // Javascript function\n      const functionString = getValidatedString(\n        buffer,\n        index,\n        index + stringSize - 1,\n        shouldValidateKey\n      );\n      // Update parse index position\n      index = index + stringSize;\n      // Parse the element\n      const _index = index;\n      // Decode the size of the object document\n      const objectSize =\n        buffer[index] |\n        (buffer[index + 1] << 8) |\n        (buffer[index + 2] << 16) |\n        (buffer[index + 3] << 24);\n      // Decode the scope object\n      const scopeObject = deserializeObject(buffer, _index, options, false);\n      // Adjust the index\n      index = index + objectSize;\n\n      // Check if field length is too short\n      if (totalSize < 4 + 4 + objectSize + stringSize) {\n        throw new BSONError('code_w_scope total size is too short, truncating scope');\n      }\n\n      // Check if totalSize field is too long\n      if (totalSize > 4 + 4 + objectSize + stringSize) {\n        throw new BSONError('code_w_scope total size is too long, clips outer document');\n      }\n\n      value = new Code(functionString, scopeObject);\n    } else if (elementType === constants.BSON_DATA_DBPOINTER) {\n      // Get the code string size\n      const stringSize =\n        buffer[index++] |\n        (buffer[index++] << 8) |\n        (buffer[index++] << 16) |\n        (buffer[index++] << 24);\n      // Check if we have a valid string\n      if (\n        stringSize <= 0 ||\n        stringSize > buffer.length - index ||\n        buffer[index + stringSize - 1] !== 0\n      )\n        throw new BSONError('bad string length in bson');\n      // Namespace\n      if (validation != null && validation.utf8) {\n        if (!validateUtf8(buffer, index, index + stringSize - 1)) {\n          throw new BSONError('Invalid UTF-8 string in BSON document');\n        }\n      }\n      const namespace = ByteUtils.toUTF8(buffer, index, index + stringSize - 1);\n      // Update parse index position\n      index = index + stringSize;\n\n      // Read the oid\n      const oidBuffer = ByteUtils.allocate(12);\n      oidBuffer.set(buffer.subarray(index, index + 12), 0);\n      const oid = new ObjectId(oidBuffer);\n\n      // Update the index\n      index = index + 12;\n\n      // Upgrade to DBRef type\n      value = new DBRef(namespace, oid);\n    } else {\n      throw new BSONError(\n        `Detected unknown BSON type ${elementType.toString(16)} for fieldname \"${name}\"`\n      );\n    }\n    if (name === '__proto__') {\n      Object.defineProperty(object, name, {\n        value,\n        writable: true,\n        enumerable: true,\n        configurable: true\n      });\n    } else {\n      object[name] = value;\n    }\n  }\n\n  // Check if the deserialization was against a valid array/object\n  if (size !== index - startIndex) {\n    if (isArray) throw new BSONError('corrupt array bson');\n    throw new BSONError('corrupt object bson');\n  }\n\n  // if we did not find \"$ref\", \"$id\", \"$db\", or found an extraneous $key, don't make a DBRef\n  if (!isPossibleDBRef) return object;\n\n  if (isDBRefLike(object)) {\n    const copy = Object.assign({}, object) as Partial<DBRefLike>;\n    delete copy.$ref;\n    delete copy.$id;\n    delete copy.$db;\n    return new DBRef(object.$ref, object.$id, object.$db, copy);\n  }\n\n  return object;\n}\n\nfunction getValidatedString(\n  buffer: Uint8Array,\n  start: number,\n  end: number,\n  shouldValidateUtf8: boolean\n) {\n  const value = ByteUtils.toUTF8(buffer, start, end);\n  // if utf8 validation is on, do the check\n  if (shouldValidateUtf8) {\n    for (let i = 0; i < value.length; i++) {\n      if (value.charCodeAt(i) === 0xfffd) {\n        if (!validateUtf8(buffer, start, end)) {\n          throw new BSONError('Invalid UTF-8 string in BSON document');\n        }\n        break;\n      }\n    }\n  }\n  return value;\n}\n","import { Binary } from '../binary';\nimport type { BSONSymbol, DBRef, Document, MaxKey } from '../bson';\nimport type { Code } from '../code';\nimport * as constants from '../constants';\nimport type { DBRefLike } from '../db_ref';\nimport type { Decimal128 } from '../decimal128';\nimport type { Double } from '../double';\nimport { BSONError, BSONVersionError } from '../error';\nimport type { Int32 } from '../int_32';\nimport { Long } from '../long';\nimport type { MinKey } from '../min_key';\nimport type { ObjectId } from '../objectid';\nimport type { BSONRegExp } from '../regexp';\nimport { ByteUtils } from '../utils/byte_utils';\nimport { isAnyArrayBuffer, isDate, isMap, isRegExp, isUint8Array } from './utils';\n\n/** @public */\nexport interface SerializeOptions {\n  /**\n   * the serializer will check if keys are valid.\n   * @defaultValue `false`\n   */\n  checkKeys?: boolean;\n  /**\n   * serialize the javascript functions\n   * @defaultValue `false`\n   */\n  serializeFunctions?: boolean;\n  /**\n   * serialize will not emit undefined fields\n   * note that the driver sets this to `false`\n   * @defaultValue `true`\n   */\n  ignoreUndefined?: boolean;\n  /** @internal Resize internal buffer */\n  minInternalBufferSize?: number;\n  /**\n   * the index in the buffer where we wish to start serializing into\n   * @defaultValue `0`\n   */\n  index?: number;\n}\n\nconst regexp = /\\x00/; // eslint-disable-line no-control-regex\nconst ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);\n\n/*\n * isArray indicates if we are writing to a BSON array (type 0x04)\n * which forces the \"key\" which really an array index as a string to be written as ascii\n * This will catch any errors in index as a string generation\n */\n\nfunction serializeString(buffer: Uint8Array, key: string, value: string, index: number) {\n  // Encode String type\n  buffer[index++] = constants.BSON_DATA_STRING;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes + 1;\n  buffer[index - 1] = 0;\n  // Write the string\n  const size = ByteUtils.encodeUTF8Into(buffer, value, index + 4);\n  // Write the size of the string to buffer\n  buffer[index + 3] = ((size + 1) >> 24) & 0xff;\n  buffer[index + 2] = ((size + 1) >> 16) & 0xff;\n  buffer[index + 1] = ((size + 1) >> 8) & 0xff;\n  buffer[index] = (size + 1) & 0xff;\n  // Update index\n  index = index + 4 + size;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nconst NUMBER_SPACE = new DataView(new ArrayBuffer(8), 0, 8);\nconst FOUR_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 4);\nconst EIGHT_BYTE_VIEW_ON_NUMBER = new Uint8Array(NUMBER_SPACE.buffer, 0, 8);\n\nfunction serializeNumber(buffer: Uint8Array, key: string, value: number, index: number) {\n  const isNegativeZero = Object.is(value, -0);\n\n  const type =\n    !isNegativeZero &&\n    Number.isSafeInteger(value) &&\n    value <= constants.BSON_INT32_MAX &&\n    value >= constants.BSON_INT32_MIN\n      ? constants.BSON_DATA_INT\n      : constants.BSON_DATA_NUMBER;\n\n  if (type === constants.BSON_DATA_INT) {\n    NUMBER_SPACE.setInt32(0, value, true);\n  } else {\n    NUMBER_SPACE.setFloat64(0, value, true);\n  }\n\n  const bytes =\n    type === constants.BSON_DATA_INT ? FOUR_BYTE_VIEW_ON_NUMBER : EIGHT_BYTE_VIEW_ON_NUMBER;\n\n  buffer[index++] = type;\n\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0x00;\n\n  buffer.set(bytes, index);\n  index += bytes.byteLength;\n\n  return index;\n}\n\nfunction serializeBigInt(buffer: Uint8Array, key: string, value: bigint, index: number) {\n  buffer[index++] = constants.BSON_DATA_LONG;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index += numberOfWrittenBytes;\n  buffer[index++] = 0;\n  NUMBER_SPACE.setBigInt64(0, value, true);\n  // Write BigInt value\n  buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n  index += EIGHT_BYTE_VIEW_ON_NUMBER.byteLength;\n  return index;\n}\n\nfunction serializeNull(buffer: Uint8Array, key: string, _: unknown, index: number) {\n  // Set long type\n  buffer[index++] = constants.BSON_DATA_NULL;\n\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeBoolean(buffer: Uint8Array, key: string, value: boolean, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_BOOLEAN;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Encode the boolean value\n  buffer[index++] = value ? 1 : 0;\n  return index;\n}\n\nfunction serializeDate(buffer: Uint8Array, key: string, value: Date, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_DATE;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the date\n  const dateInMilis = Long.fromNumber(value.getTime());\n  const lowBits = dateInMilis.getLowBits();\n  const highBits = dateInMilis.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nfunction serializeRegExp(buffer: Uint8Array, key: string, value: RegExp, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_REGEXP;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  if (value.source && value.source.match(regexp) != null) {\n    throw new BSONError('value ' + value.source + ' must not contain null bytes');\n  }\n  // Adjust the index\n  index = index + ByteUtils.encodeUTF8Into(buffer, value.source, index);\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the parameters\n  if (value.ignoreCase) buffer[index++] = 0x69; // i\n  if (value.global) buffer[index++] = 0x73; // s\n  if (value.multiline) buffer[index++] = 0x6d; // m\n\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nfunction serializeBSONRegExp(buffer: Uint8Array, key: string, value: BSONRegExp, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_REGEXP;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Check the pattern for 0 bytes\n  if (value.pattern.match(regexp) != null) {\n    // The BSON spec doesn't allow keys with null bytes because keys are\n    // null-terminated.\n    throw new BSONError('pattern ' + value.pattern + ' must not contain null bytes');\n  }\n\n  // Adjust the index\n  index = index + ByteUtils.encodeUTF8Into(buffer, value.pattern, index);\n  // Write zero\n  buffer[index++] = 0x00;\n  // Write the options\n  const sortedOptions = value.options.split('').sort().join('');\n  index = index + ByteUtils.encodeUTF8Into(buffer, sortedOptions, index);\n  // Add ending zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nfunction serializeMinMax(buffer: Uint8Array, key: string, value: MinKey | MaxKey, index: number) {\n  // Write the type of either min or max key\n  if (value === null) {\n    buffer[index++] = constants.BSON_DATA_NULL;\n  } else if (value._bsontype === 'MinKey') {\n    buffer[index++] = constants.BSON_DATA_MIN_KEY;\n  } else {\n    buffer[index++] = constants.BSON_DATA_MAX_KEY;\n  }\n\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeObjectId(buffer: Uint8Array, key: string, value: ObjectId, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_OID;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write the objectId into the shared buffer\n  if (isUint8Array(value.id)) {\n    buffer.set(value.id.subarray(0, 12), index);\n  } else {\n    throw new BSONError('object [' + JSON.stringify(value) + '] is not a valid ObjectId');\n  }\n\n  // Adjust index\n  return index + 12;\n}\n\nfunction serializeBuffer(buffer: Uint8Array, key: string, value: Uint8Array, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_BINARY;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Get size of the buffer (current write point)\n  const size = value.length;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the default subtype\n  buffer[index++] = constants.BSON_BINARY_SUBTYPE_DEFAULT;\n  // Copy the content form the binary field to the buffer\n  buffer.set(value, index);\n  // Adjust the index\n  index = index + size;\n  return index;\n}\n\nfunction serializeObject(\n  buffer: Uint8Array,\n  key: string,\n  value: Document,\n  index: number,\n  checkKeys: boolean,\n  depth: number,\n  serializeFunctions: boolean,\n  ignoreUndefined: boolean,\n  path: Set<Document>\n) {\n  if (path.has(value)) {\n    throw new BSONError('Cannot convert circular structure to BSON');\n  }\n\n  path.add(value);\n\n  // Write the type\n  buffer[index++] = Array.isArray(value) ? constants.BSON_DATA_ARRAY : constants.BSON_DATA_OBJECT;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  const endIndex = serializeInto(\n    buffer,\n    value,\n    checkKeys,\n    index,\n    depth + 1,\n    serializeFunctions,\n    ignoreUndefined,\n    path\n  );\n\n  path.delete(value);\n\n  return endIndex;\n}\n\nfunction serializeDecimal128(buffer: Uint8Array, key: string, value: Decimal128, index: number) {\n  buffer[index++] = constants.BSON_DATA_DECIMAL128;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the data from the value\n  buffer.set(value.bytes.subarray(0, 16), index);\n  return index + 16;\n}\n\nfunction serializeLong(buffer: Uint8Array, key: string, value: Long, index: number) {\n  // Write the type\n  buffer[index++] =\n    value._bsontype === 'Long' ? constants.BSON_DATA_LONG : constants.BSON_DATA_TIMESTAMP;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the date\n  const lowBits = value.getLowBits();\n  const highBits = value.getHighBits();\n  // Encode low bits\n  buffer[index++] = lowBits & 0xff;\n  buffer[index++] = (lowBits >> 8) & 0xff;\n  buffer[index++] = (lowBits >> 16) & 0xff;\n  buffer[index++] = (lowBits >> 24) & 0xff;\n  // Encode high bits\n  buffer[index++] = highBits & 0xff;\n  buffer[index++] = (highBits >> 8) & 0xff;\n  buffer[index++] = (highBits >> 16) & 0xff;\n  buffer[index++] = (highBits >> 24) & 0xff;\n  return index;\n}\n\nfunction serializeInt32(buffer: Uint8Array, key: string, value: Int32 | number, index: number) {\n  value = value.valueOf();\n  // Set int type 32 bits or less\n  buffer[index++] = constants.BSON_DATA_INT;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the int value\n  buffer[index++] = value & 0xff;\n  buffer[index++] = (value >> 8) & 0xff;\n  buffer[index++] = (value >> 16) & 0xff;\n  buffer[index++] = (value >> 24) & 0xff;\n  return index;\n}\n\nfunction serializeDouble(buffer: Uint8Array, key: string, value: Double, index: number) {\n  // Encode as double\n  buffer[index++] = constants.BSON_DATA_NUMBER;\n\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  // Write float\n  NUMBER_SPACE.setFloat64(0, value.value, true);\n  buffer.set(EIGHT_BYTE_VIEW_ON_NUMBER, index);\n\n  // Adjust index\n  index = index + 8;\n  return index;\n}\n\nfunction serializeFunction(buffer: Uint8Array, key: string, value: Function, index: number) {\n  buffer[index++] = constants.BSON_DATA_CODE;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Function string\n  const functionString = value.toString();\n\n  // Write the string\n  const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0;\n  return index;\n}\n\nfunction serializeCode(\n  buffer: Uint8Array,\n  key: string,\n  value: Code,\n  index: number,\n  checkKeys = false,\n  depth = 0,\n  serializeFunctions = false,\n  ignoreUndefined = true,\n  path: Set<Document>\n) {\n  if (value.scope && typeof value.scope === 'object') {\n    // Write the type\n    buffer[index++] = constants.BSON_DATA_CODE_W_SCOPE;\n    // Number of written bytes\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n\n    // Starting index\n    let startIndex = index;\n\n    // Serialize the function\n    // Get the function string\n    const functionString = value.code;\n    // Index adjustment\n    index = index + 4;\n    // Write string into buffer\n    const codeSize = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    // Write the size of the string to buffer\n    buffer[index] = codeSize & 0xff;\n    buffer[index + 1] = (codeSize >> 8) & 0xff;\n    buffer[index + 2] = (codeSize >> 16) & 0xff;\n    buffer[index + 3] = (codeSize >> 24) & 0xff;\n    // Write end 0\n    buffer[index + 4 + codeSize - 1] = 0;\n    // Write the\n    index = index + codeSize + 4;\n\n    // Serialize the scope value\n    const endIndex = serializeInto(\n      buffer,\n      value.scope,\n      checkKeys,\n      index,\n      depth + 1,\n      serializeFunctions,\n      ignoreUndefined,\n      path\n    );\n    index = endIndex - 1;\n\n    // Writ the total\n    const totalSize = endIndex - startIndex;\n\n    // Write the total size of the object\n    buffer[startIndex++] = totalSize & 0xff;\n    buffer[startIndex++] = (totalSize >> 8) & 0xff;\n    buffer[startIndex++] = (totalSize >> 16) & 0xff;\n    buffer[startIndex++] = (totalSize >> 24) & 0xff;\n    // Write trailing zero\n    buffer[index++] = 0;\n  } else {\n    buffer[index++] = constants.BSON_DATA_CODE;\n    // Number of written bytes\n    const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n    // Encode the name\n    index = index + numberOfWrittenBytes;\n    buffer[index++] = 0;\n    // Function string\n    const functionString = value.code.toString();\n    // Write the string\n    const size = ByteUtils.encodeUTF8Into(buffer, functionString, index + 4) + 1;\n    // Write the size of the string to buffer\n    buffer[index] = size & 0xff;\n    buffer[index + 1] = (size >> 8) & 0xff;\n    buffer[index + 2] = (size >> 16) & 0xff;\n    buffer[index + 3] = (size >> 24) & 0xff;\n    // Update index\n    index = index + 4 + size - 1;\n    // Write zero\n    buffer[index++] = 0;\n  }\n\n  return index;\n}\n\nfunction serializeBinary(buffer: Uint8Array, key: string, value: Binary, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_BINARY;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Extract the buffer\n  const data = value.buffer;\n  // Calculate size\n  let size = value.position;\n  // Add the deprecated 02 type 4 bytes of size to total\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) size = size + 4;\n  // Write the size of the string to buffer\n  buffer[index++] = size & 0xff;\n  buffer[index++] = (size >> 8) & 0xff;\n  buffer[index++] = (size >> 16) & 0xff;\n  buffer[index++] = (size >> 24) & 0xff;\n  // Write the subtype to the buffer\n  buffer[index++] = value.sub_type;\n\n  // If we have binary type 2 the 4 first bytes are the size\n  if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {\n    size = size - 4;\n    buffer[index++] = size & 0xff;\n    buffer[index++] = (size >> 8) & 0xff;\n    buffer[index++] = (size >> 16) & 0xff;\n    buffer[index++] = (size >> 24) & 0xff;\n  }\n\n  // Write the data to the object\n  buffer.set(data, index);\n  // Adjust the index\n  index = index + value.position;\n  return index;\n}\n\nfunction serializeSymbol(buffer: Uint8Array, key: string, value: BSONSymbol, index: number) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_SYMBOL;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n  // Write the string\n  const size = ByteUtils.encodeUTF8Into(buffer, value.value, index + 4) + 1;\n  // Write the size of the string to buffer\n  buffer[index] = size & 0xff;\n  buffer[index + 1] = (size >> 8) & 0xff;\n  buffer[index + 2] = (size >> 16) & 0xff;\n  buffer[index + 3] = (size >> 24) & 0xff;\n  // Update index\n  index = index + 4 + size - 1;\n  // Write zero\n  buffer[index++] = 0x00;\n  return index;\n}\n\nfunction serializeDBRef(\n  buffer: Uint8Array,\n  key: string,\n  value: DBRef,\n  index: number,\n  depth: number,\n  serializeFunctions: boolean,\n  path: Set<Document>\n) {\n  // Write the type\n  buffer[index++] = constants.BSON_DATA_OBJECT;\n  // Number of written bytes\n  const numberOfWrittenBytes = ByteUtils.encodeUTF8Into(buffer, key, index);\n\n  // Encode the name\n  index = index + numberOfWrittenBytes;\n  buffer[index++] = 0;\n\n  let startIndex = index;\n  let output: DBRefLike = {\n    $ref: value.collection || value.namespace, // \"namespace\" was what library 1.x called \"collection\"\n    $id: value.oid\n  };\n\n  if (value.db != null) {\n    output.$db = value.db;\n  }\n\n  output = Object.assign(output, value.fields);\n  const endIndex = serializeInto(\n    buffer,\n    output,\n    false,\n    index,\n    depth + 1,\n    serializeFunctions,\n    true,\n    path\n  );\n\n  // Calculate object size\n  const size = endIndex - startIndex;\n  // Write the size\n  buffer[startIndex++] = size & 0xff;\n  buffer[startIndex++] = (size >> 8) & 0xff;\n  buffer[startIndex++] = (size >> 16) & 0xff;\n  buffer[startIndex++] = (size >> 24) & 0xff;\n  // Set index\n  return endIndex;\n}\n\nexport function serializeInto(\n  buffer: Uint8Array,\n  object: Document,\n  checkKeys: boolean,\n  startingIndex: number,\n  depth: number,\n  serializeFunctions: boolean,\n  ignoreUndefined: boolean,\n  path: Set<Document> | null\n): number {\n  if (path == null) {\n    // We are at the root input\n    if (object == null) {\n      // ONLY the root should turn into an empty document\n      // BSON Empty document has a size of 5 (LE)\n      buffer[0] = 0x05;\n      buffer[1] = 0x00;\n      buffer[2] = 0x00;\n      buffer[3] = 0x00;\n      // All documents end with null terminator\n      buffer[4] = 0x00;\n      return 5;\n    }\n\n    if (Array.isArray(object)) {\n      throw new BSONError('serialize does not support an array as the root input');\n    }\n    if (typeof object !== 'object') {\n      throw new BSONError('serialize does not support non-object as the root input');\n    } else if ('_bsontype' in object && typeof object._bsontype === 'string') {\n      throw new BSONError(`BSON types cannot be serialized as a document`);\n    } else if (\n      isDate(object) ||\n      isRegExp(object) ||\n      isUint8Array(object) ||\n      isAnyArrayBuffer(object)\n    ) {\n      throw new BSONError(`date, regexp, typedarray, and arraybuffer cannot be BSON documents`);\n    }\n\n    path = new Set();\n  }\n\n  // Push the object to the path\n  path.add(object);\n\n  // Start place to serialize into\n  let index = startingIndex + 4;\n\n  // Special case isArray\n  if (Array.isArray(object)) {\n    // Get object keys\n    for (let i = 0; i < object.length; i++) {\n      const key = `${i}`;\n      let value = object[i];\n\n      // Is there an override value\n      if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n      }\n\n      if (typeof value === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (typeof value === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (typeof value === 'bigint') {\n        index = serializeBigInt(buffer, key, value, index);\n      } else if (typeof value === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (isUint8Array(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (typeof value === 'object' && value._bsontype == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          path\n        );\n      } else if (\n        typeof value === 'object' &&\n        value[Symbol.for('@@mdb.bson.version')] !== constants.BSON_MAJOR_VERSION\n      ) {\n        throw new BSONVersionError();\n      } else if (value._bsontype === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (value._bsontype === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value._bsontype === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index);\n      } else if (value._bsontype === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          path\n        );\n      } else if (value._bsontype === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value._bsontype === 'BSONSymbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value._bsontype === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n      } else if (value._bsontype === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value._bsontype === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value._bsontype !== 'undefined') {\n        throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n      }\n    }\n  } else if (object instanceof Map || isMap(object)) {\n    const iterator = object.entries();\n    let done = false;\n\n    while (!done) {\n      // Unpack the next entry\n      const entry = iterator.next();\n      done = !!entry.done;\n      // Are we done, then skip and terminate\n      if (done) continue;\n\n      // Get the entry values\n      const key = entry.value[0];\n      let value = entry.value[1];\n\n      if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      const type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (typeof key === 'string' && !ignoreKeys.has(key)) {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw new BSONError('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw new BSONError('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw new BSONError('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'bigint') {\n        index = serializeBigInt(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === null || (value === undefined && ignoreUndefined === false)) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (isUint8Array(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          path\n        );\n      } else if (\n        typeof value === 'object' &&\n        value[Symbol.for('@@mdb.bson.version')] !== constants.BSON_MAJOR_VERSION\n      ) {\n        throw new BSONVersionError();\n      } else if (value._bsontype === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value._bsontype === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value._bsontype === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          path\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index);\n      } else if (value._bsontype === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value._bsontype === 'BSONSymbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value._bsontype === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n      } else if (value._bsontype === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value._bsontype === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value._bsontype !== 'undefined') {\n        throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n      }\n    }\n  } else {\n    if (typeof object?.toBSON === 'function') {\n      // Provided a custom serialization method\n      object = object.toBSON();\n      if (object != null && typeof object !== 'object') {\n        throw new BSONError('toBSON function did not return an object');\n      }\n    }\n\n    // Iterate over all the keys\n    for (const key of Object.keys(object)) {\n      let value = object[key];\n      // Is there an override value\n      if (typeof value?.toBSON === 'function') {\n        value = value.toBSON();\n      }\n\n      // Check the type of the value\n      const type = typeof value;\n\n      // Check the key and throw error if it's illegal\n      if (typeof key === 'string' && !ignoreKeys.has(key)) {\n        if (key.match(regexp) != null) {\n          // The BSON spec doesn't allow keys with null bytes because keys are\n          // null-terminated.\n          throw new BSONError('key ' + key + ' must not contain null bytes');\n        }\n\n        if (checkKeys) {\n          if ('$' === key[0]) {\n            throw new BSONError('key ' + key + \" must not start with '$'\");\n          } else if (~key.indexOf('.')) {\n            throw new BSONError('key ' + key + \" must not contain '.'\");\n          }\n        }\n      }\n\n      if (type === 'string') {\n        index = serializeString(buffer, key, value, index);\n      } else if (type === 'number') {\n        index = serializeNumber(buffer, key, value, index);\n      } else if (type === 'bigint') {\n        index = serializeBigInt(buffer, key, value, index);\n      } else if (type === 'boolean') {\n        index = serializeBoolean(buffer, key, value, index);\n      } else if (value instanceof Date || isDate(value)) {\n        index = serializeDate(buffer, key, value, index);\n      } else if (value === undefined) {\n        if (ignoreUndefined === false) index = serializeNull(buffer, key, value, index);\n      } else if (value === null) {\n        index = serializeNull(buffer, key, value, index);\n      } else if (isUint8Array(value)) {\n        index = serializeBuffer(buffer, key, value, index);\n      } else if (value instanceof RegExp || isRegExp(value)) {\n        index = serializeRegExp(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype == null) {\n        index = serializeObject(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          path\n        );\n      } else if (\n        typeof value === 'object' &&\n        value[Symbol.for('@@mdb.bson.version')] !== constants.BSON_MAJOR_VERSION\n      ) {\n        throw new BSONVersionError();\n      } else if (value._bsontype === 'ObjectId') {\n        index = serializeObjectId(buffer, key, value, index);\n      } else if (type === 'object' && value._bsontype === 'Decimal128') {\n        index = serializeDecimal128(buffer, key, value, index);\n      } else if (value._bsontype === 'Long' || value._bsontype === 'Timestamp') {\n        index = serializeLong(buffer, key, value, index);\n      } else if (value._bsontype === 'Double') {\n        index = serializeDouble(buffer, key, value, index);\n      } else if (value._bsontype === 'Code') {\n        index = serializeCode(\n          buffer,\n          key,\n          value,\n          index,\n          checkKeys,\n          depth,\n          serializeFunctions,\n          ignoreUndefined,\n          path\n        );\n      } else if (typeof value === 'function' && serializeFunctions) {\n        index = serializeFunction(buffer, key, value, index);\n      } else if (value._bsontype === 'Binary') {\n        index = serializeBinary(buffer, key, value, index);\n      } else if (value._bsontype === 'BSONSymbol') {\n        index = serializeSymbol(buffer, key, value, index);\n      } else if (value._bsontype === 'DBRef') {\n        index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, path);\n      } else if (value._bsontype === 'BSONRegExp') {\n        index = serializeBSONRegExp(buffer, key, value, index);\n      } else if (value._bsontype === 'Int32') {\n        index = serializeInt32(buffer, key, value, index);\n      } else if (value._bsontype === 'MinKey' || value._bsontype === 'MaxKey') {\n        index = serializeMinMax(buffer, key, value, index);\n      } else if (typeof value._bsontype !== 'undefined') {\n        throw new BSONError(`Unrecognized or invalid _bsontype: ${String(value._bsontype)}`);\n      }\n    }\n  }\n\n  // Remove the path\n  path.delete(object);\n\n  // Final padding byte for object\n  buffer[index++] = 0x00;\n\n  // Final size\n  const size = index - startingIndex;\n  // Write the size of the object\n  buffer[startingIndex++] = size & 0xff;\n  buffer[startingIndex++] = (size >> 8) & 0xff;\n  buffer[startingIndex++] = (size >> 16) & 0xff;\n  buffer[startingIndex++] = (size >> 24) & 0xff;\n  return index;\n}\n","import { Binary } from './binary';\nimport type { Document } from './bson';\nimport { Code } from './code';\nimport {\n  BSON_INT32_MAX,\n  BSON_INT32_MIN,\n  BSON_INT64_MAX,\n  BSON_INT64_MIN,\n  BSON_MAJOR_VERSION\n} from './constants';\nimport { DBRef, isDBRefLike } from './db_ref';\nimport { Decimal128 } from './decimal128';\nimport { Double } from './double';\nimport { BSONError, BSONRuntimeError, BSONVersionError } from './error';\nimport { Int32 } from './int_32';\nimport { Long } from './long';\nimport { MaxKey } from './max_key';\nimport { MinKey } from './min_key';\nimport { ObjectId } from './objectid';\nimport { isDate, isRegExp, isMap } from './parser/utils';\nimport { BSONRegExp } from './regexp';\nimport { BSONSymbol } from './symbol';\nimport { Timestamp } from './timestamp';\n\n/** @public */\nexport type EJSONOptions = {\n  /**\n   * Output using the Extended JSON v1 spec\n   * @defaultValue `false`\n   */\n  legacy?: boolean;\n  /**\n   * Enable Extended JSON's `relaxed` mode, which attempts to return native JS types where possible, rather than BSON types\n   * @defaultValue `false` */\n  relaxed?: boolean;\n  /**\n   * Enable native bigint support\n   * @defaultValue `false`\n   */\n  useBigInt64?: boolean;\n};\n\n/** @internal */\ntype BSONType =\n  | Binary\n  | Code\n  | DBRef\n  | Decimal128\n  | Double\n  | Int32\n  | Long\n  | MaxKey\n  | MinKey\n  | ObjectId\n  | BSONRegExp\n  | BSONSymbol\n  | Timestamp;\n\nfunction isBSONType(value: unknown): value is BSONType {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    '_bsontype' in value &&\n    typeof value._bsontype === 'string'\n  );\n}\n\n// all the types where we don't need to do any special processing and can just pass the EJSON\n//straight to type.fromExtendedJSON\nconst keysToCodecs = {\n  $oid: ObjectId,\n  $binary: Binary,\n  $uuid: Binary,\n  $symbol: BSONSymbol,\n  $numberInt: Int32,\n  $numberDecimal: Decimal128,\n  $numberDouble: Double,\n  $numberLong: Long,\n  $minKey: MinKey,\n  $maxKey: MaxKey,\n  $regex: BSONRegExp,\n  $regularExpression: BSONRegExp,\n  $timestamp: Timestamp\n} as const;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction deserializeValue(value: any, options: EJSONOptions = {}) {\n  if (typeof value === 'number') {\n    // TODO(NODE-4377): EJSON js number handling diverges from BSON\n    const in32BitRange = value <= BSON_INT32_MAX && value >= BSON_INT32_MIN;\n    const in64BitRange = value <= BSON_INT64_MAX && value >= BSON_INT64_MIN;\n\n    if (options.relaxed || options.legacy) {\n      return value;\n    }\n\n    if (Number.isInteger(value) && !Object.is(value, -0)) {\n      // interpret as being of the smallest BSON integer type that can represent the number exactly\n      if (in32BitRange) {\n        return new Int32(value);\n      }\n      if (in64BitRange) {\n        if (options.useBigInt64) {\n          // eslint-disable-next-line no-restricted-globals -- This is allowed here as useBigInt64=true\n          return BigInt(value);\n        }\n        return Long.fromNumber(value);\n      }\n    }\n\n    // If the number is a non-integer or out of integer range, should interpret as BSON Double.\n    return new Double(value);\n  }\n\n  // from here on out we're looking for bson types, so bail if its not an object\n  if (value == null || typeof value !== 'object') return value;\n\n  // upgrade deprecated undefined to null\n  if (value.$undefined) return null;\n\n  const keys = Object.keys(value).filter(\n    k => k.startsWith('$') && value[k] != null\n  ) as (keyof typeof keysToCodecs)[];\n  for (let i = 0; i < keys.length; i++) {\n    const c = keysToCodecs[keys[i]];\n    if (c) return c.fromExtendedJSON(value, options);\n  }\n\n  if (value.$date != null) {\n    const d = value.$date;\n    const date = new Date();\n\n    if (options.legacy) {\n      if (typeof d === 'number') date.setTime(d);\n      else if (typeof d === 'string') date.setTime(Date.parse(d));\n      else if (typeof d === 'bigint') date.setTime(Number(d));\n      else throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n    } else {\n      if (typeof d === 'string') date.setTime(Date.parse(d));\n      else if (Long.isLong(d)) date.setTime(d.toNumber());\n      else if (typeof d === 'number' && options.relaxed) date.setTime(d);\n      else if (typeof d === 'bigint') date.setTime(Number(d));\n      else throw new BSONRuntimeError(`Unrecognized type for EJSON date: ${typeof d}`);\n    }\n    return date;\n  }\n\n  if (value.$code != null) {\n    const copy = Object.assign({}, value);\n    if (value.$scope) {\n      copy.$scope = deserializeValue(value.$scope);\n    }\n\n    return Code.fromExtendedJSON(value);\n  }\n\n  if (isDBRefLike(value) || value.$dbPointer) {\n    const v = value.$ref ? value : value.$dbPointer;\n\n    // we run into this in a \"degenerate EJSON\" case (with $id and $ref order flipped)\n    // because of the order JSON.parse goes through the document\n    if (v instanceof DBRef) return v;\n\n    const dollarKeys = Object.keys(v).filter(k => k.startsWith('$'));\n    let valid = true;\n    dollarKeys.forEach(k => {\n      if (['$ref', '$id', '$db'].indexOf(k) === -1) valid = false;\n    });\n\n    // only make DBRef if $ keys are all valid\n    if (valid) return DBRef.fromExtendedJSON(v);\n  }\n\n  return value;\n}\n\ntype EJSONSerializeOptions = EJSONOptions & {\n  seenObjects: { obj: unknown; propertyName: string }[];\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serializeArray(array: any[], options: EJSONSerializeOptions): any[] {\n  return array.map((v: unknown, index: number) => {\n    options.seenObjects.push({ propertyName: `index ${index}`, obj: null });\n    try {\n      return serializeValue(v, options);\n    } finally {\n      options.seenObjects.pop();\n    }\n  });\n}\n\nfunction getISOString(date: Date) {\n  const isoStr = date.toISOString();\n  // we should only show milliseconds in timestamp if they're non-zero\n  return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serializeValue(value: any, options: EJSONSerializeOptions): any {\n  if (value instanceof Map || isMap(value)) {\n    const obj: Record<string, unknown> = Object.create(null);\n    for (const [k, v] of value) {\n      if (typeof k !== 'string') {\n        throw new BSONError('Can only serialize maps with string keys');\n      }\n      obj[k] = v;\n    }\n\n    return serializeValue(obj, options);\n  }\n\n  if ((typeof value === 'object' || typeof value === 'function') && value !== null) {\n    const index = options.seenObjects.findIndex(entry => entry.obj === value);\n    if (index !== -1) {\n      const props = options.seenObjects.map(entry => entry.propertyName);\n      const leadingPart = props\n        .slice(0, index)\n        .map(prop => `${prop} -> `)\n        .join('');\n      const alreadySeen = props[index];\n      const circularPart =\n        ' -> ' +\n        props\n          .slice(index + 1, props.length - 1)\n          .map(prop => `${prop} -> `)\n          .join('');\n      const current = props[props.length - 1];\n      const leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);\n      const dashes = '-'.repeat(\n        circularPart.length + (alreadySeen.length + current.length) / 2 - 1\n      );\n\n      throw new BSONError(\n        'Converting circular structure to EJSON:\\n' +\n          `    ${leadingPart}${alreadySeen}${circularPart}${current}\\n` +\n          `    ${leadingSpace}\\\\${dashes}/`\n      );\n    }\n    options.seenObjects[options.seenObjects.length - 1].obj = value;\n  }\n\n  if (Array.isArray(value)) return serializeArray(value, options);\n\n  if (value === undefined) return null;\n\n  if (value instanceof Date || isDate(value)) {\n    const dateNum = value.getTime(),\n      // is it in year range 1970-9999?\n      inRange = dateNum > -1 && dateNum < 253402318800000;\n\n    if (options.legacy) {\n      return options.relaxed && inRange\n        ? { $date: value.getTime() }\n        : { $date: getISOString(value) };\n    }\n    return options.relaxed && inRange\n      ? { $date: getISOString(value) }\n      : { $date: { $numberLong: value.getTime().toString() } };\n  }\n\n  if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {\n    if (Number.isInteger(value) && !Object.is(value, -0)) {\n      // interpret as being of the smallest BSON integer type that can represent the number exactly\n      if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX) {\n        return { $numberInt: value.toString() };\n      }\n      if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX) {\n        // TODO(NODE-4377): EJSON js number handling diverges from BSON\n        return { $numberLong: value.toString() };\n      }\n    }\n    return { $numberDouble: Object.is(value, -0) ? '-0.0' : value.toString() };\n  }\n\n  if (typeof value === 'bigint') {\n    /* eslint-disable no-restricted-globals -- This is allowed as we are accepting a bigint as input */\n    if (!options.relaxed) {\n      return { $numberLong: BigInt.asIntN(64, value).toString() };\n    }\n    return Number(BigInt.asIntN(64, value));\n    /* eslint-enable */\n  }\n\n  if (value instanceof RegExp || isRegExp(value)) {\n    let flags = value.flags;\n    if (flags === undefined) {\n      const match = value.toString().match(/[gimuy]*$/);\n      if (match) {\n        flags = match[0];\n      }\n    }\n\n    const rx = new BSONRegExp(value.source, flags);\n    return rx.toExtendedJSON(options);\n  }\n\n  if (value != null && typeof value === 'object') return serializeDocument(value, options);\n  return value;\n}\n\nconst BSON_TYPE_MAPPINGS = {\n  Binary: (o: Binary) => new Binary(o.value(), o.sub_type),\n  Code: (o: Code) => new Code(o.code, o.scope),\n  DBRef: (o: DBRef) => new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields), // \"namespace\" for 1.x library backwards compat\n  Decimal128: (o: Decimal128) => new Decimal128(o.bytes),\n  Double: (o: Double) => new Double(o.value),\n  Int32: (o: Int32) => new Int32(o.value),\n  Long: (\n    o: Long & {\n      low_: number;\n      high_: number;\n      unsigned_: boolean | undefined;\n    }\n  ) =>\n    Long.fromBits(\n      // underscore variants for 1.x backwards compatibility\n      o.low != null ? o.low : o.low_,\n      o.low != null ? o.high : o.high_,\n      o.low != null ? o.unsigned : o.unsigned_\n    ),\n  MaxKey: () => new MaxKey(),\n  MinKey: () => new MinKey(),\n  ObjectId: (o: ObjectId) => new ObjectId(o),\n  BSONRegExp: (o: BSONRegExp) => new BSONRegExp(o.pattern, o.options),\n  BSONSymbol: (o: BSONSymbol) => new BSONSymbol(o.value),\n  Timestamp: (o: Timestamp) => Timestamp.fromBits(o.low, o.high)\n} as const;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction serializeDocument(doc: any, options: EJSONSerializeOptions) {\n  if (doc == null || typeof doc !== 'object') throw new BSONError('not an object instance');\n\n  const bsontype: BSONType['_bsontype'] = doc._bsontype;\n  if (typeof bsontype === 'undefined') {\n    // It's a regular object. Recursively serialize its property values.\n    const _doc: Document = {};\n    for (const name of Object.keys(doc)) {\n      options.seenObjects.push({ propertyName: name, obj: null });\n      try {\n        const value = serializeValue(doc[name], options);\n        if (name === '__proto__') {\n          Object.defineProperty(_doc, name, {\n            value,\n            writable: true,\n            enumerable: true,\n            configurable: true\n          });\n        } else {\n          _doc[name] = value;\n        }\n      } finally {\n        options.seenObjects.pop();\n      }\n    }\n    return _doc;\n  } else if (\n    doc != null &&\n    typeof doc === 'object' &&\n    typeof doc._bsontype === 'string' &&\n    doc[Symbol.for('@@mdb.bson.version')] !== BSON_MAJOR_VERSION\n  ) {\n    throw new BSONVersionError();\n  } else if (isBSONType(doc)) {\n    // the \"document\" is really just a BSON type object\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let outDoc: any = doc;\n    if (typeof outDoc.toExtendedJSON !== 'function') {\n      // There's no EJSON serialization function on the object. It's probably an\n      // object created by a previous version of this library (or another library)\n      // that's duck-typing objects to look like they were generated by this library).\n      // Copy the object into this library's version of that type.\n      const mapper = BSON_TYPE_MAPPINGS[doc._bsontype];\n      if (!mapper) {\n        throw new BSONError('Unrecognized or invalid _bsontype: ' + doc._bsontype);\n      }\n      outDoc = mapper(outDoc);\n    }\n\n    // Two BSON types may have nested objects that may need to be serialized too\n    if (bsontype === 'Code' && outDoc.scope) {\n      outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));\n    } else if (bsontype === 'DBRef' && outDoc.oid) {\n      outDoc = new DBRef(\n        serializeValue(outDoc.collection, options),\n        serializeValue(outDoc.oid, options),\n        serializeValue(outDoc.db, options),\n        serializeValue(outDoc.fields, options)\n      );\n    }\n\n    return outDoc.toExtendedJSON(options);\n  } else {\n    throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);\n  }\n}\n\n/**\n * Parse an Extended JSON string, constructing the JavaScript value or object described by that\n * string.\n *\n * @example\n * ```js\n * const { EJSON } = require('bson');\n * const text = '{ \"int32\": { \"$numberInt\": \"10\" } }';\n *\n * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }\n * console.log(EJSON.parse(text, { relaxed: false }));\n *\n * // prints { int32: 10 }\n * console.log(EJSON.parse(text));\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parse(text: string, options?: EJSONOptions): any {\n  const ejsonOptions = {\n    useBigInt64: options?.useBigInt64 ?? false,\n    relaxed: options?.relaxed ?? true,\n    legacy: options?.legacy ?? false\n  };\n  return JSON.parse(text, (key, value) => {\n    if (key.indexOf('\\x00') !== -1) {\n      throw new BSONError(\n        `BSON Document field names cannot contain null bytes, found: ${JSON.stringify(key)}`\n      );\n    }\n    return deserializeValue(value, ejsonOptions);\n  });\n}\n\n/**\n * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer\n * function is specified or optionally including only the specified properties if a replacer array\n * is specified.\n *\n * @param value - The value to convert to extended JSON\n * @param replacer - A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string\n * @param space - A String or Number object that's used to insert white space into the output JSON string for readability purposes.\n * @param options - Optional settings\n *\n * @example\n * ```js\n * const { EJSON } = require('bson');\n * const Int32 = require('mongodb').Int32;\n * const doc = { int32: new Int32(10) };\n *\n * // prints '{\"int32\":{\"$numberInt\":\"10\"}}'\n * console.log(EJSON.stringify(doc, { relaxed: false }));\n *\n * // prints '{\"int32\":10}'\n * console.log(EJSON.stringify(doc));\n * ```\n */\nfunction stringify(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  replacer?: (number | string)[] | ((this: any, key: string, value: any) => any) | EJSONOptions,\n  space?: string | number,\n  options?: EJSONOptions\n): string {\n  if (space != null && typeof space === 'object') {\n    options = space;\n    space = 0;\n  }\n  if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {\n    options = replacer;\n    replacer = undefined;\n    space = 0;\n  }\n  const serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {\n    seenObjects: [{ propertyName: '(root)', obj: null }]\n  });\n\n  const doc = serializeValue(value, serializeOptions);\n  return JSON.stringify(doc, replacer as Parameters<JSON['stringify']>[1], space);\n}\n\n/**\n * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n *\n * @param value - The object to serialize\n * @param options - Optional settings passed to the `stringify` function\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction EJSONserialize(value: any, options?: EJSONOptions): Document {\n  options = options || {};\n  return JSON.parse(stringify(value, options));\n}\n\n/**\n * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types\n *\n * @param ejson - The Extended JSON object to deserialize\n * @param options - Optional settings passed to the parse method\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction EJSONdeserialize(ejson: Document, options?: EJSONOptions): any {\n  options = options || {};\n  return parse(JSON.stringify(ejson), options);\n}\n\n/** @public */\nconst EJSON: {\n  parse: typeof parse;\n  stringify: typeof stringify;\n  serialize: typeof EJSONserialize;\n  deserialize: typeof EJSONdeserialize;\n} = Object.create(null);\nEJSON.parse = parse;\nEJSON.stringify = stringify;\nEJSON.serialize = EJSONserialize;\nEJSON.deserialize = EJSONdeserialize;\nObject.freeze(EJSON);\nexport { EJSON };\n","import { Binary, UUID } from './binary';\nimport { Code } from './code';\nimport { DBRef } from './db_ref';\nimport { Decimal128 } from './decimal128';\nimport { Double } from './double';\nimport { Int32 } from './int_32';\nimport { Long } from './long';\nimport { MaxKey } from './max_key';\nimport { MinKey } from './min_key';\nimport { ObjectId } from './objectid';\nimport { internalCalculateObjectSize } from './parser/calculate_size';\n// Parts of the parser\nimport { internalDeserialize, type DeserializeOptions } from './parser/deserializer';\nimport { serializeInto, type SerializeOptions } from './parser/serializer';\nimport { BSONRegExp } from './regexp';\nimport { BSONSymbol } from './symbol';\nimport { Timestamp } from './timestamp';\nimport { ByteUtils } from './utils/byte_utils';\nexport type { UUIDExtended, BinaryExtended, BinaryExtendedLegacy, BinarySequence } from './binary';\nexport type { CodeExtended } from './code';\nexport type { DBRefLike } from './db_ref';\nexport type { Decimal128Extended } from './decimal128';\nexport type { DoubleExtended } from './double';\nexport type { EJSONOptions } from './extended_json';\nexport type { Int32Extended } from './int_32';\nexport type { LongExtended } from './long';\nexport type { MaxKeyExtended } from './max_key';\nexport type { MinKeyExtended } from './min_key';\nexport type { ObjectIdExtended, ObjectIdLike } from './objectid';\nexport type { BSONRegExpExtended, BSONRegExpExtendedLegacy } from './regexp';\nexport type { BSONSymbolExtended } from './symbol';\nexport type { LongWithoutOverrides, TimestampExtended, TimestampOverrides } from './timestamp';\nexport type { LongWithoutOverridesClass } from './timestamp';\nexport type { SerializeOptions, DeserializeOptions };\n\nexport {\n  Code,\n  BSONSymbol,\n  DBRef,\n  Binary,\n  ObjectId,\n  UUID,\n  Long,\n  Timestamp,\n  Double,\n  Int32,\n  MinKey,\n  MaxKey,\n  BSONRegExp,\n  Decimal128\n};\nexport { BSONValue } from './bson_value';\nexport { BSONError, BSONVersionError, BSONRuntimeError } from './error';\nexport { BSONType } from './constants';\nexport { EJSON } from './extended_json';\n\n/** @public */\nexport interface Document {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\n/** @internal */\n// Default Max Size\nconst MAXSIZE = 1024 * 1024 * 17;\n\n// Current Internal Temporary Serialization Buffer\nlet buffer = ByteUtils.allocate(MAXSIZE);\n\n/**\n * Sets the size of the internal serialization buffer.\n *\n * @param size - The desired size for the internal serialization buffer in bytes\n * @public\n */\nexport function setInternalBufferSize(size: number): void {\n  // Resize the internal serialization buffer if needed\n  if (buffer.length < size) {\n    buffer = ByteUtils.allocate(size);\n  }\n}\n\n/**\n * Serialize a Javascript object.\n *\n * @param object - the Javascript object to serialize.\n * @returns Buffer object containing the serialized object.\n * @public\n */\nexport function serialize(object: Document, options: SerializeOptions = {}): Uint8Array {\n  // Unpack the options\n  const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  const minInternalBufferSize =\n    typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;\n\n  // Resize the internal serialization buffer if needed\n  if (buffer.length < minInternalBufferSize) {\n    buffer = ByteUtils.allocate(minInternalBufferSize);\n  }\n\n  // Attempt to serialize\n  const serializationIndex = serializeInto(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined,\n    null\n  );\n\n  // Create the final buffer\n  const finishedBuffer = ByteUtils.allocate(serializationIndex);\n\n  // Copy into the finished buffer\n  finishedBuffer.set(buffer.subarray(0, serializationIndex), 0);\n\n  // Return the buffer\n  return finishedBuffer;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer,\n * useful when pre-allocating the space for serialization.\n *\n * @param object - the Javascript object to serialize.\n * @param finalBuffer - the Buffer you pre-allocated to store the serialized BSON object.\n * @returns the index pointing to the last written byte in the buffer.\n * @public\n */\nexport function serializeWithBufferAndIndex(\n  object: Document,\n  finalBuffer: Uint8Array,\n  options: SerializeOptions = {}\n): number {\n  // Unpack the options\n  const checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n  const startIndex = typeof options.index === 'number' ? options.index : 0;\n\n  // Attempt to serialize\n  const serializationIndex = serializeInto(\n    buffer,\n    object,\n    checkKeys,\n    0,\n    0,\n    serializeFunctions,\n    ignoreUndefined,\n    null\n  );\n\n  finalBuffer.set(buffer.subarray(0, serializationIndex), startIndex);\n\n  // Return the index\n  return startIndex + serializationIndex - 1;\n}\n\n/**\n * Deserialize data as BSON.\n *\n * @param buffer - the buffer containing the serialized set of BSON documents.\n * @returns returns the deserialized Javascript Object.\n * @public\n */\nexport function deserialize(buffer: Uint8Array, options: DeserializeOptions = {}): Document {\n  return internalDeserialize(ByteUtils.toLocalBufferType(buffer), options);\n}\n\n/** @public */\nexport type CalculateObjectSizeOptions = Pick<\n  SerializeOptions,\n  'serializeFunctions' | 'ignoreUndefined'\n>;\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param object - the Javascript object to calculate the BSON byte size for\n * @returns size of BSON object in bytes\n * @public\n */\nexport function calculateObjectSize(\n  object: Document,\n  options: CalculateObjectSizeOptions = {}\n): number {\n  options = options || {};\n\n  const serializeFunctions =\n    typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;\n  const ignoreUndefined =\n    typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;\n\n  return internalCalculateObjectSize(object, serializeFunctions, ignoreUndefined);\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param data - the buffer containing the serialized set of BSON documents.\n * @param startIndex - the start index in the data Buffer where the deserialization is to start.\n * @param numberOfDocuments - number of documents to deserialize.\n * @param documents - an array where to store the deserialized documents.\n * @param docStartIndex - the index in the documents array from where to start inserting documents.\n * @param options - additional options used for the deserialization.\n * @returns next index in the buffer after deserialization **x** numbers of documents.\n * @public\n */\nexport function deserializeStream(\n  data: Uint8Array | ArrayBuffer,\n  startIndex: number,\n  numberOfDocuments: number,\n  documents: Document[],\n  docStartIndex: number,\n  options: DeserializeOptions\n): number {\n  const internalOptions = Object.assign(\n    { allowObjectSmallerThanBufferSize: true, index: 0 },\n    options\n  );\n  const bufferData = ByteUtils.toLocalBufferType(data);\n\n  let index = startIndex;\n  // Loop over all documents\n  for (let i = 0; i < numberOfDocuments; i++) {\n    // Find size of the document\n    const size =\n      bufferData[index] |\n      (bufferData[index + 1] << 8) |\n      (bufferData[index + 2] << 16) |\n      (bufferData[index + 3] << 24);\n    // Update options with index\n    internalOptions.index = index;\n    // Parse the document at this point\n    documents[docStartIndex + i] = internalDeserialize(bufferData, internalOptions);\n    // Adjust index by the document size\n    index = index + size;\n  }\n\n  // Return object containing end index of parsing and list of documents\n  return index;\n}\n"],"mappings":"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EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}